[{"path":"/ISSUE_TEMPLATE.html","id":"please-note","dir":"","previous_headings":"","what":"Please note:","title":"NA","text":"brms issue tracker reserved bug reports feature requests. brms-related questions rather asked https://discourse.mc-stan.org/ order reach wider community.","code":""},{"path":"/articles/brms_customfamilies.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Define Custom Response Distributions with brms","text":"brms package comes lot built-response distributions – usually called families R – specify among others linear, count data, survival, response times, ordinal models (see help(brmsfamily) overview). Despite supporting two dozen families, still long list distributions, natively supported. present vignette explain specify custom families brms. , users can benefit modeling flexibility post-processing options brms even using self-defined response distributions. built custom family want make available users, can submit pull request GitHub repository.","code":""},{"path":"/articles/brms_customfamilies.html","id":"a-case-study","dir":"Articles","previous_headings":"","what":"A Case Study","title":"Define Custom Response Distributions with brms","text":"case study, use cbpp data lme4 package, describes development CBPP disease cattle Africa. data set contains four variables: period (time period), herd (factor identifying cattle herd), incidence (number new disease cases given herd time period), well size (herd size beginning given time period). first step, predicting incidence using simple binomial model, serve baseline model. observed number events yy (incidence case) total number trials TT (size), probability mass function binomial distribution defined P(y|T,p)=(Ty)py(1−p)N−y P(y | T, p) = \\binom{T}{y} p^{y} (1 - p)^{N-y} pp event probability. classical binomial model, directly predict pp logit-scale, means observation ii compute success probability pip_i pi=exp(ηi)1+exp(ηi) p_i = \\frac{\\exp(\\eta_i)}{1 + \\exp(\\eta_i)} ηi\\eta_i linear predictor term observation ii (see vignette(\"brms_overview\") details linear predictors brms). Predicting incidence period varying intercept herd straight forward brms: summary output, see incidence probability varies substantially herds, reduces course time indicated negative coefficients period. drawback binomial model – taking account linear predictor – variance fixed Var(yi)=Tipi(1−pi)\\text{Var}(y_i) = T_i p_i (1 - p_i). variance exceeding value taken account model. multiple ways dealing called overdispersion solution described serve illustrative example define custom families brms.","code":"data(\"cbpp\", package = \"lme4\") head(cbpp) fit1 <- brm(incidence | trials(size) ~ period + (1|herd),             data = cbpp, family = binomial()) summary(fit1)"},{"path":"/articles/brms_customfamilies.html","id":"the-beta-binomial-distribution","dir":"Articles","previous_headings":"","what":"The Beta-Binomial Distribution","title":"Define Custom Response Distributions with brms","text":"beta-binomial model generalization binomial model additional parameter account overdispersion. beta-binomial model, predict binomial probability pip_i directly, assume beta distributed hyperparameters α>0\\alpha > 0 β>0\\beta > 0: pi∼Beta(αi,βi) p_i \\sim \\text{Beta}(\\alpha_i, \\beta_i) α\\alpha β\\beta parameters hard interpret generally recommended use regression models. Thus, apply different parameterization parameters μ∈[0,1]\\mu \\[0, 1] ϕ>0\\phi > 0, call Beta2\\text{Beta2}: Beta2(μ,ϕ)=Beta(μϕ,(1−μ)ϕ) \\text{Beta2}(\\mu, \\phi) = \\text{Beta}(\\mu \\phi, (1-\\mu) \\phi) parameters μ\\mu ϕ\\phi specify mean precision parameter, respectively. defining μi=exp(ηi)1+exp(ηi) \\mu_i = \\frac{\\exp(\\eta_i)}{1 + \\exp(\\eta_i)} still predict expected probability means transformed linear predictor (original binomial model), account potential overdispersion via parameter ϕ\\phi.","code":""},{"path":"/articles/brms_customfamilies.html","id":"fitting-custom-family-models","dir":"Articles","previous_headings":"","what":"Fitting Custom Family Models","title":"Define Custom Response Distributions with brms","text":"beta-binomial distribution natively supported brms nowadays, still use example define via custom_family function. function requires family’s name, names parameters (mu phi case), corresponding link functions (applied parameters predicted), theoretical lower upper bounds (applied parameters predicted), information whether distribution discrete continuous, finally, whether additional non-parameter variables need passed distribution. beta-binomial example, results following custom family: name vint1 variable containing number trials chosen arbitrarily see . Next, provide relevant Stan functions distribution defined Stan . beta_binomial2 distribution, straight forward since ordinal beta_binomial distribution already implemented. model fitting, need beta_binomial2_lpmf, beta_binomial2_rng come handy comes post-processing. define: provide information number trials (integer variable), going use addition argument vint(), can used custom families. Similarly, needed include additional vectors real data, use vreal(). Actually, particular example, elegantly apply addition argument trials() instead vint()basic binomial model. However, since present vignette meant give general overview topic, go general method. now components together fit custom beta-binomial model: summary output reveals uncertainty coefficients period somewhat larger basic binomial model, result including overdispersion parameter phi model. Apart , results looks pretty similar.","code":"beta_binomial2 <- custom_family(   \"beta_binomial2\", dpars = c(\"mu\", \"phi\"),   links = c(\"logit\", \"log\"),   lb = c(0, 0), ub = c(1, NA),   type = \"int\", vars = \"vint1[n]\" ) stan_funs <- \"   real beta_binomial2_lpmf(int y, real mu, real phi, int T) {     return beta_binomial_lpmf(y | T, mu * phi, (1 - mu) * phi);   }   int beta_binomial2_rng(real mu, real phi, int T) {     return beta_binomial_rng(T, mu * phi, (1 - mu) * phi);   } \" stanvars <- stanvar(scode = stan_funs, block = \"functions\") fit2 <- brm(   incidence | vint(size) ~ period + (1|herd), data = cbpp,   family = beta_binomial2, stanvars = stanvars ) summary(fit2)"},{"path":"/articles/brms_customfamilies.html","id":"post-processing-custom-family-models","dir":"Articles","previous_headings":"","what":"Post-Processing Custom Family Models","title":"Define Custom Response Distributions with brms","text":"post-processing methods summary plot work box custom family models. However, three particularly important methods, require additional input user. posterior_epred, posterior_predict log_lik computing predicted mean values, predicted response values, log-likelihood values, respectively. relevant sake, also provide basis many post-processing methods. instance, may interested comparing fit binomial model beta-binomial model means approximate leave-one-cross-validation implemented method loo, turn requires log_lik working. log_lik function family named log_lik_<family-name> two arguments (indicating observations) prep. don’t worry much prep created (interested, check prepare_predictions function). Instead, need know parameters stored slot dpars data stored slot data. Generally, parameters take form S×NS \\times N matrix (S=S = number posterior draws N=N = number observations) predicted (mu example) vector size NN predicted (phi). define complete log-likelihood function R directly, can expose self-defined Stan functions apply . latter approach usually convenient, former stable option implementing custom families R packages building upon brms. purpose present vignette, go latter approach. define required log_lik functions lines code. get_dpar function necessary transformations handle case distributional parameters predicted separately row whole fit. done, post-processing methods requiring log_lik work well. instance, model comparison can simply performed via Since larger ELPD values indicate better fit, see beta-binomial model fits somewhat better, although corresponding standard error reveals difference substantial. Next, define function necessary posterior_predict method: posterior_predict function looks pretty similar corresponding log_lik function, except now creating random draws response instead log-likelihood values. , using exposed Stan function convenience. Make sure add ... argument posterior_predict function even using , since families require additional arguments. posterior_predict working, can engage instance posterior-predictive checking: defining posterior_epred function, keep mind prep argument compute mean response values observations . Since mean beta-binomial distribution E(y)=μT\\text{E}(y) = \\mu T definition corresponding posterior_epred function complicated, need get dimension parameters data line. post-processing method relying directly posterior_epred conditional_effects, allows visualize effects predictors. ease interpretation set size 1 y-axis plot indicates probabilities.","code":"expose_functions(fit2, vectorize = TRUE) log_lik_beta_binomial2 <- function(i, prep) {   mu <- brms::get_dpar(prep, \"mu\", i = i)   phi <- brms::get_dpar(prep, \"phi\", i = i)   trials <- prep$data$vint1[i]   y <- prep$data$Y[i]   beta_binomial2_lpmf(y, mu, phi, trials) } loo(fit1, fit2) posterior_predict_beta_binomial2 <- function(i, prep, ...) {   mu <- brms::get_dpar(prep, \"mu\", i = i)   phi <- brms::get_dpar(prep, \"phi\", i = i)   trials <- prep$data$vint1[i]   beta_binomial2_rng(mu, phi, trials) } pp_check(fit2) posterior_epred_beta_binomial2 <- function(prep) {   mu <- brms::get_dpar(prep, \"mu\")   trials <- prep$data$vint1   trials <- matrix(trials, nrow = nrow(mu), ncol = ncol(mu), byrow = TRUE)   mu * trials } conditional_effects(fit2, conditions = data.frame(size = 1))"},{"path":"/articles/brms_customfamilies.html","id":"turning-a-custom-family-into-a-native-family","dir":"Articles","previous_headings":"","what":"Turning a Custom Family into a Native Family","title":"Define Custom Response Distributions with brms","text":"Family functions built natively brms safer use convenient, require much less user input. think custom family general enough useful users, please feel free open issue GitHub can discuss details. Provided agree makes sense implement family natively brms, following steps required (foo placeholder family name): family-lists.R, add function .family_foo contain basic information family (find lots examples families ). families.R, add family function foo simple wrapper around .brmsfamily. stan-likelihood.R, add function stan_log_lik_foo provides likelihood family Stan language. necessary, add self-defined Stan functions separate files inst/chunks. Add functions posterior_predict_foo, posterior_epred_foo log_lik_foo posterior_predict.R, posterior_epred.R log_lik.R, respectively. necessary, add distribution functions distributions.R.","code":""},{"path":"/articles/brms_distreg.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating Distributional Models with brms","text":"vignette provides introduction fit distributional regression models brms. use term distributional model refer model, can specify predictor terms parameters assumed response distribution. vast majority regression model implementations, location parameter (usually mean) response distribution depends predictors corresponding regression parameters. parameters (e.g., scale shape parameters) estimated auxiliary parameters assuming constant across observations. assumption common researchers applying regression models often (experience) aware possibility relaxing . understandable insofar relaxing assumption drastically increase model complexity thus makes models hard fit. Fortunately, brms uses Stan backend, incredibly flexible powerful tool estimating Bayesian models model complexity much less issue. Suppose normally distributed response variable. , basic linear regression, specify predictor term ημ\\eta_{\\mu} mean parameter μ\\mu normal distribution. second parameter normal distribution – residual standard deviation σ\\sigma – assumed constant across observations. estimate σ\\sigma try predict . distributional model, however, exactly specifying predictor term ησ\\eta_{\\sigma} σ\\sigma addition predictor term ημ\\eta_{\\mu}. Ignoring group-level effects moment, linear predictor parameter θ\\theta observation nn form ηθn=∑=1Kθbθixθin\\eta_{\\theta n} = \\sum_{= 1}^{K_{\\theta}} b_{\\theta } x_{\\theta n} xθinx_{\\theta n} denotes value iith predictor parameter θ\\theta observation nn bθib_{\\theta } iith regression coefficient parameter θ\\theta. distributional normal model response variable yy can written yn∼𝒩(ημn,exp(ησn))y_n \\sim \\mathcal{N}\\left(\\eta_{\\mu n}, \\, \\exp(\\eta_{\\sigma n}) \\right) used exponential function around ησ\\eta_{\\sigma} reflect σ\\sigma constitutes standard deviation thus takes positive values, linear predictor can real number.","code":""},{"path":"/articles/brms_distreg.html","id":"a-simple-distributional-model","dir":"Articles","previous_headings":"","what":"A simple distributional model","title":"Estimating Distributional Models with brms","text":"Unequal variance models possibly simple, nevertheless important application distributional models. Suppose two groups patients: One group receives treatment (e.g., antidepressive drug) another group receives placebo. Since treatment may work equally well patients, symptom variance treatment group may larger symptom variance placebo group weeks treatment. simplicity, assume investigate post-treatment values. following model estimates effect group mean residual standard deviation normal response distribution. Useful summary statistics plots can obtained via population-level effect sigma_grouptreat, contrast two residual standard deviations log-scale, reveals variances groups indeed different. impression confirmed looking conditional_effects group. Going one step , can compute residual standard deviations original scale using hypothesis method. may also directly compare plot posterior distribution difference. Indeed, residual standard deviation treatment group seems larger placebo group. Moreover magnitude difference pretty similar expected due values put data simulations.","code":"group <- rep(c(\"treat\", \"placebo\"), each = 30) symptom_post <- c(rnorm(30, mean = 1, sd = 2), rnorm(30, mean = 0, sd = 1)) dat1 <- data.frame(group, symptom_post) head(dat1) fit1 <- brm(bf(symptom_post ~ group, sigma ~ group),             data = dat1, family = gaussian()) summary(fit1) plot(fit1, N = 2, ask = FALSE) plot(conditional_effects(fit1), points = TRUE) hyp <- c(\"exp(sigma_Intercept) = 0\",          \"exp(sigma_Intercept + sigma_grouptreat) = 0\") hypothesis(fit1, hyp) hyp <- \"exp(sigma_Intercept + sigma_grouptreat) > exp(sigma_Intercept)\" (hyp <- hypothesis(fit1, hyp)) plot(hyp, chars = NULL)"},{"path":"/articles/brms_distreg.html","id":"zero-inflated-models","dir":"Articles","previous_headings":"","what":"Zero-Inflated Models","title":"Estimating Distributional Models with brms","text":"Another important application distributional regression framework called zero-inflated models. models helpful whenever zeros response variable one naturally expect. example, one seeks predict number cigarettes people smoke per day also includes non-smokers, huge amount zeros , modeled appropriately, can seriously distort parameter estimates. , consider example dealing number fish caught various groups people. UCLA website (), data described follows: “state wildlife biologists want model many fish caught fishermen state park. Visitors asked long stayed, many people group, children group many fish caught. visitors fish, data whether person fished . visitors fish catch fish excess zeros data people fish.” predictors choose number people per group, number children, well whether group consists campers. Many groups may even try catching fish (thus leading many zero responses) fit zero-inflated Poisson model data. now, assume constant zero-inflation probability across observations. , summarize results using usual methods. According parameter estimates, larger groups catch fish, campers catch fish non-campers, groups children catch less fish. zero-inflation probability zi pretty large mean 41%. Please note probability catching fish actually higher 41%, parts probability already modeled Poisson distribution (hence name zero-inflation). want treat zeros originating separate process, can use hurdle models instead (shown ). Now, try additionally predict zero-inflation probability number children. underlying reasoning expect groups children even try catching fish. children just terribly bad waiting hours something happens. purely statistical perspective, zero-inflated (hurdle) distributions mixture two processes predicting parts model natural often reasonable make full use data. transform linear predictor zi probability, brms applies logit-link: logit(zi)=log(zi1−zi)=ηzilogit(zi) = \\log\\left(\\frac{zi}{1-zi}\\right) = \\eta_{zi} logit-link takes values within [0,1][0, 1] returns values real line. Thus, allows transition probabilities linear predictors. According model, trying fish children decreases overall number fish caught (implied Poisson part model) also drastically increases change catching fish (implied zero-inflation part) likely groups children even trying.","code":"zinb <- read.csv(\"https://paul-buerkner.github.io/data/fish.csv\") head(zinb) fit_zinb1 <- brm(count ~ persons + child + camper,                  data = zinb, family = zero_inflated_poisson()) summary(fit_zinb1) plot(conditional_effects(fit_zinb1), ask = FALSE) fit_zinb2 <- brm(bf(count ~ persons + child + camper, zi ~ child),                  data = zinb, family = zero_inflated_poisson()) summary(fit_zinb2) plot(conditional_effects(fit_zinb2), ask = FALSE)"},{"path":"/articles/brms_distreg.html","id":"additive-distributional-models","dir":"Articles","previous_headings":"","what":"Additive Distributional Models","title":"Estimating Distributional Models with brms","text":"examples far, multilevel data thus fully use capabilities distributional regression framework brms. example presented , show deal multilevel data distributional models, also incorporate smooth terms (.e., splines) model. many applications, vague idea relationship predictor response looks like. flexible approach tackle problems use splines let figure form relationship. illustration purposes, simulate data mgcv package, also used brms prepare smooth terms. data contains predictors x0 x3 well grouping factor fac indicating nested structure data. predict response variable y using smooth terms x1 x2 varying intercept fac. addition, assume residual standard deviation sigma vary smoothing term x0 varying intercept fac. model likely overkill data hand, nicely demonstrates ease one can specify complex models brms fit using Stan backend.","code":"dat_smooth <- mgcv::gamSim(eg = 6, n = 200, scale = 2, verbose = FALSE) head(dat_smooth[, 1:6]) fit_smooth1 <- brm(   bf(y ~ s(x1) + s(x2) + (1|fac), sigma ~ s(x0) + (1|fac)),   data = dat_smooth, family = gaussian(),   chains = 2, control = list(adapt_delta = 0.95) ) summary(fit_smooth1) plot(conditional_effects(fit_smooth1), points = TRUE, ask = FALSE)"},{"path":"/articles/brms_families.html","id":"notation","dir":"Articles","previous_headings":"","what":"Notation","title":"Parameterization of Response Distributions in brms","text":"Throughout vignette, denote values response variable yy, density function ff, use μ\\mu refer main model parameter, usually mean response distribution closely related quantity. regression framework, μ\\mu estimated directly computed μ=g(η)\\mu = g(\\eta), η\\eta predictor term (see help(brmsformula) details) gg response function (.e., inverse link function).","code":""},{"path":"/articles/brms_families.html","id":"location-shift-models","dir":"Articles","previous_headings":"","what":"Location shift models","title":"Parameterization of Response Distributions in brms","text":"density gaussian family given f(y)=12πσexp(−12(y−μσ)2) f(y) = \\frac{1}{\\sqrt{2\\pi}\\sigma} \\exp\\left(-\\frac{1}{2}\\left(\\frac{y - \\mu}{\\sigma}\\right)^2\\right) σ\\sigma residual standard deviation. density student family given f(y)=Γ((ν+1)/2)Γ(ν/2)1νπσ(1+1ν(y−μσ)2)−(ν+1)/2 f(y) = \\frac{\\Gamma((\\nu + 1)/2)}{\\Gamma(\\nu/2)} \\frac{1}{\\sqrt{\\nu\\pi}\\sigma}\\left(1 + \\frac{1}{\\nu} \\left(\\frac{y - \\mu}{\\sigma}\\right)^2\\right)^{-(\\nu+1)/2} Γ\\Gamma denotes gamma function ν>1\\nu > 1 degrees freedom. ν→∞\\nu \\rightarrow \\infty, student distribution becomes gaussian distribution. density skew_normal family given f(y)=12πωexp(−12(y−ξω)2)(1+erf(α(y−ξω2))) f(y) = \\frac{1}{\\sqrt{2\\pi}\\omega}  \\exp\\left(-\\frac{1}{2} \\left(\\frac{y - \\xi}{\\omega}\\right)^2  \\right) \\left(1 + \\text{erf} \\left( \\alpha \\left(\\frac{y - \\xi}{\\omega \\sqrt{2}} \\right) \\right) \\right) ξ\\xi location parameter, ω\\omega positive scale parameter, α\\alpha skewness parameter, erf\\text{erf} denotes error function gaussian distribution. parameterize skew-normal distribution terms mean μ\\mu standard deviation σ\\sigma, ω\\omega ξ\\xi computed ω=σ1−2πα21+α2 \\omega = \\frac{\\sigma}{\\sqrt{1 - \\frac{2}{\\pi} \\frac{\\alpha^2}{1 + \\alpha^2}}} ξ=μ−ωα1+α22π \\xi = \\mu - \\omega \\frac{\\alpha}{\\sqrt{1 + \\alpha^2}} \\sqrt{\\frac{2}{\\pi}} α=0\\alpha = 0, skew-normal distribution becomes gaussian distribution. location shift models, yy can real value.","code":""},{"path":"/articles/brms_families.html","id":"binary-and-count-data-models","dir":"Articles","previous_headings":"","what":"Binary and count data models","title":"Parameterization of Response Distributions in brms","text":"density binomial family given f(y)=(Ny)μy(1−μ)N−y f(y) = {N \\choose y} \\mu^{y} (1-\\mu)^{N - y}  NN number trials y∈{0,...,N}y \\\\{0, ... , N\\}. NN 11 (.e., y∈{0,1}y \\\\{0,1\\}), bernoulli distribution binary data arises. y∈ℕ0y \\\\mathbb{N}_0, density poisson family given f(y)=μyy!exp(−μ) f(y) = \\frac{\\mu^{y}}{y!} \\exp(-\\mu)  density negbinomial (negative binomial) family f(y)=(y+ϕ−1y)(μμ+ϕ)y(ϕμ+ϕ)ϕ f(y) = {y + \\phi - 1 \\choose y} \\left(\\frac{\\mu}{\\mu + \\phi}\\right)^{y} \\left(\\frac{\\phi}{\\mu + \\phi}\\right)^\\phi  ϕ\\phi positive precision parameter. ϕ→∞\\phi \\rightarrow \\infty, negative binomial distribution becomes poisson distribution. density geometric family arises ϕ\\phi set 11.","code":""},{"path":"/articles/brms_families.html","id":"time-to-event-models","dir":"Articles","previous_headings":"","what":"Time-to-event models","title":"Parameterization of Response Distributions in brms","text":"time--event models mean models defined positive reals , y∈ℝ+y \\\\mathbb{R}^+. density lognormal family given f(y)=12πσyexp(−12(log(y)−μσ)2) f(y) = \\frac{1}{\\sqrt{2\\pi}\\sigma y} \\exp\\left(-\\frac{1}{2}\\left(\\frac{\\log(y) - \\mu}{\\sigma}\\right)^2\\right)  σ\\sigma residual standard deviation log-scale. density Gamma family given f(y)=(α/μ)αΓ(α)yα−1exp(−αyμ) f(y) = \\frac{(\\alpha / \\mu)^\\alpha}{\\Gamma(\\alpha)} y^{\\alpha-1} \\exp\\left(-\\frac{\\alpha y}{\\mu}\\right)  α\\alpha positive shape parameter. density weibull family given f(y)=αs(ys)α−1exp(−(ys)α) f(y) = \\frac{\\alpha}{s} \\left(\\frac{y}{s}\\right)^{\\alpha-1} \\exp\\left(-\\left(\\frac{y}{s}\\right)^\\alpha\\right)  α\\alpha positive shape parameter s=μ/Γ(1+1/α)s = \\mu / \\Gamma(1 + 1 / \\alpha) scale parameter μ\\mu mean distribution. exponential family arises α\\alpha set 11 either gamma Weibull distribution. density inverse.gaussian family given f(y)=(α2πy3)1/2exp(−α(y−μ)22μ2y) f(y) = \\left(\\frac{\\alpha}{2 \\pi y^3}\\right)^{1/2} \\exp \\left(\\frac{-\\alpha (y - \\mu)^2}{2 \\mu^2 y} \\right)  α\\alpha positive shape parameter. cox family implements Cox proportional hazards model assumes hazard function form h(y)=h0(y)μh(y) = h_0(y) \\mu baseline hazard h0(y)h_0(y) expressed via M-splines (integrate -splines) order ensure monotonicity. density cox model given f(y)=h(y)S(y) f(y) = h(y) S(y)  S(y)S(y) survival function implied h(y)h(y).","code":""},{"path":"/articles/brms_families.html","id":"extreme-value-models","dir":"Articles","previous_headings":"","what":"Extreme value models","title":"Parameterization of Response Distributions in brms","text":"Modeling extremes requires special distributions. One may use weibull distribution (see ) frechet distribution density f(y)=νs(ys)−1−νexp(−(ys)−ν) f(y) = \\frac{\\nu}{s} \\left(\\frac{y}{s}\\right)^{-1-\\nu} \\exp\\left(-\\left(\\frac{y}{s}\\right)^{-\\nu}\\right)  s=μ/Γ(1−1/ν)s = \\mu / \\Gamma(1 - 1 / \\nu) positive scale parameter ν>1\\nu > 1 shape parameter μ\\mu predicts mean Frechet distribution. generalization distributions generalized extreme value distribution (family gen_extreme_value) density f(y)=1σt(y)ξ+1exp(−t(y)) f(y) = \\frac{1}{\\sigma} t(y)^{\\xi + 1} \\exp(-t(y))  t(y)=(1+ξ(y−μσ))−1/ξ t(y) = \\left(1 + \\xi \\left(\\frac{y - \\mu}{\\sigma} \\right)\\right)^{-1 / \\xi}  positive scale parameter σ\\sigma shape parameter ξ\\xi.","code":""},{"path":"/articles/brms_families.html","id":"response-time-models","dir":"Articles","previous_headings":"","what":"Response time models","title":"Parameterization of Response Distributions in brms","text":"One family especially suited model reaction times exgaussian (‘exponentially modified Gaussian’) family. density given f(y)=12βexp(12β(2ξ+σ2/β−2y))erfc(ξ+σ2/β−y2σ) f(y) = \\frac{1}{2 \\beta} \\exp\\left(\\frac{1}{2 \\beta} \\left(2\\xi + \\sigma^2 / \\beta - 2 y \\right) \\right) \\text{erfc}\\left(\\frac{\\xi + \\sigma^2 / \\beta - y}{\\sqrt{2} \\sigma} \\right)  β\\beta scale (inverse rate) exponential component, ξ\\xi mean Gaussian component, σ\\sigma standard deviation Gaussian component, erfc\\text{erfc} complementary error function. parameterize μ=ξ+β\\mu = \\xi + \\beta main predictor term equals mean distribution. Another family well suited modeling response times shifted_lognormal distribution. ’s density equals lognormal distribution except whole distribution shifted right positive parameter called ndt (consistency wiener diffusion model explained ). family concerned combined modeling reaction times corresponding binary responses wiener diffusion model. four model parameters natural interpretation. parameter α>0\\alpha > 0 describes separation two boundaries diffusion process, τ>0\\tau > 0 describes non-decision time (e.g., due image motor processing), β∈[0,1]\\beta \\[0, 1] describes initial bias favor upper alternative, δ∈ℝ\\delta \\\\mathbb{R} describes drift rate boundaries (positive value indicates drift towards upper boundary). density reaction time upper boundary given f(y)=α(y−τ)3/2exp(−δαβ−δ2(y−τ)2)∑k=−∞∞(2k+β)ϕ(2k+αβy−τ) f(y) = \\frac{\\alpha}{(y-\\tau)^3/2} \\exp \\! \\left(- \\delta \\alpha \\beta - \\frac{\\delta^2(y-\\tau)}{2}\\right) \\sum_{k = - \\infty}^{\\infty} (2k + \\beta) \\phi \\! \\left(\\frac{2k + \\alpha \\beta}{\\sqrt{y - \\tau}}\\right) ϕ(x)\\phi(x) denotes standard normal density function. density lower boundary can obtained substituting 1−β1 - \\beta β\\beta −δ-\\delta δ\\delta equation. brms parameters α\\alpha, τ\\tau, β\\beta modeled auxiliary parameters named bs (‘boundary separation’), ndt (‘non-decision time’), bias respectively, whereas drift rate δ\\delta modeled via ordinary model formula δ=μ\\delta = \\mu.","code":""},{"path":"/articles/brms_families.html","id":"quantile-regression","dir":"Articles","previous_headings":"","what":"Quantile regression","title":"Parameterization of Response Distributions in brms","text":"Quantile regression implemented via family asym_laplace (asymmetric Laplace distribution) density f(y)=p(1−p)σexp(−ρp(y−μσ)) f(y) = \\frac{p (1 - p)}{\\sigma} \\exp\\left(-\\rho_p\\left(\\frac{y - \\mu}{\\sigma}\\right)\\right)  ρp\\rho_p given ρp(x)=x(p−Ix<0)\\rho_p(x) = x (p - I_{x < 0}) IAI_A indicator function set AA. parameter σ\\sigma positive scale parameter pp quantile parameter taking values (0,1)(0, 1). distribution, P(Y<g(η))=pP(Y < g(\\eta)) = p. Thus, quantile regression can performed fixing pp quantile interest.","code":""},{"path":"/articles/brms_families.html","id":"probability-models","dir":"Articles","previous_headings":"","what":"Probability models","title":"Parameterization of Response Distributions in brms","text":"density Beta family y∈(0,1)y \\(0,1) given f(y)=yμϕ−1(1−y)(1−μ)ϕ−1B(μϕ,(1−μ)ϕ) f(y) = \\frac{y^{\\mu \\phi - 1} (1-y)^{(1-\\mu) \\phi-1}}{B(\\mu \\phi, (1-\\mu) \\phi)}  BB beta function ϕ\\phi positive precision parameter. multivariate generalization Beta family dirichlet family density f(y)=1B((μ1,…,μK)ϕ)∏k=1Kykμkϕ−1. f(y) = \\frac{1}{B((\\mu_{1}, \\ldots, \\mu_{K}) \\phi)}   \\prod_{k=1}^K y_{k}^{\\mu_{k} \\phi - 1}.  dirichlet family implemented multivariate logit link function μj=exp(ηj)∑k=1Kexp(ηk) \\mu_{j} = \\frac{\\exp(\\eta_{j})}{\\sum_{k = 1}^{K} \\exp(\\eta_{k})}  reasons identifiability, $\\eta_{\\rm ref}$ set 00, ${\\rm ref}$ one response categories chosen reference. alternative dirichlet family logistic_normal family density f(y)=1∏k=1Kyk×multivariate_normal(ỹ|μ,σ,Ω) f(y) = \\frac{1}{\\prod_{k=1}^K y_k} \\times   \\text{multivariate_normal}(\\tilde{y} \\, | \\, \\mu, \\sigma, \\Omega)  ỹ\\tilde{y} multivariate logit transformed response $$ \\tilde{y} = (\\log(y_1 / y_{\\rm ref}), \\ldots, \\log(y_{\\rm ref-1} / y_{\\rm ref}),              \\log(y_{\\rm ref+1} / y_{\\rm ref}), \\ldots, \\log(y_K / y_{\\rm ref})) $$ dimension K−1K-1 (excluding reference category), modeled multivariate normally distributed latent mean standard deviation vectors μ\\mu σ\\sigma, well correlation matrix Ω\\Omega.","code":""},{"path":"/articles/brms_families.html","id":"circular-models","dir":"Articles","previous_headings":"","what":"Circular models","title":"Parameterization of Response Distributions in brms","text":"density von_mises family y∈(−π,π)y \\(-\\pi,\\pi) given f(y)=exp(κcos(y−μ))2πI0(κ) f(y) = \\frac{\\exp(\\kappa \\cos(y - \\mu))}{2\\pi I_0(\\kappa)}  I0I_0 modified Bessel function order 0 κ\\kappa positive precision parameter.","code":""},{"path":"/articles/brms_families.html","id":"ordinal-and-categorical-models","dir":"Articles","previous_headings":"","what":"Ordinal and categorical models","title":"Parameterization of Response Distributions in brms","text":"ordinal categorical models, yy one categories 1,...,K1, ..., K. intercepts ordinal models called thresholds denoted τk\\tau_k, k∈{1,...,K−1}k \\\\{1, ..., K-1\\}, whereas η\\eta contain fixed effects intercept. Note applied link functions hh technically distribution functions ℝ→[0,1]\\mathbb{R} \\rightarrow [0,1]. density cumulative family (implementing basic ordinal model) given f(y)=g(τy+1−η)−g(τy−η) f(y) = g(\\tau_{y + 1} - \\eta) - g(\\tau_{y} - \\eta) densities sratio (stopping ratio) cratio (continuation ratio) families given f(y)=g(τy+1−η)∏k=1y(1−g(τk−η)) f(y) =  g(\\tau_{y + 1} - \\eta) \\prod_{k = 1}^{y} (1 - g(\\tau_{k} - \\eta))  f(y)=(1−g(η−τy+1))∏k=1yg(η−τk) f(y) = (1 - g(\\eta - \\tau_{y + 1})) \\prod_{k = 1}^{y} g(\\eta - \\tau_{k}) respectively. Note families equivalent symmetric link functions logit probit. density acat (adjacent category) family given f(y)=∏k=1yg(η−τk)∏k=y+1K(1−g(η−τk))∑k=0K∏j=1kg(η−τj)∏j=k+1K(1−g(η−τj)) f(y) = \\frac{\\prod_{k=1}^{y} g(\\eta - \\tau_{k})   \\prod_{k=y+1}^K(1-g(\\eta - \\tau_{k}))}{\\sum_{k=0}^K\\prod_{j=1}^k g(\\eta-\\tau_{j})   \\prod_{j=k+1}^K(1-g(\\eta - \\tau_{j}))}  logit link, can simplified f(y)=exp(∑k=1y(η−τk))∑k=0Kexp(∑j=1k(η−τj)) f(y) = \\frac{\\exp \\left(\\sum_{k=1}^{y} (\\eta - \\tau_{k}) \\right)}   {\\sum_{k=0}^K \\exp\\left(\\sum_{j=1}^k (\\eta - \\tau_{j}) \\right)}  linear predictor η\\eta can generalized also depend category kk subset predictors. leads category specific effects (details specify see help(brm)). Note cumulative sratio models use τ−η\\tau - \\eta, whereas cratio acat use η−τ\\eta - \\tau. done ensure larger values η\\eta increase probability higher response categories. categorical family currently implemented multivariate logit link function density f(y)=μy=exp(ηy)∑k=1Kexp(ηk) f(y) = \\mu_{y} = \\frac{\\exp(\\eta_{y})}{\\sum_{k = 1}^{K} \\exp(\\eta_{k})}  Note η\\eta also depend category kk. reasons identifiability, η1\\eta_{1} set 00. generalization categorical family one trial multinomial family density f(y)=(Ny1,y2,…,yK)∏k=1Kμkyk f(y) = {N \\choose y_{1}, y_{2}, \\ldots, y_{K}}   \\prod_{k=1}^K \\mu_{k}^{y_{k}}  , category, μk\\mu_{k} estimated via multivariate logit link function shown .","code":""},{"path":"/articles/brms_families.html","id":"zero-inflated-and-hurdle-models","dir":"Articles","previous_headings":"","what":"Zero-inflated and hurdle models","title":"Parameterization of Response Distributions in brms","text":"Zero-inflated hurdle families extend existing families adding special processes responses zero. density zero-inflated family given $$ f_z(y) = z + (1 - z) f(0) \\quad \\text{} y = 0 \\\\ f_z(y) = (1 - z) f(y) \\quad \\text{} y > 0 $$ zz denotes zero-inflation probability. Currently implemented families zero_inflated_poisson, zero_inflated_binomial, zero_inflated_negbinomial, zero_inflated_beta. density hurdle family given $$ f_z(y) = z \\quad \\text{} y = 0 \\\\ f_z(y) = (1 - z) f(y) / (1 - f(0)) \\quad \\text{} y > 0 $$ Currently implemented families hurdle_poisson, hurdle_negbinomial, hurdle_gamma, hurdle_lognormal. density zero-one-inflated family given $$ f_{\\alpha, \\gamma}(y) = \\alpha (1 - \\gamma) \\quad \\text{} y = 0 \\\\ f_{\\alpha, \\gamma}(y) = \\alpha \\gamma \\quad \\text{} y = 1 \\\\ f_{\\alpha, \\gamma}(y) = (1 - \\alpha) f(y) \\quad \\text{} y \\notin \\{0, 1\\} $$ α\\alpha zero-one-inflation probability (.e. probability zero one occurs) γ\\gamma conditional one-inflation probability (.e. probability one occurs rather zero). Currently implemented families zero_one_inflated_beta.","code":""},{"path":"/articles/brms_missings.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Handle Missing Values with brms","text":"Many real world data sets contain missing values various reasons. Generally, quite options handle missing values. easiest solution remove rows data set, one variables missing. However, values missing completely random, likely lead bias analysis. Accordingly, usually want impute missing values one way . , consider two general approaches using brms: (1) Impute missing values model fitting multiple imputation, (2) impute missing values fly model fitting1. simple example, use nhanes data set, contains information participants’ age, bmi (body mass index), hyp (hypertensive), chl (total serum cholesterol). purpose present vignette, primarily interested predicting bmi age chl.","code":"data(\"nhanes\", package = \"mice\") head(nhanes)"},{"path":"/articles/brms_missings.html","id":"imputation-before-model-fitting","dir":"Articles","previous_headings":"","what":"Imputation before model fitting","title":"Handle Missing Values with brms","text":"many approaches allowing us impute missing data actual model fitting takes place. statistical perspective, multiple imputation one best solutions. missing value imputed m times leading total m fully imputed data sets. model can fitted data sets separately results pooled across models, afterwards. One widely applied package multiple imputation mice (Buuren & Groothuis-Oudshoorn, 2010) use following combination brms. , apply default settings mice, means variables used impute missing values variables imputation functions automatically chosen based variables’ characteristics. Now, m = 5 imputed data sets stored within imp object. practice, likely need 5 accurately account uncertainty induced missingness, perhaps even area 100 imputed data sets (Zhou & Reiter, 2010). course, increases computational burden lot stick m = 5 purpose vignette. Regardless value m, can either extract data sets pass actual model fitting function list data frames, pass imp directly. latter works brms offers special support data imputed mice. go latter approach, since less typing. Fitting model interest brms multiple imputed data sets straightforward. returned fitted model ordinary brmsfit object containing posterior draws m submodels. pooling across models necessarily straightforward classical statistics, trivial Bayesian framework. , pooling results multiple imputed data sets simply achieved combining posterior draws submodels. Accordingly, post-processing methods can used box without worry pooling . summary output, notice Rhat values higher 1.11.1 indicating possible convergence problems. models based multiple imputed data sets, often false positive: Chains different submodels may overlay exactly, since fitted different data. can see chains right-hand side non-overlaying chains imply high Rhat values without actually convergence issue. Accordingly, investigate convergence submodels separately, can example via: convergence submodels looks good. Accordingly, can proceed post-processing interpretation results. instance, investigate combined effect age chl. summarize, advantages multiple imputation obvious: One can apply kinds models, since model fitting functions need know data sets imputed, beforehand. Also, need worry pooling across submodels using fully Bayesian methods. drawback amount time required model fitting. Estimating Bayesian models already quite slow just single data set gets worse working multiple imputation.","code":"library(mice) m <- 5 imp <- mice(nhanes, m = m, print = FALSE) fit_imp1 <- brm_multiple(bmi ~ age*chl, data = imp, chains = 2) summary(fit_imp1) plot(fit_imp1, variable = \"^b\", regex = TRUE) library(posterior) draws <- as_draws_array(fit_imp1) # every dataset has nc = 2 chains in this example nc <- nchains(fit_imp1) / m draws_per_dat <- lapply(1:m,    \\(i) subset_draws(draws, chain = ((i-1)*nc+1):(i*nc)) ) lapply(draws_per_dat, summarise_draws, default_convergence_measures()) conditional_effects(fit_imp1, \"age:chl\")"},{"path":"/articles/brms_missings.html","id":"compatibility-with-other-multiple-imputation-packages","dir":"Articles","previous_headings":"Imputation before model fitting","what":"Compatibility with other multiple imputation packages","title":"Handle Missing Values with brms","text":"brms offers built-support mice mainly use latter research projects. Nevertheless, brm_multiple supports kinds multiple imputation packages also accepts list data frames input data argument. Thus, just need extract imputed data frames form list, can passed brm_multiple. multiple imputation packages built-functionality task. using mi package, instance, simply need call mi::complete function get desired output.","code":""},{"path":"/articles/brms_missings.html","id":"imputation-during-model-fitting","dir":"Articles","previous_headings":"","what":"Imputation during model fitting","title":"Handle Missing Values with brms","text":"Imputation model fitting generally thought complex imputation model fitting, one take care everything within one step. remains true imputing missing values brms, possibly somewhat smaller degree. Consider nhanes data goal predict bmi age, chl. Since age contains missing values, take special care bmi chl. need tell model two things. (1) variables contain missing values predicted, well (2) imputed variables used predictors. brms can follows: model become multivariate, longer predict bmi also chl (see vignette(\"brms_multivariate\") details multivariate syntax brms). ensure missings variables modeled rather excluded adding | mi() left-hand side formulas2. write mi(chl) right-hand side formula bmi ensure estimated missing values chl used prediction bmi. summary bit cluttered get coefficients response variables, apart can interpret coefficients usual way. results look pretty similar obtained multiple imputation, aware may generally case. multiple imputation, default impute variables based variables, ‘one-step’ approach, explicitly specify variables used imputation. Thus, arguably, multiple imputation easier apply. obvious advantage ‘one-step’ approach model needs fitted instead m times. Also, within brms framework, can use multilevel structure complex non-linear relationships imputation missing values, achieved easily standard multiple imputation software. downside, currently possible impute discrete variables, Stan (engine behind brms) allow estimating discrete parameters.","code":"bform <- bf(bmi | mi() ~ age * mi(chl)) +   bf(chl | mi() ~ age) + set_rescor(FALSE) fit_imp2 <- brm(bform, data = nhanes) summary(fit_imp2) conditional_effects(fit_imp2, \"age:chl\", resp = \"bmi\")"},{"path":"/articles/brms_missings.html","id":"combining-measurement-error-and-missing-values","dir":"Articles","previous_headings":"Imputation during model fitting","what":"Combining measurement error and missing values","title":"Handle Missing Values with brms","text":"Missing value terms brms handle missing values also measurement error, arbitrary combinations two. fact, can think missing value value infinite measurement error. Thus, mi terms natural (somewhat verbose) generalization now soft deprecated terms. Suppose measured variable chl known error: can go ahead include information model follows: Summarizing post-processing model continues work usual.","code":"nhanes$se <- rexp(nrow(nhanes), 2) bform <- bf(bmi | mi() ~ age * mi(chl)) +   bf(chl | mi(se) ~ age) + set_rescor(FALSE) fit_imp3 <- brm(bform, data = nhanes)"},{"path":"/articles/brms_missings.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Handle Missing Values with brms","text":"Buuren, S. V. & Groothuis-Oudshoorn, K. (2010). mice: Multivariate imputation chained equations R. Journal Statistical Software, 1-68. doi.org/10.18637/jss.v045.i03 Zhou, X. & Reiter, J. P. (2010). Note Bayesian Inference Multiple Imputation. American Statistician, 64(2), 159-163. doi.org/10.1198/tast.2010.09109","code":""},{"path":"/articles/brms_monotonic.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating Monotonic Effects with brms","text":"vignette monotonic effects, special way handling discrete predictors ordinal higher scale (Bürkner & Charpentier, review). predictor, want model monotonic (.e., monotonically increasing decreasing relationship response), must either integer valued ordered factor. opposed continuous predictor, predictor categories (integers) assumed equidistant respect effect response variable. Instead, distance adjacent predictor categories (integers) estimated data may vary across categories. realized parameterizing follows: One parameter, bb, takes care direction size effect similar ordinary regression parameter. monotonic effect used linear model, bb can interpreted expected average difference two adjacent categories ordinal predictor. additional parameter vector, ζ\\zeta, estimates normalized distances consecutive predictor categories thus defines shape monotonic effect. single monotonic predictor, xx, linear predictor term observation nn looks follows: ηn=bD∑=1xnζi\\eta_n = b D \\sum_{= 1}^{x_n} \\zeta_i parameter bb can take real value, ζ\\zeta simplex, means satisfies ζi∈[0,1]\\zeta_i \\[0,1] ∑=1Dζi=1\\sum_{= 1}^D \\zeta_i = 1 DD number elements ζ\\zeta. Equivalently, DD number categories (highest integer data) minus 1, since start counting categories zero simplify notation.","code":""},{"path":"/articles/brms_monotonic.html","id":"a-simple-monotonic-model","dir":"Articles","previous_headings":"","what":"A Simple Monotonic Model","title":"Estimating Monotonic Effects with brms","text":"main application monotonic effects ordinal predictors can modeled way without falsely treating either continuous unordered categorical predictors. Psychology, instance, kind data omnipresent form Likert scale items, often treated continuous convenience without ever testing assumption. example, suppose interested relationship yearly income ($) life satisfaction measured arbitrary scale 0 100. Usually, people asked exact income. Instead, asked rank one certain classes, say: ‘20k’, ‘20k 40k’, ‘40k 100k’ ‘100k’. use simulated data illustration purposes. now proceed analyzing data modeling income monotonic effect. summary methods yield distributions simplex parameter income, shown plot method, demonstrate largest difference (70% difference minimum maximum category) first two categories. Now, let’s compare monotonic model two common alternative models. () Assume income continuous: (b) Assume income unordered factor: can easily compare fit three models using leave-one-cross-validation. monotonic model fits better continuous model, surprising given relationship income ls non-linear. monotonic unordered factor model almost identical fit example, may case data sets.","code":"income_options <- c(\"below_20\", \"20_to_40\", \"40_to_100\", \"greater_100\") income <- factor(sample(income_options, 100, TRUE),                  levels = income_options, ordered = TRUE) mean_ls <- c(30, 60, 70, 75) ls <- mean_ls[income] + rnorm(100, sd = 7) dat <- data.frame(income, ls) fit1 <- brm(ls ~ mo(income), data = dat) summary(fit1) plot(fit1, variable = \"simo\", regex = TRUE) plot(conditional_effects(fit1)) dat$income_num <- as.numeric(dat$income) fit2 <- brm(ls ~ income_num, data = dat) summary(fit2) contrasts(dat$income) <- contr.treatment(4) fit3 <- brm(ls ~ income, data = dat) summary(fit3) loo(fit1, fit2, fit3)"},{"path":"/articles/brms_monotonic.html","id":"setting-prior-distributions","dir":"Articles","previous_headings":"","what":"Setting Prior Distributions","title":"Estimating Monotonic Effects with brms","text":"previous monotonic model, implicitly assumed differences adjacent categories -priori , formulated correctly, prior distribution. following, want show change assumption. canonical prior distribution simplex parameter Dirichlet distribution, multivariate generalization beta distribution. non-zero valid simplexes (.e., ζi∈[0,1]\\zeta_i \\[0,1] ∑=1Dζi=1\\sum_{= 1}^D \\zeta_i = 1) zero otherwise. Dirichlet prior single parameter α\\alpha length ζ\\zeta. higher αi\\alpha_i higher -priori probability higher values ζi\\zeta_i. Suppose , looking data, expected amount additional money matters people generally less money. translates higher -priori values ζ1\\zeta_1 (difference ‘below_20’ ‘20_to_40’) hence higher values α1\\alpha_1. choose α1=2\\alpha_1 = 2 α2=α3=1\\alpha_2 = \\alpha_3 = 1, latter default value α\\alpha. fit model write: 1 end \"moincome1\" may appear strange first working monotonic effects. However, necessary one monotonic term may associated multiple simplex parameters, interactions multiple monotonic variables included model. used sample_prior = TRUE also obtain draws prior distribution simo_moincome1 can visualized . visible plots, simo_moincome1[1] -priori average twice high simo_moincome1[2] simo_moincome1[3] result setting α1\\alpha_1 2.","code":"prior4 <- prior(dirichlet(c(2, 1, 1)), class = \"simo\", coef = \"moincome1\") fit4 <- brm(ls ~ mo(income), data = dat,             prior = prior4, sample_prior = TRUE) summary(fit4) plot(fit4, variable = \"prior_simo\", regex = TRUE, N = 3)"},{"path":"/articles/brms_monotonic.html","id":"modeling-interactions-of-monotonic-variables","dir":"Articles","previous_headings":"","what":"Modeling interactions of monotonic variables","title":"Estimating Monotonic Effects with brms","text":"Suppose, additionally asked participants age. interested main effect age also interaction income age. Interactions monotonic variables can specified usual way using * operator:","code":"dat$age <- rnorm(100, mean = 40, sd = 10) fit5 <- brm(ls ~ mo(income)*age, data = dat) summary(fit5) conditional_effects(fit5, \"income:age\")"},{"path":"/articles/brms_monotonic.html","id":"modelling-monotonic-group-level-effects","dir":"Articles","previous_headings":"","what":"Modelling Monotonic Group-Level Effects","title":"Estimating Monotonic Effects with brms","text":"Suppose 100 people sample data drawn 10 different cities; 10 people per city. Thus, add identifier city data add city-related variation ls. following code, fit multilevel model assuming intercept effect income vary city: reveals effect income varies little across cities. present data, overly surprising given , data simulations, assumed income effect across cities.","code":"dat$city <- rep(1:10, each = 10) var_city <- rnorm(10, sd = 10) dat$ls <- dat$ls + var_city[dat$city] fit6 <- brm(ls ~ mo(income)*age + (mo(income) | city), data = dat) summary(fit6)"},{"path":"/articles/brms_monotonic.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Estimating Monotonic Effects with brms","text":"Bürkner P. C. & Charpentier, E. (review). Monotonic Effects: Principled Approach Including Ordinal Predictors Regression Models. PsyArXiv preprint.","code":""},{"path":"/articles/brms_multivariate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating Multivariate Models with brms","text":"present vignette, want discuss specify multivariate multilevel models using brms. call model multivariate contains multiple response variables, predicted set predictors. Consider example biology. Hadfield, Nutall, Osorio, Owens (2007) analyzed data Eurasian blue tit (https://en.wikipedia.org/wiki/Eurasian_blue_tit). predicted tarsus length well back color chicks. Half brood put another fosternest, half stayed fosternest dam. allows separate genetic environmental factors. Additionally, information hatchdate sex chicks (latter known 94% animals).","code":"data(\"BTdata\", package = \"MCMCglmm\") head(BTdata)"},{"path":"/articles/brms_multivariate.html","id":"basic-multivariate-models","dir":"Articles","previous_headings":"","what":"Basic Multivariate Models","title":"Estimating Multivariate Models with brms","text":"begin relatively simple multivariate normal model. can seen model code, used mvbind notation tell brms tarsus back separate response variables. term (1|p|fosternest) indicates varying intercept fosternest. writing |p| indicate varying effects fosternest modeled correlated. makes sense since actually two model parts, one tarsus one back. indicator p arbitrary can replaced symbols comes mind (details multilevel syntax brms, see help(\"brmsformula\") vignette(\"brms_multilevel\")). Similarly, term (1|q|dam) indicates correlated varying effects genetic mother chicks. Alternatively, also modeled genetic similarities pedigrees corresponding relatedness matrices, focus vignette (please see vignette(\"brms_phylogenetics\")). model results readily summarized via summary output multivariate models closely resembles univariate models, except parameters now corresponding response variable prefix. Across dams, tarsus length back color seem negatively correlated, across fosternests opposite true. indicates differential effects genetic environmental factors two characteristics. , small residual correlation rescor(tarsus, back) bottom output indicates little unmodeled dependency tarsus length back color. Although necessary point, already computed stored LOO information criterion fit1, use model comparisons. Next, let’s take look posterior-predictive checks, give us first impression model fit. looks pretty solid, notice slight unmodeled left skewness distribution tarsus. come back later . Next, want investigate much variation response variables can explained model use Bayesian generalization R2R^2 coefficient. Clearly, much variation animal characteristics can explain, apparently can explain variation tarsus length back color.","code":"bform1 <-    bf(mvbind(tarsus, back) ~ sex + hatchdate + (1|p|fosternest) + (1|q|dam)) +   set_rescor(TRUE)  fit1 <- brm(bform1, data = BTdata, chains = 2, cores = 2) fit1 <- add_criterion(fit1, \"loo\") summary(fit1) pp_check(fit1, resp = \"tarsus\") pp_check(fit1, resp = \"back\") bayes_R2(fit1)"},{"path":"/articles/brms_multivariate.html","id":"more-complex-multivariate-models","dir":"Articles","previous_headings":"","what":"More Complex Multivariate Models","title":"Estimating Multivariate Models with brms","text":"Now, suppose want control sex tarsus back vice versa hatchdate. particular reasonable present example, allows us illustrate specify different formulas different response variables. can longer use mvbind syntax use verbose approach: Note literally added two model parts via + operator, case equivalent writing mvbf(bf_tarsus, bf_back). See help(\"brmsformula\") help(\"mvbrmsformula\") details syntax. , summarize model first. Let’s find , model fit changed due excluding certain effects initial model: Apparently, noteworthy difference model fit. Accordingly, really need model sex hatchdate response variables, also harm including (probably just include ). give glimpse capabilities brms’ multivariate syntax, change model various directions time. Remember slight left skewness tarsus, now model using skew_normal family instead gaussian family. Since multivariate normal (student-t) model, anymore, estimating residual correlations longer possible. make explicit using set_rescor function. , investigate relationship back hatchdate really linear previously assumed fitting non-linear spline hatchdate. top , model separate residual variances tarsus male female chicks. , summarize model look posterior-predictive checks. see (log) residual standard deviation tarsus somewhat larger chicks whose sex identified compared male female chicks. , see negative alpha (skewness) parameter tarsus residuals indeed slightly left-skewed. Lastly, running reveals non-linear relationship hatchdate back color, seems change waves course hatch dates. many modeling options multivariate models, discussed vignette. Examples include autocorrelation structures, Gaussian processes, explicit non-linear predictors (e.g., see help(\"brmsformula\") vignette(\"brms_multilevel\")). fact, nearly flexibility univariate models retained multivariate models.","code":"bf_tarsus <- bf(tarsus ~ sex + (1|p|fosternest) + (1|q|dam)) bf_back <- bf(back ~ hatchdate + (1|p|fosternest) + (1|q|dam)) fit2 <- brm(bf_tarsus + bf_back + set_rescor(TRUE),              data = BTdata, chains = 2, cores = 2) fit2 <- add_criterion(fit2, \"loo\") summary(fit2) loo(fit1, fit2) bf_tarsus <- bf(tarsus ~ sex + (1|p|fosternest) + (1|q|dam)) +   lf(sigma ~ 0 + sex) + skew_normal() bf_back <- bf(back ~ s(hatchdate) + (1|p|fosternest) + (1|q|dam)) +   gaussian()  fit3 <- brm(   bf_tarsus + bf_back + set_rescor(FALSE),   data = BTdata, chains = 2, cores = 2,   control = list(adapt_delta = 0.95) ) fit3 <- add_criterion(fit3, \"loo\") summary(fit3) conditional_effects(fit3, \"hatchdate\", resp = \"back\")"},{"path":"/articles/brms_multivariate.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Estimating Multivariate Models with brms","text":"Hadfield JD, Nutall , Osorio D, Owens IPF (2007). Testing phenotypic gambit: phenotypic, genetic environmental correlations colour. Journal Evolutionary Biology, 20(2), 549-557.","code":""},{"path":"/articles/brms_nonlinear.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating Non-Linear Models with brms","text":"vignette provides introduction fit non-linear multilevel models brms. Non-linear models incredibly flexible powerful, require much care respect model specification priors typical generalized linear models. Ignoring group-level effects moment, predictor term ηn\\eta_n generalized linear model observation nn can written follows: ηn=∑=1Kbixni\\eta_n = \\sum_{= 1}^K b_i x_{ni} bib_i regression coefficient predictor ii xnix_{ni} data predictor ii observation nn. also comprises interaction terms various data transformations. However, structure ηn\\eta_n always linear sense regression coefficients bib_i multiplied predictor values summed . implies hypothetical predictor term ηn=b1exp(b2xn)\\eta_n = b_1 \\exp(b_2 x_n) linear predictor anymore fit using classical techniques generalized linear models. thus need general model class, call non-linear models. Note term ‘non-linear’ say anything assumed distribution response variable. particular mean ‘normally distributed’ can apply non-linear predictor terms kinds response distributions (details response distributions available brms see vignette(\"brms_families\")).","code":""},{"path":"/articles/brms_nonlinear.html","id":"a-simple-non-linear-model","dir":"Articles","previous_headings":"","what":"A Simple Non-Linear Model","title":"Estimating Non-Linear Models with brms","text":"begin simple example using simulated data. stated , use generalized linear model estimate bb go ahead specify non-linear model. looking code, first thing becomes obvious changed formula syntax display non-linear formula including predictors (.e., x) parameters (.e., b1 b2) wrapped call bf. stands contrast classical R formulas, predictors given parameters implicit. argument b1 + b2 ~ 1 serves two purposes. First, provides information, variables formula parameters, second, specifies linear predictor terms parameter. fact, think non-linear parameters placeholders linear predictor terms rather parameters (see also following examples). present case, variables predict b1 b2 thus just fit intercepts represent estimates b1b_1 b2b_2 model equation . formula b1 + b2 ~ 1 short form b1 ~ 1, b2 ~ 1 can used multiple non-linear parameters share formula. Setting nl = TRUE tells brms formula treated non-linear. contrast generalized linear models, priors population-level parameters (.e., ‘fixed effects’) often mandatory identify non-linear model. Thus, brms requires user explicitly specify priors. present example, used normal(1, 2) prior (population-level intercept ) b1, used normal(0, 2) prior (population-level intercept ) b2. Setting priors non-trivial task kinds models, especially non-linear models, always invest time think appropriate priors. Quite often, may forced change priors fitting non-linear model first time, observe different MCMC chains converging different posterior regions. clear sign identification problem one solution set stronger (.e., narrow) priors. obtain summaries fitted model, apply summary method reveals able recover true parameter values pretty nicely. According plot method, MCMC chains converged well posterior. conditional_effects method visualizes model-implied (non-linear) regression line. might also interested comparing non-linear model classical linear model. investigate compare model fit, can apply graphical posterior predictive checks, make use bayesplot package backend. can also easily compare model fit using leave-one-cross-validation. Since smaller LOOIC values indicate better model fit, immediately evident non-linear model fits data better, course surprising since simulated data exactly model.","code":"b <- c(2, 0.75) x <- rnorm(100) y <- rnorm(100, mean = b[1] * exp(b[2] * x)) dat1 <- data.frame(x, y) prior1 <- prior(normal(1, 2), nlpar = \"b1\") +   prior(normal(0, 2), nlpar = \"b2\") fit1 <- brm(bf(y ~ b1 * exp(b2 * x), b1 + b2 ~ 1, nl = TRUE),             data = dat1, prior = prior1) summary(fit1) plot(fit1) plot(conditional_effects(fit1), points = TRUE) fit2 <- brm(y ~ x, data = dat1) summary(fit2) pp_check(fit1) pp_check(fit2) loo(fit1, fit2)"},{"path":"/articles/brms_nonlinear.html","id":"a-real-world-non-linear-model","dir":"Articles","previous_headings":"","what":"A Real-World Non-Linear model","title":"Estimating Non-Linear Models with brms","text":"blog, Markus Gesmann predicts growth cumulative insurance loss payments time, originated different origin years (see https://www.magesblog.com/post/2015-11-03-loss-developments-via-growth-curves-/). use slightly simplified version model demonstration purposes . looks follows: cumAY,dev∼N(μAY,dev,σ)cum_{AY, dev} \\sim N(\\mu_{AY, dev}, \\sigma)μAY,dev=ultAY(1−exp(−(devθ)ω))\\mu_{AY, dev} = ult_{AY} \\left(1 - \\exp\\left(- \\left( \\frac{dev}{\\theta} \\right)^\\omega \\right) \\right) cumulative insurance payments cumcum grow time, model dependency using variable devdev. , ultAYult_{AY} (estimated) ultimate loss accident year. constitutes non-linear parameter framework along parameters θ\\theta ω\\omega, responsible growth cumulative loss assumed across years. data already shipped brms. translate proposed model non-linear brms model. estimate group-level effect accident year (variable AY) ultimate loss ult. also shows nicely non-linear parameter actually placeholder linear predictor, case ult, contains varying intercept year. , priors population-level effects required , present model, actually mandatory ensure identifiability. summarize model using well known methods. Next, show marginal effects separately year. evident variation cumulative loss across accident years, instance due natural disasters happening certain years. , see uncertainty predicted cumulative loss larger later years fewer available data points. detailed discussion data set, see Section 4.5 Gesmann & Morris (2020).","code":"data(loss) head(loss) fit_loss <- brm(   bf(cum ~ ult * (1 - exp(-(dev/theta)^omega)),      ult ~ 1 + (1|AY), omega ~ 1, theta ~ 1,      nl = TRUE),   data = loss, family = gaussian(),   prior = c(     prior(normal(5000, 1000), nlpar = \"ult\"),     prior(normal(1, 2), nlpar = \"omega\"),     prior(normal(45, 10), nlpar = \"theta\")   ),   control = list(adapt_delta = 0.9) ) summary(fit_loss) plot(fit_loss, N = 3, ask = FALSE) conditional_effects(fit_loss) conditions <- data.frame(AY = unique(loss$AY)) rownames(conditions) <- unique(loss$AY) me_loss <- conditional_effects(   fit_loss, conditions = conditions,   re_formula = NULL, method = \"predict\" ) plot(me_loss, ncol = 5, points = TRUE)"},{"path":"/articles/brms_nonlinear.html","id":"advanced-item-response-models","dir":"Articles","previous_headings":"","what":"Advanced Item-Response Models","title":"Estimating Non-Linear Models with brms","text":"third example, want show model advanced item-response models using non-linear model framework brms. simplicity, suppose single forced choice item three alternatives one correct. response variable whether person answers item correctly (1) (0). Person assumed vary ability answer item correctly. However, every person 33% chance getting item right just guessing. thus simulate data reflect situation. basic item-response model equivalent simple logistic regression model. However, model completely ignores guessing probability thus likely come biased estimates predictions. sophisticated approach incorporating guessing probability looks follows: important set link function bernoulli family identity else apply two link functions. non-linear predictor term already contains desired link function (0.33 + 0.67 * inv_logit), bernoulli family applies default logit link top . course lead strange uninterpretable results. Thus, please make sure set link function identity, whenever non-linear predictor term already contains desired link function. Comparing model fit via leave-one-cross-validation shows model fit data equally well, remember predictions first model might still misleading may well guessing probability low ability values. Now, suppose don’t know guessing probability want estimate data. can easily done changing previous model just bit. , model guessing probability non-linear parameter making sure exceed interval [0,1][0, 1]. estimate intercept eta, lead bias estimated guessing parameter (try ; excellent example careful one non-linear models). results show able recover simulated model parameters non-linear model. course, real item-response data multiple items accounting item person variability (e.g., using multilevel model varying intercepts) becomes necessary multiple observations per item person. Luckily, can done within non-linear framework brms hope vignette serves good starting point.","code":"inv_logit <- function(x) 1 / (1 + exp(-x)) ability <- rnorm(300) p <- 0.33 + 0.67 * inv_logit(ability) answer <- ifelse(runif(300, 0, 1) < p, 1, 0) dat_ir <- data.frame(ability, answer) fit_ir1 <- brm(answer ~ ability, data = dat_ir, family = bernoulli()) summary(fit_ir1) plot(conditional_effects(fit_ir1), points = TRUE) fit_ir2 <- brm(   bf(answer ~ 0.33 + 0.67 * inv_logit(eta),      eta ~ ability, nl = TRUE),   data = dat_ir, family = bernoulli(\"identity\"),   prior = prior(normal(0, 5), nlpar = \"eta\") ) summary(fit_ir2) plot(conditional_effects(fit_ir2), points = TRUE) loo(fit_ir1, fit_ir2) fit_ir3 <- brm(   bf(answer ~ guess + (1 - guess) * inv_logit(eta),     eta ~ 0 + ability, guess ~ 1, nl = TRUE),   data = dat_ir, family = bernoulli(\"identity\"),   prior = c(     prior(normal(0, 5), nlpar = \"eta\"),     prior(beta(1, 1), nlpar = \"guess\", lb = 0, ub = 1)   ) ) summary(fit_ir3) plot(fit_ir3) plot(conditional_effects(fit_ir3), points = TRUE)"},{"path":"/articles/brms_nonlinear.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Estimating Non-Linear Models with brms","text":"Gesmann M. & Morris J. (2020). Hierarchical Compartmental Reserving Models. CAS Research Papers.","code":""},{"path":"/articles/brms_phylogenetics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating Phylogenetic Multilevel Models with brms","text":"present vignette, want discuss specify phylogenetic multilevel models using brms. models relevant evolutionary biology data many species analyzed time. usual approach model species grouping factor multilevel model estimate varying intercepts (possibly also varying slopes) species. However, species independent come phylogenetic tree thus adjust model incorporate dependency. examples discussed chapter 11 book Modern Phylogenetic Comparative Methods application Evolutionary Biology (de Villemeruil & Nakagawa, 2014). necessary data can downloaded corresponding website (https://www.mpcm-evolution.com/). models may take minutes fit.","code":""},{"path":"/articles/brms_phylogenetics.html","id":"a-simple-phylogenetic-model","dir":"Articles","previous_headings":"","what":"A Simple Phylogenetic Model","title":"Estimating Phylogenetic Multilevel Models with brms","text":"Assume measurements phenotype, phen (say body size), cofactor variable (say temperature environment). prepare data using following code. phylo object contains information relationship species. Using information, can construct covariance matrix species (Hadfield & Nakagawa, 2010). Now ready fit first phylogenetic multilevel model: exception (1|gr(phylo, cov = )) instead (1|phylo) basic multilevel model varying intercept species (phylo indicator species data set). However, using cov = gr function, make sure species correlated specified covariance matrix . pass via data2 argument can used kinds data fit regular structure data argument. Setting priors required achieving good convergence model, improves sampling speed bit. fitting, results can investigated detail. called phylogenetic signal (often symbolize λ\\lambda) can computed hypothesis method roughly λ=0.7\\lambda = 0.7 example. Note phylogenetic signal just synonym intra-class correlation (ICC) used context phylogenetic analysis.","code":"phylo <- ape::read.nexus(\"https://paul-buerkner.github.io/data/phylo.nex\") data_simple <- read.table(   \"https://paul-buerkner.github.io/data/data_simple.txt\",   header = TRUE ) head(data_simple) A <- ape::vcv.phylo(phylo) model_simple <- brm(   phen ~ cofactor + (1|gr(phylo, cov = A)),   data = data_simple,   family = gaussian(),   data2 = list(A = A),   prior = c(     prior(normal(0, 10), \"b\"),     prior(normal(0, 50), \"Intercept\"),     prior(student_t(3, 0, 20), \"sd\"),     prior(student_t(3, 0, 20), \"sigma\")   ) ) summary(model_simple) plot(model_simple, N = 2, ask = FALSE) plot(conditional_effects(model_simple), points = TRUE) hyp <- \"sd_phylo__Intercept^2 / (sd_phylo__Intercept^2 + sigma^2) = 0\" (hyp <- hypothesis(model_simple, hyp, class = NULL)) plot(hyp)"},{"path":"/articles/brms_phylogenetics.html","id":"a-phylogenetic-model-with-repeated-measurements","dir":"Articles","previous_headings":"","what":"A Phylogenetic Model with Repeated Measurements","title":"Estimating Phylogenetic Multilevel Models with brms","text":"Often, multiple observations per species allows fit complicated phylogenetic models. variable spec_mean_cf just contains mean cofactor species. code repeated measurement phylogenetic model looks follows: variables phylo species identical identifiers species. However, model phylogenetic covariance phylo thus species variable accounts specific effect independent phylogenetic relationship species (e.g., environmental niche effects). can obtain model summaries well estimates phylogenetic signal. far, completely ignored variability cofactor within species. incorporate model, define fit using within_spec_cf additional predictor. results almost unchanged, apparently relationship phenotype within species variance cofactor. Also, phylogenetic signal remains less .","code":"data_repeat <- read.table(   \"https://paul-buerkner.github.io/data/data_repeat.txt\",   header = TRUE ) data_repeat$spec_mean_cf <-   with(data_repeat, sapply(split(cofactor, phylo), mean)[phylo]) head(data_repeat) model_repeat1 <- brm(   phen ~ spec_mean_cf + (1|gr(phylo, cov = A)) + (1|species),   data = data_repeat,   family = gaussian(),   data2 = list(A = A),   prior = c(     prior(normal(0,10), \"b\"),     prior(normal(0,50), \"Intercept\"),     prior(student_t(3,0,20), \"sd\"),     prior(student_t(3,0,20), \"sigma\")   ),   sample_prior = TRUE, chains = 2, cores = 2,   iter = 4000, warmup = 1000 ) summary(model_repeat1) hyp <- paste(   \"sd_phylo__Intercept^2 /\",   \"(sd_phylo__Intercept^2 + sd_species__Intercept^2 + sigma^2) = 0\" ) (hyp <- hypothesis(model_repeat1, hyp, class = NULL)) plot(hyp) data_repeat$within_spec_cf <- data_repeat$cofactor - data_repeat$spec_mean_cf model_repeat2 <- update(   model_repeat1, formula = ~ . + within_spec_cf,   newdata = data_repeat, chains = 2, cores = 2,   iter = 4000, warmup = 1000 ) summary(model_repeat2) hyp <- paste(   \"sd_phylo__Intercept^2 /\",   \"(sd_phylo__Intercept^2 + sd_species__Intercept^2 + sigma^2) = 0\" ) (hyp <- hypothesis(model_repeat2, hyp, class = NULL))"},{"path":"/articles/brms_phylogenetics.html","id":"a-phylogenetic-meta-analysis","dir":"Articles","previous_headings":"","what":"A Phylogenetic Meta-Analysis","title":"Estimating Phylogenetic Multilevel Models with brms","text":"Let’s say Fisher’s z-transformed correlation coefficients ZrZr per species along corresponding sample sizes (e.g., correlations male coloration reproductive success): assume sampling variance known V(Zr)=1N−3V(Zr) = \\frac{1}{N - 3} Fisher’s values, NN sample size per species. Incorporating known sampling variance model straight forward. One keep mind though, brms requires sampling standard deviation (square root variance) input instead variance . group-level effect obs represents residual variance, model explicitly meta-analytic model. summary fitted model obtained via meta-analytic mean (.e., model intercept) 0.160.16 credible interval [0.08,0.25][0.08, 0.25]. Thus mean correlation across species positive according model.","code":"data_fisher <- read.table(   \"https://paul-buerkner.github.io/data/data_effect.txt\",   header = TRUE ) data_fisher$obs <- 1:nrow(data_fisher) head(data_fisher) model_fisher <- brm(   Zr | se(sqrt(1 / (N - 3))) ~ 1 + (1|gr(phylo, cov = A)) + (1|obs),   data = data_fisher, family = gaussian(),   data2 = list(A = A),   prior = c(     prior(normal(0, 10), \"Intercept\"),     prior(student_t(3, 0, 10), \"sd\")   ),   control = list(adapt_delta = 0.95),   chains = 2, cores = 2, iter = 4000, warmup = 1000 ) summary(model_fisher) plot(model_fisher)"},{"path":"/articles/brms_phylogenetics.html","id":"a-phylogenetic-count-data-model","dir":"Articles","previous_headings":"","what":"A phylogenetic count-data model","title":"Estimating Phylogenetic Multilevel Models with brms","text":"Suppose analyze phenotype consists counts instead continuous variable. case, normality assumption likely justified recommended use distribution explicitly suited count data, instance Poisson distribution. following data set (retrieved mpcm-evolution.org) provides example. Poisson distribution natural overdispersion parameter, model residual variance via group-level effects obs (e.g., see Lawless, 1987). , obtain summary fitted model via Now, assume ignore fact phenotype count data fit linear normal model instead. see cofactor positive relationship phenotype models. One keep mind, though, estimates Poisson model log-scale, applied canonical log-link function example. Therefore, estimates comparable linear normal model even applied data. can compare, however, model fit, instance graphically via posterior predictive checks. Apparently, distribution phenotype predicted Poisson model resembles original distribution phenotype pretty closely, normal models fails . can also apply leave-one-cross-validation direct numerical comparison model fit. Since smaller values loo indicate better fit, evident Poisson model fits data better normal model. course, Poisson model reasonable option . instance, use negative binomial model (via family negative_binomial), already contains overdispersion parameter modeling varying intercept obs becomes obsolete.","code":"data_pois <- read.table(   \"https://paul-buerkner.github.io/data/data_pois.txt\",   header = TRUE ) data_pois$obs <- 1:nrow(data_pois) head(data_pois) model_pois <- brm(   phen_pois ~ cofactor + (1|gr(phylo, cov = A)) + (1|obs),   data = data_pois, family = poisson(\"log\"),   data2 = list(A = A),   chains = 2, cores = 2, iter = 4000,   control = list(adapt_delta = 0.95) ) summary(model_pois) plot(conditional_effects(model_pois), points = TRUE) model_normal <- brm(   phen_pois ~ cofactor + (1|gr(phylo, cov = A)),   data = data_pois, family = gaussian(),   data2 = list(A = A),   chains = 2, cores = 2, iter = 4000,   control = list(adapt_delta = 0.95) ) summary(model_normal) pp_check(model_pois) pp_check(model_normal) loo(model_pois, model_normal)"},{"path":"/articles/brms_phylogenetics.html","id":"phylogenetic-models-with-multiple-group-level-effects","dir":"Articles","previous_headings":"","what":"Phylogenetic models with multiple group-level effects","title":"Estimating Phylogenetic Multilevel Models with brms","text":"examples, used single group-level effect (.e., varying intercept) phylogenetic grouping factors. brms, also possible estimate multiple group-level effects (e.g., varying intercept varying slope) grouping factors. However, requires repeatedly computing Kronecker products covariance matrices fitting model. slow especially grouping factors many levels matrices thus large.","code":""},{"path":"/articles/brms_phylogenetics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Estimating Phylogenetic Multilevel Models with brms","text":"de Villemeruil P. & Nakagawa, S. (2014) General quantitative genetic methods comparative biology. : Modern phylogenetic comparative methods application evolutionary biology: concepts practice (ed. Garamszegi L.) Springer, New York. pp. 287-303. Hadfield, J. D. & Nakagawa, S. (2010) General quantitative genetic methods comparative biology: phylogenies, taxonomies, multi-trait models continuous categorical characters. Journal Evolutionary Biology. 23. 494-508. Lawless, J. F. (1987). Negative binomial mixed Poisson regression. Canadian Journal Statistics, 15(3), 209-225.","code":""},{"path":"/articles/brms_threading.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Running brms models with within-chain parallelization","text":"Full Bayesian inference computationally demanding task often wish run models faster shorter walltime. modern computers nowadays multiple processors available given machine use running inference parallel shorten overall walltime. -chain parallelization straightforward merely launching multiple chains time, use within-chain parallelization complicated various ways. vignette aims introduce user within-chain parallelization brms, since efficient use depends various aspects specific users model.","code":""},{"path":"/articles/brms_threading.html","id":"quick-summary","dir":"Articles","previous_headings":"","what":"Quick summary","title":"Running brms models with within-chain parallelization","text":"Assuming brms model wish evaluate faster using cores per chain, example: can simply add threading support existing model update mechanism follows, provided stan version least 2.26 (whether using rstan cmdstan): example assumes 4 cores available best used without within-chain parallelization running 4 chains parallel. using within chain parallelization still advisable use just many threads total CPU cores. ’s thus sensible case reduce number chains running parallel just 2, allow chain use 2 threads. Obviously reduce number iterations posterior assumed fixed amount 4 cores. apply within-chain parallelization large problems take minutes least calculate. epilepsy example actually small gain speed (just seconds per chain machine). Within-chain parallelization less efficient -chain parallelization. use within-chain parallelism CPUs can used run entire analysis. Due details model data-set, speedups cores can limited. every model amends within-chain parallelization empirical evaluation cases advisable. Enabling threading usually slows model extent slowdown must offset sufficient cores per chain order really gain execution speed. Doubling execution speed cores lot easier obtaining larger speedups even cores. Models computationally expensive likelihoods easier parallelize less expensive likelihoods. example, Poisson distribution involves expensive logΓ\\log\\Gamma functions whereas normal likelihood cheap calculate comparison. Models many parameters (e.g., multilevel models) carry large overhead running parallel. larger overhead model, likelihood must sufficiently expensive relative computational cost likelihood parallelization overhead favorable. Avoid using hyper-threading, , use many threads physical cores available. Ensure data randomly sorted consecutive subsets data roughly computational effort.","code":"fit_serial <- brm(   count ~ zAge + zBase * Trt + (1|patient),   data = epilepsy, family = poisson(),   chains = 4, cores = 4, backend = \"cmdstanr\" ) fit_parallel <- update(   fit_serial, chains = 2, cores = 2,   backend = \"cmdstanr\", threads = threading(2) )"},{"path":"/articles/brms_threading.html","id":"within-chain-parallelization","dir":"Articles","previous_headings":"","what":"Within-chain parallelization","title":"Running brms models with within-chain parallelization","text":"within-chain parallelization implemented brms based reduce_sum facility Stan. basic principle reduce_sum uses split large summation arbitrary smaller partial sums. Due commutativity associativity sum operation smaller partial sums can evaluated order parallel one another. brms leverages reduce_sum evaluate log-likelihood model parallel example l(y|θ)=∑=1Nli(yi|θ)=∑=1S1li(yi|θ)+∑=S1+1Nli(yi|θ). \\begin{aligned} l(y|\\theta) &= \\sum_{=1}^N l_i(y_i| \\theta) \\\\  &= \\sum_{=1}^{S_1} l_i(y_i| \\theta) + \\sum_{=S_1+1}^N l_i(y_i| \\theta). \\end{aligned} consequence, within-chain parallelization requires mutually independent log-likelihood terms restricts applicability degree. Furthermore, within-chain parallelization applicable evaluation data likelihood parts model, example priors, remain running serially. Thus, partial fraction entire Stan model run parallel limits potential speedup one may obtain. theoretical speedup partially parallel running program described Amdahl‘s law. example, 90% computational load running parallel one can essentially double execution speed 2 cores 8 cores may speedup program 5x. large computational cost log-likelihood relation entire model dependent model user. practice, speedups even smaller theoretical speedups. caused additional overhead implied forming multiple smaller sums just one large one. example, partial sum formed entire parameter vector θ\\theta copied memory Stan able calculate gradient log-likelihood. Hence, partial sums, copying necessary opposed evaluating just one large sum. Whether additional copying indeed relevant depends computational cost log-likelihood term number parameters. model computationally cheap normal log-likelihood, effect important model Poisson log-likelihood, multilevel models many parameters copying needed simpler regression models. may therefore necessary form sufficiently large partial sums warrant efficient parallel execution. size partial sums referred grainsize, set reasonable default value. However, models tuning parameter requires attention user optimal performance. Finally, important note default exact size order partial sums stable adjusted load system. result, exact numerical reproducibility guaranteed default. order warrant size order partial sums, static option must used set TRUE, uses deterministic scheduler parallel work.","code":""},{"path":"/articles/brms_threading.html","id":"example-model","dir":"Articles","previous_headings":"","what":"Example model","title":"Running brms models with within-chain parallelization","text":"toy demonstration, use multilevel Poisson model. model varying intercept model 10410^{4} data observation grouped 10001000 groups. data item 33 continuous covariates. simulation code fake data can found appendix ’s first 1010 rows : brms model fitting data : fixed standard deviation -group variation intercept true value 11 used simulation. avoid unfavorable geometry problem allowing us concentrate computational aspects alone. Poisson likelihood relatively expensive likelihood due use logΓ\\log\\Gamma function opposed , example, normal likelihood far less expensive operations. Moreover, example chosen order demonstrate parallelization overhead implied large number parameters.","code":"kable(head(fake, 10), digits = 3) model_poisson <- brm(   y ~ 1 + x1 + x2 + (1 | g),   data = fake,   family = poisson(),   iter = 500, # short sampling to speedup example   chains = 2,   prior = prior(normal(0,1), class = b) +     prior(constant(1), class = sd, group = g),   backend = \"cmdstanr\",   threads = threading(4),   save_pars = save_pars(all = TRUE) )"},{"path":"/articles/brms_threading.html","id":"managing-parallelization-overhead","dir":"Articles","previous_headings":"","what":"Managing parallelization overhead","title":"Running brms models with within-chain parallelization","text":"discussed , key mechanism run Stan programs parallelization split large sum independent log likelihood terms arbitrary smaller partial sums. Creating partial sums allows increase simultaneous parallel computations granular way, time additional overhead introduced requirement copy entire parameter vector partial sum formed along overhead due splitting single large task multiple smaller ones. default, brms choose sensible grainsize defines large given partial sum roughly . actual chunk size automatically tuned whenever default non-static scheduler used, recommended choice start . noted , static scheduler giving fully deterministic results since chunk size order partial sums sampling. expect default grainsize brms reasonably good many models, can improve performance one tunes grainsize specifically given model data-set. suggest increase successively number chunks given data set split static scheduler run single core. way one can control number partial sum accurately monitor execution time increases. experiments run single chain short iteration numbers interested statistical results, rather aim able explore tuning parameter space chunk size quickly possible. number iterations needed get reliable runtime estimates given chunk size depend many details easiest way determine run benchmark multiple number iterations. Whenever results match approximately, iteration numbers sufficient. order decrease variation runs, also fix random seed, initial value tuning parameters sampler (step size mass matrix). example R code demonstrating benchmark. utility function benchmark_threading shown explained appendix. Graphically summarizing results shows 8 chunks overhead 10% increasing chunks. models without many parameters, overhead observed. Furthermore, one can see 25 50 iterations give similar results implying 25 iterations suffice stable runtime estimates (following) benchmarks. overhead 20% example 16 chunks may seem large due scaling plot. One must forget start use CPU cores, overhead easily offset, limits maximal speedup can get. example, 2 units computation become 2.4 units due overhead 2 cores don’t quite double execution speed, rather get 1.6x increase speed instead 2x speedup. Considering addition time per leapfrog step NUTS sampler shows absolute scale similar information . upside representation can visualize slowdown relation program without reduce_sum. can see, additional overhead due merely enabling reduce_sum substantial example. attributed specific example large number random effects.","code":"chunking_bench <- transform(     data.frame(chunks = 4^(0:3)),     grainsize = ceiling(N / chunks) )  iter_test <- c(10, 20, 40)  # very short test runs scaling_chunking <- benchmark_threading(   model_poisson,   cores = 1,   grainsize = chunking_bench$grainsize,  # test various grainsizes   iter = iter_test,   static = TRUE  # with static partitioner )  # run as reference the model *without* reduce_sum ref <- benchmark_reference(model_poisson, iter_test)  # for additional data munging please refer to the appendix ggplot(scaling_chunking) +     aes(chunks, slowdown, colour = iter, shape = iter) +     geom_line() + geom_point() +     scale_x_log10(breaks = scaling_chunking$chunks) +     scale_y_log10(breaks=seq(0.8, 2.5, by=0.1)) +     ggtitle(\"Slowdown with increasing number of chunks\")  ggplot(scaling_chunking) +     aes(chunks, 1E3 * runtime/num_leapfrog, colour = iter, shape=iter) +     geom_line() + geom_point() +     scale_x_log10(breaks = scaling_chunking$chunks) +     scale_y_log10(breaks=seq(0.1, 2.0, by=0.1)) +     geom_hline(data=ref, aes(yintercept=1E3 * runtime/num_leapfrog, colour=iter), linetype=I(2)) +     ggtitle(\"Time per leapfrog step vs number of chunks\",             \"Dashed line is reference model without reduce_sum\") +     ylab(\"Time per leapfrog step [ms]\")"},{"path":"/articles/brms_threading.html","id":"parallelization-speedup","dir":"Articles","previous_headings":"","what":"Parallelization speedup","title":"Running brms models with within-chain parallelization","text":"practice, often interested -called “hard-scaling” properties parallelization system. , fixed problem size like know much faster can execute Stan program increasing number threads. nowadays CPUs usually run -called hyper-threading, also interest technique beneficial Stan programs well (spoiler alert: ’s useful). seen , grainsize can impact performance tuning parameter. demonstrate exemplary R code runs benchmark varying number CPU cores varying number grainsizes. important consider absolute runtime relative speedup vs. running single core. relative speedup can misleading single core runtime slow case speed gains CPUs may look overly good. Considering instead absolute runtime avoids problem. , interested shortest walltime can get rather relative speedups. vertical dotted line marks physical number CPU cores machine run. horizontal dashed line plot absolute runtime marks respective runtime model without reduce_sum dashed unity line plot relative speedup marks theoretical maximal speedup. can see reduction execution time increasing thread count greater number physical CPUs. Hence, use hyper-threading helpful aiming maximize speed Stan program. Moreover, use threading outperforms single core runtime using 4 cores example. example, shown grainsizes matter machines others, results may look quite different shown . overall speedups may seem impressive case, attributed case large number parameters relative number observations. However, can still outperform single core runtime using many cores. Though important advantage threading increasing data set size, user option use brute-force approach balance increase walltime needed. given Stan model one usually choose number chains number threads per chain equal number (physical) cores one wishes use. different chains model relatively different execution times (, occurs sometimes practice), one may consider use hyper-threading. share resources evenly across chains whenever fastest chain finishes, freed resources can given still running chains.","code":"num_cpu <- parallel::detectCores(logical = FALSE) num_cpu_logical <- parallel::detectCores(logical = TRUE) grainsize_default <- ceiling(N / (2 * num_cpu)) cores <- c(2^seq(0, floor(log2(num_cpu_logical))), num_cpu, num_cpu_logical) cores <- sort(unique(cores)) grainsize <- c(grainsize_default, grainsize_default/2, grainsize_default/4) grainsize <- round(grainsize)  iter_scaling <- 20 scaling_cores <- benchmark_threading(   model_poisson,   cores = cores,   grainsize = grainsize,   iter = iter_scaling,   static = FALSE )  single_core  <- transform(     subset(scaling_cores, cores == 1),     runtime_single = runtime,     num_leapfrog=NULL, runtime=NULL, cores = NULL )  scaling_cores <- transform(   merge(scaling_cores, single_core),   speedup = runtime_single/runtime,   grainsize = factor(grainsize) ) ggplot(scaling_cores) +     aes(cores, runtime, shape = grainsize, color = grainsize) +     geom_vline(xintercept = num_cpu, linetype = 3) +     geom_line() + geom_point() +     scale_x_log10(breaks = scaling_cores$cores) +     scale_y_log10(breaks=seq(0.1, 1.4, by=0.1)) +     theme(legend.position = c(0.85, 0.8)) +     geom_hline(data=subset(ref, iter==iter_scaling), aes(yintercept=runtime), linetype=I(2)) +     ggtitle(\"Runtime with varying number of cores\",             \"Dashed line is reference model without reduce_sum\")  ggplot(scaling_cores) +   aes(cores, speedup, shape = grainsize, color = grainsize) +   geom_abline(slope = 1, intercept = 0, linetype = 2) +   geom_vline(xintercept = num_cpu, linetype = 3) +   geom_line() + geom_point() +   scale_x_log10(breaks=scaling_cores$cores) +   scale_y_log10(breaks=scaling_cores$cores) +   theme(aspect.ratio = 1) +   coord_fixed(xlim = c(1, num_cpu_logical), ylim = c(1, num_cpu_logical)) +   ggtitle(\"Relative speedup vs 1 core\") kable(scaling_cores, digits = 2)"},{"path":[]},{"path":"/articles/brms_threading.html","id":"fake-data-simulation","dir":"Articles","previous_headings":"Appendix","what":"Fake data simulation","title":"Running brms models with within-chain parallelization","text":"","code":"set.seed(54647) # number of observations N <- 1E4 # number of group levels G <- round(N / 10) # number of predictors P <- 3 # regression coefficients beta <- rnorm(P)  # sampled covariates, group means and fake data fake <- matrix(rnorm(N * P), ncol = P) dimnames(fake) <- list(NULL, paste0(\"x\", 1:P))  # fixed effect part and sampled group membership fake <- transform(   as.data.frame(fake),   theta = fake %*% beta,   g = sample.int(G, N, replace=TRUE) )  # add random intercept by group fake  <- merge(fake, data.frame(g = 1:G, eta = rnorm(G)), by = \"g\")  # linear predictor fake  <- transform(fake, mu = theta + eta)  # sample Poisson data fake  <- transform(fake, y = rpois(N, exp(mu)))  # shuffle order of data rows to ensure even distribution of computational effort fake <- fake[sample.int(N, N),]  # drop not needed row names rownames(fake) <- NULL"},{"path":"/articles/brms_threading.html","id":"poisson-example-model","dir":"Articles","previous_headings":"Appendix","what":"Poisson example model","title":"Running brms models with within-chain parallelization","text":"","code":"model_poisson <- brm(   y ~ 1 + x1 + x2 + (1 | g),   data = fake,   family = poisson(),   iter = 500, # short sampling to speedup example   chains = 2,   prior = prior(normal(0,1), class = b) +     prior(constant(1), class = sd, group = g),   backend = \"cmdstanr\",   threads = threading(4),   save_pars = save_pars(all = TRUE) )"},{"path":"/articles/brms_threading.html","id":"threading-benchmark-function","dir":"Articles","previous_headings":"Appendix","what":"Threading benchmark function","title":"Running brms models with within-chain parallelization","text":"","code":"# Benchmarks given model with cross-product of tuning parameters CPU # cores, grainsize and iterations. Models are run with either static # or non-static scheduler and initial values are set by default to 0 on the # unconstrained scale. Function returns a data-frame with the # cross-product of the tuning parameters and as result column the # respective runtime. benchmark_threading <- function(model, cores = 1, grainsize = 1, iter = 100,                                 static = FALSE) {      winfo <- extract_warmup_info(model)     sims  <- rstan::extract(model$fit)     init <- list(extract_draw(sims, 1))      scaling_model <- update(         model, refresh = 0,         threads = threading(1, grainsize = grainsize[1], static = static),         chains = 1, iter = 2, backend = \"cmdstanr\"     )      run_benchmark <- function(cores, size, iter) {         bench_fit <- update(             scaling_model, warmup=0, iter = iter,             chains = 1, seed = 1234, init = init, refresh = 0, save_warmup=TRUE,             threads = threading(cores, grainsize = size, static = static),             inv_metric=winfo$inv_metric[[1]],             step_size=winfo$step_size[[1]],             adapt_engaged=FALSE         )         lf <- sum(subset(nuts_params(bench_fit, inc_warmup=TRUE), Parameter==\"n_leapfrog__\")$Value)         elapsed <- sum(colSums(rstan::get_elapsed_time(bench_fit$fit)))          c(num_leapfrog=lf, runtime=elapsed)     }      cases <- expand.grid(cores = cores, grainsize = grainsize, iter = iter)     res <- with(cases, mapply(run_benchmark, cores, grainsize, iter))     cbind(cases, as.data.frame(t(res))) }  benchmark_reference <- function(model, iter=100, init=0) {     winfo <- extract_warmup_info(model)     sims  <- rstan::extract(model$fit)     init <- list(extract_draw(sims, 1))      ref_model <- update(         model, refresh = 0, threads = NULL,         chains = 1, iter = 2, backend = \"cmdstanr\"     )      run_benchmark_ref <- function(iter_bench) {         bench_fit <- update(             ref_model, warmup=0, iter = iter_bench,             chains = 1, seed = 1234, init = init, refresh = 0,             inv_metric=winfo$inv_metric[[1]],             step_size=winfo$step_size[[1]],             adapt_engaged=FALSE         )          lf <- sum(subset(nuts_params(bench_fit, inc_warmup=TRUE), Parameter==\"n_leapfrog__\")$Value)         elapsed <- sum(colSums(rstan::get_elapsed_time(bench_fit$fit)))          c(num_leapfrog=lf, runtime=elapsed)     }      ref <- sapply(iter, run_benchmark_ref)     ref <- cbind(as.data.frame(t(ref)), iter=iter)     ref }  extract_warmup_info <- function(bfit) {     adapt  <- lapply(rstan::get_adaptation_info(bfit$fit), strsplit, split=\"\\\\n\")     step_size  <- lapply(adapt, function(a) as.numeric(strsplit(a[[1]][[1]], \" = \")[[1]][2]))     inv_metric <- lapply(adapt, function(a) as.numeric(strsplit(sub(\"^# \", \"\", a[[1]][[3]]), \", \")[[1]]))     list(step_size=step_size, inv_metric=inv_metric) }  extract_draw <- function(sims, draw) {   lapply(sims, brms:::slice, dim = 1, i = draw, drop = TRUE) }"},{"path":"/articles/brms_threading.html","id":"munging-of-slowdown-with-chunking-data","dir":"Articles","previous_headings":"Appendix","what":"Munging of slowdown with chunking data","title":"Running brms models with within-chain parallelization","text":"","code":"scaling_chunking <- merge(scaling_chunking, chunking_bench, by = \"grainsize\")  single_chunk  <- transform(     subset(scaling_chunking, chunks == 1),     num_leapfrog_single = num_leapfrog, num_leapfrog = NULL,     runtime_single = runtime, runtime = NULL,     grainsize = NULL, chunks=NULL )  scaling_chunking <- transform(     merge(scaling_chunking, single_chunk),     slowdown = runtime/runtime_single,     iter = factor(iter),     runtime_single = NULL )  ref <- transform(ref, iter=factor(iter))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul-Christian Bürkner. Author, maintainer. Jonah Gabry. Contributor. Sebastian Weber. Contributor. Andrew Johnson. Contributor. Martin Modrak. Contributor. Hamada S. Badr. Contributor. Frank Weber. Contributor. Aki Vehtari. Contributor. Mattan S. Ben-Shachar. Contributor. Hayden Rabel. Contributor. Simon C. Mills. Contributor. Stephen Wild. Contributor. Ven Popov. Contributor. Ioannis Kosmidis. Contributor. Ben Schneider. Contributor. Noa Kallioinen. Contributor. Wellington J. Silva. Contributor. Luiz Carvalho. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Paul-Christian Bürkner (2017). brms: R Package Bayesian Multilevel Models Using Stan. Journal Statistical Software, 80(1), 1-28. doi:10.18637/jss.v080.i01 Paul-Christian Bürkner (2018). Advanced Bayesian Multilevel Modeling R Package brms. R Journal, 10(1), 395-411. doi:10.32614/RJ-2018-017 Paul-Christian Bürkner (2021). Bayesian Item Response Modeling R brms Stan. Journal Statistical Software, 100(5), 1-54. doi:10.18637/jss.v100.i05","code":"@Article{,   title = {{brms}: An {R} Package for {Bayesian} Multilevel Models Using {Stan}},   author = {Paul-Christian Bürkner},   journal = {Journal of Statistical Software},   year = {2017},   volume = {80},   number = {1},   pages = {1--28},   doi = {10.18637/jss.v080.i01},   encoding = {UTF-8}, } @Article{,   title = {Advanced {Bayesian} Multilevel Modeling with the {R} Package {brms}},   author = {Paul-Christian Bürkner},   journal = {The R Journal},   year = {2018},   volume = {10},   number = {1},   pages = {395--411},   doi = {10.32614/RJ-2018-017},   encoding = {UTF-8}, } @Article{,   title = {Bayesian Item Response Modeling in {R} with {brms} and {Stan}},   author = {Paul-Christian Bürkner},   journal = {Journal of Statistical Software},   year = {2021},   volume = {100},   number = {5},   pages = {1--54},   doi = {10.18637/jss.v100.i05},   encoding = {UTF-8}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bayesian Regression Models using Stan","text":"brms package provides interface fit Bayesian generalized (non-)linear multivariate multilevel models using Stan, C++ package performing full Bayesian inference (see https://mc-stan.org/). formula syntax similar package lme4 provide familiar simple interface performing regression analyses. wide range response distributions supported, allowing users fit – among others – linear, robust linear, count data, survival, response times, ordinal, zero-inflated, even self-defined mixture models multilevel context. modeling options include non-linear smooth terms, auto-correlation structures, censored data, missing value imputation, quite . addition, parameters response distribution can predicted order perform distributional regression. Multivariate models (.e., models multiple response variables) can fit, well. Prior specifications flexible explicitly encourage users apply prior distributions actually reflect beliefs. Model fit can easily assessed compared posterior predictive checks, cross-validation, Bayes factors.","code":""},{"path":"/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Bayesian Regression Models using Stan","text":"Introduction brms (Journal Statistical Software) Advanced multilevel modeling brms (R Journal) Website (Website brms documentation vignettes) Blog posts (List blog posts brms) Ask question (Stan Forums Discourse) Open issue (GitHub issues bug reports feature requests)","code":""},{"path":"/index.html","id":"how-to-use-brms","dir":"","previous_headings":"","what":"How to use brms","title":"Bayesian Regression Models using Stan","text":"simple example, use poisson regression model seizure counts epileptic patients investigate whether treatment (represented variable Trt) can reduce seizure counts whether effect treatment varies (standardized) baseline number seizures person treatment (variable zBase). multiple observations per person, group-level intercept incorporated account resulting dependency data. results (.e., posterior draws) can investigated using top output, general information model given, family, formula, number iterations chains. Next, group-level effects displayed separately grouping factor terms standard deviations (case one group-level effect per grouping factor; displayed ) correlations group-level effects. bottom output, population-level effects (.e. regression coefficients) displayed. incorporated, autocorrelation effects family specific parameters (e.g., residual standard deviation ‘sigma’ normal models) also given. general, every parameter summarized using mean (‘Estimate’) standard deviation (‘Est.Error’) posterior distribution well two-sided 95% credible intervals (‘l-95% CI’ ‘u-95% CI’) based quantiles. see coefficient Trt negative zero overlapping 95%-CI. indicates , average, treatment may reduce seizure counts amount evidence based data applied model strong still insufficient standard decision rules. , find little evidence treatment effect varies baseline number seizures. last three values (‘ESS_bulk’, ‘ESS_tail’, ‘Rhat’) provide information well algorithm estimate posterior distribution parameter. ‘Rhat’ considerably greater 1, algorithm yet converged necessary run iterations / set stronger priors. visually investigate chains well posterior distributions, can use plot method. just want see results regression coefficients Trt zBase, go  detailed investigation can performed running launch_shinystan(fit1). better understand relationship predictors response, recommend conditional_effects method:  method uses prediction functionality behind scenes, can also called directly. Suppose want predict responses (.e. seizure counts) person treatment group (Trt = 1) control group (Trt = 0) average age average number previous seizures. can use need set re_formula = NA order condition group-level effects. predict method returns predictions responses, fitted method returns predictions regression line. methods return estimate (random error), latter smaller variance, uncertainty regression line smaller uncertainty response. want predict values original data, can just leave newdata argument empty. Suppose, want investigate whether overdispersion model, residual variation accounted response distribution. purpose, include second group-level intercept captures possible overdispersion. can go ahead compare models via approximate leave-one-(LOO) cross-validation. loo output comparing models little verbose. first see individual LOO summaries two models comparison . Since higher elpd (.e., expected log posterior density) values indicate better fit, see model accounting overdispersion (.e., fit2) fits substantially better. However, also see individual LOO outputs several problematic observations approximations may accurate. deal appropriately, need fall back methods reloo kfold requires model refit several times takes long purpose quick example. post-processing methods shown just tip iceberg. full list methods apply fitted model objects, type methods(class = \"brmsfit\").","code":"library(brms) fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),             data = epilepsy, family = poisson()) summary(fit1) #>  Family: poisson  #>   Links: mu = log  #> Formula: count ~ zAge + zBase * Trt + (1 | patient)  #>    Data: epilepsy (Number of observations: 236)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Multilevel Hyperparameters: #> ~patient (Number of levels: 59)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     0.59      0.07     0.46     0.74 1.01      566     1356 #>  #> Regression Coefficients: #>            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept      1.78      0.12     1.55     2.01 1.00      771     1595 #> zAge           0.09      0.09    -0.08     0.27 1.00      590     1302 #> zBase          0.71      0.12     0.47     0.96 1.00      848     1258 #> Trt1          -0.27      0.16    -0.60     0.05 1.01      749     1172 #> zBase:Trt1     0.05      0.17    -0.30     0.38 1.00      833     1335 #>  #> Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). plot(fit1, variable = c(\"b_Trt1\", \"b_zBase\")) plot(conditional_effects(fit1, effects = \"zBase:Trt\")) newdata <- data.frame(Trt = c(0, 1), zAge = 0, zBase = 0) predict(fit1, newdata = newdata, re_formula = NA) #>      Estimate Est.Error Q2.5 Q97.5 #> [1,]  5.91200  2.494857    2    11 #> [2,]  4.57325  2.166058    1     9 fitted(fit1, newdata = newdata, re_formula = NA) #>      Estimate Est.Error     Q2.5    Q97.5 #> [1,] 5.945276 0.7075160 4.696257 7.450011 #> [2,] 4.540081 0.5343471 3.579757 5.665132 fit2 <- brm(count ~ zAge + zBase * Trt + (1|patient) + (1|obs),             data = epilepsy, family = poisson()) loo(fit1, fit2) #> Output of model 'fit1': #>  #> Computed from 4000 by 236 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo   -671.7 36.6 #> p_loo        94.3 14.2 #> looic      1343.4 73.2 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.4, 2.0]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     228   96.6%   157      #>    (0.7, 1]   (bad)        7    3.0%   <NA>     #>    (1, Inf)   (very bad)   1    0.4%   <NA>     #> See help('pareto-k-diagnostic') for details. #>  #> Output of model 'fit2': #>  #> Computed from 4000 by 236 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo   -596.8 14.0 #> p_loo       109.7  7.2 #> looic      1193.6 28.1 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.4, 1.7]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     172   72.9%   83       #>    (0.7, 1]   (bad)       56   23.7%   <NA>     #>    (1, Inf)   (very bad)   8    3.4%   <NA>     #> See help('pareto-k-diagnostic') for details. #>  #> Model comparisons: #>      elpd_diff se_diff #> fit2   0.0       0.0   #> fit1 -74.9      27.2"},{"path":"/index.html","id":"citing-brms-and-related-software","dir":"","previous_headings":"","what":"Citing brms and related software","title":"Bayesian Regression Models using Stan","text":"Developing maintaining open source software important yet often underappreciated contribution scientific progress. Thus, whenever using open source software (software general), please make sure cite appropriately developers get credit work. using brms, please cite one following publications: Bürkner P. C. (2017). brms: R Package Bayesian Multilevel Models using Stan. Journal Statistical Software. 80(1), 1-28. doi.org/10.18637/jss.v080.i01 Bürkner P. C. (2018). Advanced Bayesian Multilevel Modeling R Package brms. R Journal. 10(1), 395-411. doi.org/10.32614/RJ-2018-017 Bürkner P. C. (2021). Bayesian Item Response Modeling R brms Stan. Journal Statistical Software, 100(5), 1-54. doi.org/10.18637/jss.v100.i05 brms high-level interface Stan, please additionally cite Stan (see also https://mc-stan.org/users/citations/): Stan Development Team. YEAR. Stan Modeling Language Users Guide Reference Manual, VERSION. https://mc-stan.org Carpenter B., Gelman ., Hoffman M. D., Lee D., Goodrich B., Betancourt M., Brubaker M., Guo J., Li P., Riddell . (2017). Stan: probabilistic programming language. Journal Statistical Software. 76(1). doi.org/10.18637/jss.v076.i01 , brms relies several R packages , course, R . find cite R packages, use citation function. features brms specifically rely certain packages. rstan package together Rcpp makes Stan conveniently accessible R. Visualizations posterior-predictive checks based bayesplot ggplot2. Approximate leave-one-cross-validation using loo related methods done via loo package. Marginal likelihood based methods bayes_factor realized means bridgesampling package. Splines specified via s t2 functions rely mgcv. use features, please also consider citing related packages.","code":""},{"path":[]},{"path":"/index.html","id":"how-do-i-install-brms","dir":"","previous_headings":"FAQ","what":"How do I install brms?","title":"Bayesian Regression Models using Stan","text":"install latest release version CRAN use current developmental version can downloaded GitHub via brms based Stan, C++ compiler required. program Rtools (available https://cran.r-project.org/bin/windows/Rtools/) comes C++ compiler Windows. Mac, install Xcode. instructions get compilers running, see prerequisites section https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started.","code":"install.packages(\"brms\") if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"paul-buerkner/brms\")"},{"path":"/index.html","id":"i-am-new-to-brms-where-can-i-start","dir":"","previous_headings":"FAQ","what":"I am new to brms. Where can I start?","title":"Bayesian Regression Models using Stan","text":"Detailed instructions case studies given package’s extensive vignettes. See vignette(package = \"brms\") overview. documentation formula syntax, families, prior distributions see help(\"brm\").","code":""},{"path":"/index.html","id":"where-do-i-ask-questions-propose-a-new-feature-or-report-a-bug","dir":"","previous_headings":"FAQ","what":"Where do I ask questions, propose a new feature, or report a bug?","title":"Bayesian Regression Models using Stan","text":"Questions can asked Stan forums Discourse. propose new feature report bug, please open issue GitHub.","code":""},{"path":"/index.html","id":"how-can-i-extract-the-generated-stan-code","dir":"","previous_headings":"FAQ","what":"How can I extract the generated Stan code?","title":"Bayesian Regression Models using Stan","text":"already fitted model, apply stancode method fitted model object. just want generate Stan code without model fitting, use stancode method model formula.","code":""},{"path":"/index.html","id":"can-i-avoid-compiling-models","dir":"","previous_headings":"FAQ","what":"Can I avoid compiling models?","title":"Bayesian Regression Models using Stan","text":"fit model first time brms, currently way avoid compilation. However, already fitted model want run , instance draws, can without recompilation using update method. details see help(\"update.brmsfit\").","code":""},{"path":"/index.html","id":"what-is-the-difference-between-brms-and-rstanarm","dir":"","previous_headings":"FAQ","what":"What is the difference between brms and rstanarm?","title":"Bayesian Regression Models using Stan","text":"rstanarm package similar brms also allows fit regression models using Stan backend estimation. Contrary brms, rstanarm comes precompiled code save compilation time (need C++ compiler) fitting model. However, brms generates Stan code fly, offers much flexibility model specification rstanarm. Also, multilevel models currently fitted bit efficiently brms. detailed comparisons brms common R packages implementing multilevel models, see vignette(\"brms_multilevel\") vignette(\"brms_overview\").","code":""},{"path":"/reference/AsymLaplace.html","id":null,"dir":"Reference","previous_headings":"","what":"The Asymmetric Laplace Distribution — AsymLaplace","title":"The Asymmetric Laplace Distribution — AsymLaplace","text":"Density, distribution function, quantile function random generation asymmetric Laplace distribution location mu, scale sigma asymmetry parameter quantile.","code":""},{"path":"/reference/AsymLaplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Asymmetric Laplace Distribution — AsymLaplace","text":"","code":"dasym_laplace(x, mu = 0, sigma = 1, quantile = 0.5, log = FALSE)  pasym_laplace(   q,   mu = 0,   sigma = 1,   quantile = 0.5,   lower.tail = TRUE,   log.p = FALSE )  qasym_laplace(   p,   mu = 0,   sigma = 1,   quantile = 0.5,   lower.tail = TRUE,   log.p = FALSE )  rasym_laplace(n, mu = 0, sigma = 1, quantile = 0.5)"},{"path":"/reference/AsymLaplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Asymmetric Laplace Distribution — AsymLaplace","text":"x, q Vector quantiles. mu Vector locations. sigma Vector scales. quantile Asymmetry parameter corresponding quantiles quantile regression (hence name). log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. p Vector probabilities. n Number draws sample distribution.","code":""},{"path":"/reference/AsymLaplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Asymmetric Laplace Distribution — AsymLaplace","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/BetaBinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"The Beta-binomial Distribution — BetaBinomial","title":"The Beta-binomial Distribution — BetaBinomial","text":"Cumulative density & mass functions, random number generation Beta-binomial distribution using following re-parameterisation Stan Beta-binomial definition: mu = alpha * beta mean probability trial success. phi = (1 - mu) * beta precision -dispersion, component.","code":""},{"path":"/reference/BetaBinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Beta-binomial Distribution — BetaBinomial","text":"","code":"dbeta_binomial(x, size, mu, phi, log = FALSE)  pbeta_binomial(q, size, mu, phi, lower.tail = TRUE, log.p = FALSE)  rbeta_binomial(n, size, mu, phi)"},{"path":"/reference/BetaBinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Beta-binomial Distribution — BetaBinomial","text":"x, q Vector quantiles. size Vector number trials (zero ). mu Vector means. phi Vector precisions. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. n Number draws sample distribution.","code":""},{"path":"/reference/Dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"The Dirichlet Distribution — Dirichlet","title":"The Dirichlet Distribution — Dirichlet","text":"Density function random number generation dirichlet distribution shape parameter vector alpha.","code":""},{"path":"/reference/Dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Dirichlet Distribution — Dirichlet","text":"","code":"ddirichlet(x, alpha, log = FALSE)  rdirichlet(n, alpha)"},{"path":"/reference/Dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Dirichlet Distribution — Dirichlet","text":"x Matrix quantiles. row corresponds one probability vector. alpha Matrix positive shape parameters. row corresponds one probability vector. log Logical; TRUE, values returned log scale. n Number draws sample distribution.","code":""},{"path":"/reference/Dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Dirichlet Distribution — Dirichlet","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/ExGaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"The Exponentially Modified Gaussian Distribution — ExGaussian","title":"The Exponentially Modified Gaussian Distribution — ExGaussian","text":"Density, distribution function, random generation exponentially modified Gaussian distribution mean mu standard deviation sigma gaussian component, well scale beta exponential component.","code":""},{"path":"/reference/ExGaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Exponentially Modified Gaussian Distribution — ExGaussian","text":"","code":"dexgaussian(x, mu, sigma, beta, log = FALSE)  pexgaussian(q, mu, sigma, beta, lower.tail = TRUE, log.p = FALSE)  rexgaussian(n, mu, sigma, beta)"},{"path":"/reference/ExGaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Exponentially Modified Gaussian Distribution — ExGaussian","text":"x, q Vector quantiles. mu Vector means combined distribution. sigma Vector standard deviations gaussian component. beta Vector scales exponential component. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. n Number draws sample distribution.","code":""},{"path":"/reference/ExGaussian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Exponentially Modified Gaussian Distribution — ExGaussian","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/Frechet.html","id":null,"dir":"Reference","previous_headings":"","what":"The Frechet Distribution — Frechet","title":"The Frechet Distribution — Frechet","text":"Density, distribution function, quantile function random generation Frechet distribution location loc, scale scale, shape shape.","code":""},{"path":"/reference/Frechet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Frechet Distribution — Frechet","text":"","code":"dfrechet(x, loc = 0, scale = 1, shape = 1, log = FALSE)  pfrechet(q, loc = 0, scale = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  qfrechet(p, loc = 0, scale = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  rfrechet(n, loc = 0, scale = 1, shape = 1)"},{"path":"/reference/Frechet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Frechet Distribution — Frechet","text":"x, q Vector quantiles. loc Vector locations. scale Vector scales. shape Vector shapes. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. p Vector probabilities. n Number draws sample distribution.","code":""},{"path":"/reference/Frechet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Frechet Distribution — Frechet","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/GenExtremeValue.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Extreme Value Distribution — GenExtremeValue","title":"The Generalized Extreme Value Distribution — GenExtremeValue","text":"Density, distribution function, random generation generalized extreme value distribution location mu, scale sigma shape xi.","code":""},{"path":"/reference/GenExtremeValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Extreme Value Distribution — GenExtremeValue","text":"","code":"dgen_extreme_value(x, mu = 0, sigma = 1, xi = 0, log = FALSE)  pgen_extreme_value(   q,   mu = 0,   sigma = 1,   xi = 0,   lower.tail = TRUE,   log.p = FALSE )  qgen_extreme_value(   p,   mu = 0,   sigma = 1,   xi = 0,   lower.tail = TRUE,   log.p = FALSE )  rgen_extreme_value(n, mu = 0, sigma = 1, xi = 0)"},{"path":"/reference/GenExtremeValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Extreme Value Distribution — GenExtremeValue","text":"x, q Vector quantiles. mu Vector locations. sigma Vector scales. xi Vector shapes. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. p Vector probabilities. n Number draws sample distribution.","code":""},{"path":"/reference/GenExtremeValue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Extreme Value Distribution — GenExtremeValue","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/Hurdle.html","id":null,"dir":"Reference","previous_headings":"","what":"Hurdle Distributions — Hurdle","title":"Hurdle Distributions — Hurdle","text":"Density distribution functions hurdle distributions.","code":""},{"path":"/reference/Hurdle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hurdle Distributions — Hurdle","text":"","code":"dhurdle_poisson(x, lambda, hu, log = FALSE)  phurdle_poisson(q, lambda, hu, lower.tail = TRUE, log.p = FALSE)  dhurdle_negbinomial(x, mu, shape, hu, log = FALSE)  phurdle_negbinomial(q, mu, shape, hu, lower.tail = TRUE, log.p = FALSE)  dhurdle_gamma(x, shape, scale, hu, log = FALSE)  phurdle_gamma(q, shape, scale, hu, lower.tail = TRUE, log.p = FALSE)  dhurdle_lognormal(x, mu, sigma, hu, log = FALSE)  phurdle_lognormal(q, mu, sigma, hu, lower.tail = TRUE, log.p = FALSE)"},{"path":"/reference/Hurdle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hurdle Distributions — Hurdle","text":"x Vector quantiles. hu hurdle probability log Logical; TRUE, values returned log scale. q Vector quantiles. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. mu, lambda location parameter shape shape parameter sigma, scale scale parameter","code":""},{"path":"/reference/Hurdle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hurdle Distributions — Hurdle","text":"density hurdle distribution can specified follows. \\(x = 0\\) set \\(f(x) = \\theta\\). Else set \\(f(x) = (1 - \\theta) * g(x) / (1 - G(0))\\) \\(g(x)\\) \\(G(x)\\) density distribution function non-hurdle part, respectively.","code":""},{"path":"/reference/InvGaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Gaussian Distribution — InvGaussian","title":"The Inverse Gaussian Distribution — InvGaussian","text":"Density, distribution function, random generation inverse Gaussian distribution location mu, shape shape.","code":""},{"path":"/reference/InvGaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Gaussian Distribution — InvGaussian","text":"","code":"dinv_gaussian(x, mu = 1, shape = 1, log = FALSE)  pinv_gaussian(q, mu = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  rinv_gaussian(n, mu = 1, shape = 1)"},{"path":"/reference/InvGaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Gaussian Distribution — InvGaussian","text":"x, q Vector quantiles. mu Vector locations. shape Vector shapes. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. n Number draws sample distribution.","code":""},{"path":"/reference/InvGaussian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Gaussian Distribution — InvGaussian","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/LogisticNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"The (Multivariate) Logistic Normal Distribution — LogisticNormal","title":"The (Multivariate) Logistic Normal Distribution — LogisticNormal","text":"Density function random generation (multivariate) logistic normal distribution latent mean vector mu covariance matrix Sigma.","code":""},{"path":"/reference/LogisticNormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The (Multivariate) Logistic Normal Distribution — LogisticNormal","text":"","code":"dlogistic_normal(x, mu, Sigma, refcat = 1, log = FALSE, check = FALSE)  rlogistic_normal(n, mu, Sigma, refcat = 1, check = FALSE)"},{"path":"/reference/LogisticNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The (Multivariate) Logistic Normal Distribution — LogisticNormal","text":"x Vector matrix quantiles. x matrix, row taken quantile. mu Mean vector length equal number dimensions. Sigma Covariance matrix. refcat single integer indicating reference category. Defaults 1. log Logical; TRUE, values returned log scale. check Logical; Indicates whether several input checks performed. Defaults FALSE improve efficiency. n Number draws sample distribution.","code":""},{"path":"/reference/MultiNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"The Multivariate Normal Distribution — MultiNormal","title":"The Multivariate Normal Distribution — MultiNormal","text":"Density function random generation multivariate normal distribution mean vector mu covariance matrix Sigma.","code":""},{"path":"/reference/MultiNormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Multivariate Normal Distribution — MultiNormal","text":"","code":"dmulti_normal(x, mu, Sigma, log = FALSE, check = FALSE)  rmulti_normal(n, mu, Sigma, check = FALSE)"},{"path":"/reference/MultiNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Multivariate Normal Distribution — MultiNormal","text":"x Vector matrix quantiles. x matrix, row taken quantile. mu Mean vector length equal number dimensions. Sigma Covariance matrix. log Logical; TRUE, values returned log scale. check Logical; Indicates whether several input checks performed. Defaults FALSE improve efficiency. n Number draws sample distribution.","code":""},{"path":"/reference/MultiNormal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Multivariate Normal Distribution — MultiNormal","text":"See Stan user's manual https://mc-stan.org/docs/ details parameterization","code":""},{"path":"/reference/MultiStudentT.html","id":null,"dir":"Reference","previous_headings":"","what":"The Multivariate Student-t Distribution — MultiStudentT","title":"The Multivariate Student-t Distribution — MultiStudentT","text":"Density function random generation multivariate Student-t distribution location vector mu, covariance matrix Sigma, degrees freedom df.","code":""},{"path":"/reference/MultiStudentT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Multivariate Student-t Distribution — MultiStudentT","text":"","code":"dmulti_student_t(x, df, mu, Sigma, log = FALSE, check = FALSE)  rmulti_student_t(n, df, mu, Sigma, check = FALSE)"},{"path":"/reference/MultiStudentT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Multivariate Student-t Distribution — MultiStudentT","text":"x Vector matrix quantiles. x matrix, row taken quantile. df Vector degrees freedom. mu Location vector length equal number dimensions. Sigma Covariance matrix. log Logical; TRUE, values returned log scale. check Logical; Indicates whether several input checks performed. Defaults FALSE improve efficiency. n Number draws sample distribution.","code":""},{"path":"/reference/MultiStudentT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Multivariate Student-t Distribution — MultiStudentT","text":"See Stan user's manual https://mc-stan.org/docs/   details parameterization","code":""},{"path":"/reference/R2D2.html","id":null,"dir":"Reference","previous_headings":"","what":"R2D2 Priors in brms — R2D2","title":"R2D2 Priors in brms — R2D2","text":"Function used set R2D2(M2) priors brms. function evaluate arguments – exists purely help set model.","code":""},{"path":"/reference/R2D2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R2D2 Priors in brms — R2D2","text":"","code":"R2D2(mean_R2 = 0.5, prec_R2 = 2, cons_D2 = 0.5, autoscale = TRUE, main = FALSE)"},{"path":"/reference/R2D2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R2D2 Priors in brms — R2D2","text":"mean_R2 Mean Beta prior coefficient determination R^2. prec_R2 Precision Beta prior coefficient determination R^2. cons_D2 Concentration vector Dirichlet prior variance decomposition parameters. Lower values imply shrinkage. autoscale Logical; indicating whether R2D2 prior scaled using residual standard deviation sigma possible sensible (defaults TRUE). Autoscaling applied distributional parameters model contain parameter sigma. main Logical (defaults FALSE); relevant R2D2 prior spans multiple parameter classes. case, arguments given single instance main TRUE used. Arguments given instances prior ignored. See Examples section .","code":""},{"path":"/reference/R2D2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R2D2 Priors in brms — R2D2","text":"prior account scale differences terms   applied . Accordingly, please make sure terms   comparable scale ensure shrinkage applied properly. Currently, following classes support R2D2(M2) prior: b   (overall regression coefficients), sds (SDs smoothing splines),   sdgp (SDs Gaussian processes), ar (autoregressive   coefficients), ma (moving average coefficients), sderr (SD   latent residuals), sdcar (SD spatial CAR structures), sd   (SD varying coefficients). prior applied parameter class b, equivalent   original R2D2 prior (Gaussian kernel). prior also   applied parameter classes, equivalent R2D2M2 prior. Even R2D2(M2) prior applied multiple parameter classes ,   concentration vector (argument cons_D2) provided   jointly one instance prior main = TRUE.   order elements concentration vector correspond   classes' coefficients order classes provided   .","code":""},{"path":"/reference/R2D2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R2D2 Priors in brms — R2D2","text":"Zhang, Y. D., Naughton, B. P., Bondell, H. D., & Reich, B. J. (2020). Bayesian regression using prior model fit: R2-D2 shrinkage prior. Journal American Statistical Association. https://arxiv.org/pdf/1609.00046 Aguilar J. E. & Bürkner P. C. (2022). Intuitive Joint Priors Bayesian Linear Multilevel Models: R2D2M2 prior. ArXiv preprint. https://arxiv.org/pdf/2208.07132","code":""},{"path":[]},{"path":"/reference/R2D2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R2D2 Priors in brms — R2D2","text":"","code":"set_prior(R2D2(mean_R2 = 0.8, prec_R2 = 10)) #> b ~ R2D2(mean_R2 = 0.8, prec_R2 = 10)  # specify the R2D2 prior across multiple parameter classes set_prior(R2D2(mean_R2 = 0.8, prec_R2 = 10, main = TRUE), class = \"b\") +   set_prior(R2D2(), class = \"sd\") #>                                           prior class coef group resp dpar #>  R2D2(mean_R2 = 0.8, prec_R2 = 10, main = TRUE)     b                      #>                                          R2D2()    sd                      #>  nlpar   lb   ub tag source #>        <NA> <NA>       user #>        <NA> <NA>       user"},{"path":"/reference/Shifted_Lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"The Shifted Log Normal Distribution — Shifted_Lognormal","title":"The Shifted Log Normal Distribution — Shifted_Lognormal","text":"Density, distribution function, quantile function random generation shifted log normal distribution mean meanlog, standard deviation sdlog, shift parameter shift.","code":""},{"path":"/reference/Shifted_Lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Shifted Log Normal Distribution — Shifted_Lognormal","text":"","code":"dshifted_lnorm(x, meanlog = 0, sdlog = 1, shift = 0, log = FALSE)  pshifted_lnorm(   q,   meanlog = 0,   sdlog = 1,   shift = 0,   lower.tail = TRUE,   log.p = FALSE )  qshifted_lnorm(   p,   meanlog = 0,   sdlog = 1,   shift = 0,   lower.tail = TRUE,   log.p = FALSE )  rshifted_lnorm(n, meanlog = 0, sdlog = 1, shift = 0)"},{"path":"/reference/Shifted_Lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Shifted Log Normal Distribution — Shifted_Lognormal","text":"x, q Vector quantiles. meanlog Vector means. sdlog Vector standard deviations. shift Vector shifts. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. p Vector probabilities. n Number draws sample distribution.","code":""},{"path":"/reference/Shifted_Lognormal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Shifted Log Normal Distribution — Shifted_Lognormal","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/SkewNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"The Skew-Normal Distribution — SkewNormal","title":"The Skew-Normal Distribution — SkewNormal","text":"Density, distribution function, random generation skew-normal distribution mean mu, standard deviation sigma, skewness alpha.","code":""},{"path":"/reference/SkewNormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Skew-Normal Distribution — SkewNormal","text":"","code":"dskew_normal(   x,   mu = 0,   sigma = 1,   alpha = 0,   xi = NULL,   omega = NULL,   log = FALSE )  pskew_normal(   q,   mu = 0,   sigma = 1,   alpha = 0,   xi = NULL,   omega = NULL,   lower.tail = TRUE,   log.p = FALSE )  qskew_normal(   p,   mu = 0,   sigma = 1,   alpha = 0,   xi = NULL,   omega = NULL,   lower.tail = TRUE,   log.p = FALSE,   tol = 1e-08 )  rskew_normal(n, mu = 0, sigma = 1, alpha = 0, xi = NULL, omega = NULL)"},{"path":"/reference/SkewNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Skew-Normal Distribution — SkewNormal","text":"x, q Vector quantiles. mu Vector mean values. sigma Vector standard deviation values. alpha Vector skewness values. xi Optional vector location values. NULL (default), computed internally. omega Optional vector scale values. NULL (default), computed internally. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. p Vector probabilities. tol Tolerance approximation used computation quantiles. n Number draws sample distribution.","code":""},{"path":"/reference/SkewNormal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Skew-Normal Distribution — SkewNormal","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/StudentT.html","id":null,"dir":"Reference","previous_headings":"","what":"The Student-t Distribution — StudentT","title":"The Student-t Distribution — StudentT","text":"Density, distribution function, quantile function random generation Student-t distribution location mu, scale sigma, degrees freedom df.","code":""},{"path":"/reference/StudentT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Student-t Distribution — StudentT","text":"","code":"dstudent_t(x, df, mu = 0, sigma = 1, log = FALSE)  pstudent_t(q, df, mu = 0, sigma = 1, lower.tail = TRUE, log.p = FALSE)  qstudent_t(p, df, mu = 0, sigma = 1, lower.tail = TRUE, log.p = FALSE)  rstudent_t(n, df, mu = 0, sigma = 1)"},{"path":"/reference/StudentT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Student-t Distribution — StudentT","text":"x Vector quantiles. df Vector degrees freedom. mu Vector location values. sigma Vector scale values. log Logical; TRUE, values returned log scale. q Vector quantiles. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. p Vector probabilities. n Number draws sample distribution.","code":""},{"path":"/reference/StudentT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Student-t Distribution — StudentT","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":[]},{"path":"/reference/VarCorr.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variance and Correlation Components — VarCorr.brmsfit","title":"Extract Variance and Correlation Components — VarCorr.brmsfit","text":"function calculates estimated standard deviations, correlations covariances group-level terms multilevel model class brmsfit. linear models, residual standard deviations, correlations covariances also returned.","code":""},{"path":"/reference/VarCorr.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variance and Correlation Components — VarCorr.brmsfit","text":"","code":"# S3 method for class 'brmsfit' VarCorr(   x,   sigma = 1,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   ... )"},{"path":"/reference/VarCorr.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variance and Correlation Components — VarCorr.brmsfit","text":"x object class brmsfit. sigma Ignored (included compatibility VarCorr). summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... Currently ignored.","code":""},{"path":"/reference/VarCorr.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variance and Correlation Components — VarCorr.brmsfit","text":"list lists (one per grouping factor), three elements: matrix containing standard deviations, array containing correlation matrix, array containing covariance matrix variances diagonal.","code":""},{"path":"/reference/VarCorr.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Variance and Correlation Components — VarCorr.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt + (1+Trt|visit),            data = epilepsy, family = gaussian(), chains = 2) VarCorr(fit) } # }"},{"path":"/reference/VonMises.html","id":null,"dir":"Reference","previous_headings":"","what":"The von Mises Distribution — VonMises","title":"The von Mises Distribution — VonMises","text":"Density, distribution function, random generation von Mises distribution location mu, precision kappa.","code":""},{"path":"/reference/VonMises.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The von Mises Distribution — VonMises","text":"","code":"dvon_mises(x, mu, kappa, log = FALSE)  pvon_mises(q, mu, kappa, lower.tail = TRUE, log.p = FALSE, acc = 1e-20)  rvon_mises(n, mu, kappa)"},{"path":"/reference/VonMises.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The von Mises Distribution — VonMises","text":"x, q Vector quantiles -pi pi. mu Vector location values. kappa Vector precision values. log Logical; TRUE, values returned log scale. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. acc Accuracy numerical approximations. n Number draws sample distribution.","code":""},{"path":"/reference/VonMises.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The von Mises Distribution — VonMises","text":"See vignette(\"brms_families\") details parameterization.","code":""},{"path":"/reference/Wiener.html","id":null,"dir":"Reference","previous_headings":"","what":"The Wiener Diffusion Model Distribution — Wiener","title":"The Wiener Diffusion Model Distribution — Wiener","text":"Density function random generation Wiener diffusion model distribution boundary separation alpha, non-decision time tau, bias  beta drift rate delta.","code":""},{"path":"/reference/Wiener.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Wiener Diffusion Model Distribution — Wiener","text":"","code":"dwiener(   x,   alpha,   tau,   beta,   delta,   resp = 1,   log = FALSE,   backend = getOption(\"wiener_backend\", \"Rwiener\") )  rwiener(   n,   alpha,   tau,   beta,   delta,   types = c(\"q\", \"resp\"),   backend = getOption(\"wiener_backend\", \"Rwiener\") )"},{"path":"/reference/Wiener.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Wiener Diffusion Model Distribution — Wiener","text":"x Vector quantiles. alpha Boundary separation parameter. tau Non-decision time parameter. beta Bias parameter. delta Drift rate parameter. resp Response: \"upper\" \"lower\". character vector, coerced logical TRUE indicates \"upper\" FALSE indicates \"lower\". log Logical; TRUE, values returned log scale. backend Name package use backend computations. Either \"Rwiener\" (default) \"rtdists\". Can set globally current R session via \"wiener_backend\" option (see options). n Number draws sample distribution. types types responses return? default, return response times \"q\" dichotomous responses \"resp\". either \"q\" \"resp\", return one two types.","code":""},{"path":"/reference/Wiener.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Wiener Diffusion Model Distribution — Wiener","text":"wrappers around functions RWiener rtdists package (depending chosen backend). See vignette(\"brms_families\") details parameterization.","code":""},{"path":[]},{"path":"/reference/ZeroInflated.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-Inflated Distributions — ZeroInflated","title":"Zero-Inflated Distributions — ZeroInflated","text":"Density distribution functions zero-inflated distributions.","code":""},{"path":"/reference/ZeroInflated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-Inflated Distributions — ZeroInflated","text":"","code":"dzero_inflated_poisson(x, lambda, zi, log = FALSE)  pzero_inflated_poisson(q, lambda, zi, lower.tail = TRUE, log.p = FALSE)  dzero_inflated_negbinomial(x, mu, shape, zi, log = FALSE)  pzero_inflated_negbinomial(q, mu, shape, zi, lower.tail = TRUE, log.p = FALSE)  dzero_inflated_binomial(x, size, prob, zi, log = FALSE)  pzero_inflated_binomial(q, size, prob, zi, lower.tail = TRUE, log.p = FALSE)  dzero_inflated_beta_binomial(x, size, mu, phi, zi, log = FALSE)  pzero_inflated_beta_binomial(   q,   size,   mu,   phi,   zi,   lower.tail = TRUE,   log.p = FALSE )  dzero_inflated_beta(x, shape1, shape2, zi, log = FALSE)  pzero_inflated_beta(q, shape1, shape2, zi, lower.tail = TRUE, log.p = FALSE)"},{"path":"/reference/ZeroInflated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-Inflated Distributions — ZeroInflated","text":"x Vector quantiles. zi zero-inflation probability log Logical; TRUE, values returned log scale. q Vector quantiles. lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) . log.p Logical; TRUE, values returned log scale. mu, lambda location parameter shape, shape1, shape2 shape parameter size number trials prob probability success trial phi precision parameter","code":""},{"path":"/reference/ZeroInflated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-Inflated Distributions — ZeroInflated","text":"density zero-inflated distribution can specified follows. \\(x = 0\\) set \\(f(x) = \\theta + (1 - \\theta) * g(0)\\). Else set \\(f(x) = (1 - \\theta) * g(x)\\), \\(g(x)\\) density non-zero-inflated part.","code":""},{"path":"/reference/add_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Add model fit criteria to model objects — add_criterion","title":"Add model fit criteria to model objects — add_criterion","text":"Add model fit criteria model objects","code":""},{"path":"/reference/add_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add model fit criteria to model objects — add_criterion","text":"","code":"add_criterion(x, ...)  # S3 method for class 'brmsfit' add_criterion(   x,   criterion,   model_name = NULL,   overwrite = FALSE,   file = NULL,   force_save = FALSE,   ... )"},{"path":"/reference/add_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add model fit criteria to model objects — add_criterion","text":"x R object typically class brmsfit. ... arguments passed underlying functions computing model fit criteria. recomputing already stored criterion ... arguments, make sure set overwrite = TRUE. criterion Names model fit criteria compute. Currently supported \"loo\", \"waic\", \"kfold\", \"loo_subsample\", \"bayes_R2\" (Bayesian R-squared), \"loo_R2\" (LOO-adjusted R-squared), \"marglik\" (log marginal likelihood). model_name Optional name model. NULL (default) name taken call x. overwrite Logical; Indicates already stored fit indices overwritten. Defaults FALSE. Setting TRUE useful example changing additional arguments already stored criterion. file Either NULL character string. latter case, fitted model object including newly added criterion values saved via saveRDS file named string supplied file. .rds extension added automatically. x already stored file , file name reused automatically (message) unless overwritten file. case, file applies new criteria actually added via add_criterion force_save set TRUE. force_save Logical; relevant file specified ignored otherwise. TRUE, fitted model object saved regardless whether new criteria added via add_criterion.","code":""},{"path":"/reference/add_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add model fit criteria to model objects — add_criterion","text":"object class x,   model fit criteria added later usage.","code":""},{"path":"/reference/add_criterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add model fit criteria to model objects — add_criterion","text":"Functions add_loo add_waic aliases   add_criterion fixed values criterion argument.","code":""},{"path":"/reference/add_criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add model fit criteria to model objects — add_criterion","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ Trt, data = epilepsy) # add both LOO and WAIC at once fit <- add_criterion(fit, c(\"loo\", \"waic\")) print(fit$criteria$loo) print(fit$criteria$waic) } # }"},{"path":"/reference/add_ic.html","id":null,"dir":"Reference","previous_headings":"","what":"Add model fit criteria to model objects — add_loo","title":"Add model fit criteria to model objects — add_loo","text":"Deprecated aliases add_criterion.","code":""},{"path":"/reference/add_ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add model fit criteria to model objects — add_loo","text":"","code":"add_loo(x, model_name = NULL, ...)  add_waic(x, model_name = NULL, ...)  add_ic(x, ...)  # S3 method for class 'brmsfit' add_ic(x, ic = \"loo\", model_name = NULL, ...)  add_ic(x, ...) <- value"},{"path":"/reference/add_ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add model fit criteria to model objects — add_loo","text":"x R object typically class brmsfit. model_name Optional name model. NULL (default) name taken call x. ... arguments passed underlying functions computing model fit criteria. recomputing already stored criterion ... arguments, make sure set overwrite = TRUE. ic, value Names model fit criteria compute. Currently supported \"loo\", \"waic\", \"kfold\", \"R2\" (R-squared), \"marglik\" (log marginal likelihood).","code":""},{"path":"/reference/add_ic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add model fit criteria to model objects — add_loo","text":"object class x,   model fit criteria added later usage.   Previously computed criterion objects overwritten.","code":""},{"path":"/reference/add_rstan_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Add compiled rstan models to brmsfit objects — add_rstan_model","title":"Add compiled rstan models to brmsfit objects — add_rstan_model","text":"Compile stanmodel add brmsfit object. enables advanced functionality rstan, notably log_prob friends, used brms models fitted Stan backends.","code":""},{"path":"/reference/add_rstan_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add compiled rstan models to brmsfit objects — add_rstan_model","text":"","code":"add_rstan_model(x, overwrite = FALSE)"},{"path":"/reference/add_rstan_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add compiled rstan models to brmsfit objects — add_rstan_model","text":"x brmsfit object updated. overwrite Logical. TRUE, overwrite existing stanmodel. Defaults FALSE.","code":""},{"path":"/reference/add_rstan_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add compiled rstan models to brmsfit objects — add_rstan_model","text":"(possibly updated) brmsfit object.","code":""},{"path":"/reference/addition-terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Response Information — addition-terms","title":"Additional Response Information — addition-terms","text":"Provide additional information response variable brms models, censoring, truncation, known measurement error. Detailed documentation use functions can found Details section brmsformula (\"Additional response information\").","code":""},{"path":"/reference/addition-terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Response Information — addition-terms","text":"","code":"resp_se(x, sigma = FALSE)  resp_weights(x, scale = FALSE)  resp_trials(x)  resp_thres(x, gr = NA)  resp_cat(x)  resp_dec(x)  resp_bhaz(gr = NA, df = 5, ...)  resp_cens(x, y2 = NA)  resp_trunc(lb = -Inf, ub = Inf)  resp_mi(sdy = NA)  resp_index(x)  resp_rate(denom)  resp_subset(x)  resp_vreal(...)  resp_vint(...)"},{"path":"/reference/addition-terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Response Information — addition-terms","text":"x vector; Ideally single variable defined data (see Details). Allowed values depend function: resp_se resp_weights require positive numeric values. resp_trials, resp_thres, resp_cat require positive integers. resp_dec requires 0 1, alternatively 'lower' 'upper'. resp_subset requires 0 1, alternatively FALSE TRUE. resp_cens requires 'left', 'none', 'right', 'interval' (equivalently -1, 0, 1, 2) indicate left, , right, interval censoring. resp_index make requirements value unique observation. sigma Logical; Indicates whether residual standard deviation parameter sigma included addition known measurement error. Defaults FALSE backwards compatibility, setting TRUE usually better choice. scale Logical; Indicates whether weights scaled average weight equals one. Defaults FALSE. gr vector grouping indicators. df Degrees freedom baseline hazard splines Cox models. ... resp_vreal, vectors real values. resp_vint, vectors integer values. Stan, variables named vreal1, vreal2, ..., vint1, vint2, ..., respectively. y2 vector specifying upper bounds interval censoring. ignored non-interval censored observations. However, NA even non-interval censored observations avoid accidental exclusion observations. lb numeric vector single numeric value specifying lower truncation bound. ub numeric vector single numeric value specifying upper truncation bound. sdy Optional known measurement error response treated standard deviation. specified, handles measurement error (completely) missing values time using plausible-values-technique. denom vector positive numeric values specifying denominator values response rates computed.","code":""},{"path":"/reference/addition-terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Response Information — addition-terms","text":"list additional response information processed   brms.","code":""},{"path":"/reference/addition-terms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional Response Information — addition-terms","text":"functions almost solely useful   called formulas passed brms package.   Within formulas, resp_ prefix may omitted.   information given 'Details' section   brmsformula (\"Additional response information\"). highly recommended use single data variable input   x (instead complicated expression) make sure   post-processing functions work expected.","code":""},{"path":[]},{"path":"/reference/addition-terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Response Information — addition-terms","text":"","code":"if (FALSE) { # \\dontrun{ ## Random effects meta-analysis nstudies <- 20 true_effects <- rnorm(nstudies, 0.5, 0.2) sei <- runif(nstudies, 0.05, 0.3) outcomes <- rnorm(nstudies, true_effects, sei) data1 <- data.frame(outcomes, sei) fit1 <- brm(outcomes | se(sei, sigma = TRUE) ~ 1,             data = data1) summary(fit1)  ## Probit regression using the binomial family n <- sample(1:10, 100, TRUE)  # number of trials success <- rbinom(100, size = n, prob = 0.4) x <- rnorm(100) data2 <- data.frame(n, success, x) fit2 <- brm(success | trials(n) ~ x, data = data2,             family = binomial(\"probit\")) summary(fit2)  ## Survival regression modeling the time between the first ## and second recurrence of an infection in kidney patients. fit3 <- brm(time | cens(censored) ~ age * sex + disease + (1|patient),             data = kidney, family = lognormal()) summary(fit3)  ## Poisson model with truncated counts fit4 <- brm(count | trunc(ub = 104) ~ zBase * Trt,             data = epilepsy, family = poisson()) summary(fit4) } # }"},{"path":"/reference/ar.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up AR(p) correlation structures — ar","title":"Set up AR(p) correlation structures — ar","text":"Set autoregressive (AR) term order p brms. function evaluate arguments – exists purely help set model AR terms.","code":""},{"path":"/reference/ar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up AR(p) correlation structures — ar","text":"","code":"ar(time = NA, gr = NA, p = 1, cov = FALSE)"},{"path":"/reference/ar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up AR(p) correlation structures — ar","text":"time optional time variable specifying time ordering observations. default, existing order observations data used. gr optional grouping variable. specified, correlation structure assumed apply observations within grouping level. p non-negative integer specifying autoregressive (AR) order ARMA structure. Default 1. cov flag indicating whether ARMA effects estimated means residual covariance matrices. currently possible stationary ARMA effects order 1. model family natural residuals, latent residuals added automatically. FALSE (default), regression formulation used considerably faster allows ARMA effects order higher 1 available gaussian models generalizations.","code":""},{"path":"/reference/ar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up AR(p) correlation structures — ar","text":"object class 'arma_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":[]},{"path":"/reference/ar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up AR(p) correlation structures — ar","text":"","code":"if (FALSE) { # \\dontrun{ data(\"LakeHuron\") LakeHuron <- as.data.frame(LakeHuron) fit <- brm(x ~ ar(p = 2), data = LakeHuron) summary(fit) } # }"},{"path":"/reference/arma.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up ARMA(p,q) correlation structures — arma","title":"Set up ARMA(p,q) correlation structures — arma","text":"Set autoregressive moving average (ARMA) term order (p, q) brms. function evaluate arguments – exists purely help set model ARMA terms.","code":""},{"path":"/reference/arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up ARMA(p,q) correlation structures — arma","text":"","code":"arma(time = NA, gr = NA, p = 1, q = 1, cov = FALSE)"},{"path":"/reference/arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up ARMA(p,q) correlation structures — arma","text":"time optional time variable specifying time ordering observations. default, existing order observations data used. gr optional grouping variable. specified, correlation structure assumed apply observations within grouping level. p non-negative integer specifying autoregressive (AR) order ARMA structure. Default 1. q non-negative integer specifying moving average (MA) order ARMA structure. Default 1. cov flag indicating whether ARMA effects estimated means residual covariance matrices. currently possible stationary ARMA effects order 1. model family natural residuals, latent residuals added automatically. FALSE (default), regression formulation used considerably faster allows ARMA effects order higher 1 available gaussian models generalizations.","code":""},{"path":"/reference/arma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up ARMA(p,q) correlation structures — arma","text":"object class 'arma_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":[]},{"path":"/reference/arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up ARMA(p,q) correlation structures — arma","text":"","code":"if (FALSE) { # \\dontrun{ data(\"LakeHuron\") LakeHuron <- as.data.frame(LakeHuron) fit <- brm(x ~ arma(p = 2, q = 1), data = LakeHuron) summary(fit) } # }"},{"path":"/reference/as.brmsprior.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform into a brmsprior object — as.brmsprior","title":"Transform into a brmsprior object — as.brmsprior","text":"Try transform object brmsprior object.","code":""},{"path":"/reference/as.brmsprior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform into a brmsprior object — as.brmsprior","text":"","code":"as.brmsprior(x)"},{"path":"/reference/as.brmsprior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform into a brmsprior object — as.brmsprior","text":"x object transformed.","code":""},{"path":"/reference/as.brmsprior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform into a brmsprior object — as.brmsprior","text":"brmsprior object transformation possible.","code":""},{"path":"/reference/as.data.frame.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Posterior Draws — as.data.frame.brmsfit","title":"Extract Posterior Draws — as.data.frame.brmsfit","text":"Extract posterior draws conventional formats data.frames, matrices, arrays.","code":""},{"path":"/reference/as.data.frame.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Posterior Draws — as.data.frame.brmsfit","text":"","code":"# S3 method for class 'brmsfit' as.data.frame(   x,   row.names = NULL,   optional = TRUE,   pars = NA,   variable = NULL,   draw = NULL,   subset = NULL,   ... )  # S3 method for class 'brmsfit' as.matrix(x, pars = NA, variable = NULL, draw = NULL, subset = NULL, ...)  # S3 method for class 'brmsfit' as.array(x, pars = NA, variable = NULL, draw = NULL, subset = NULL, ...)"},{"path":"/reference/as.data.frame.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Posterior Draws — as.data.frame.brmsfit","text":"x brmsfit object another R object methods defined. row.names, optional Unused added consistency .data.frame generic. pars Deprecated alias variable. reasons backwards compatibility, pars interpreted vector regular expressions default unless fixed = TRUE specified. variable character vector providing variables extract. default, variables extracted. draw draw indices select. Subsetting draw indices lead automatic merging chains. subset Deprecated alias draw. ... arguments passed corresponding as_draws_* methods well subset_draws.","code":""},{"path":"/reference/as.data.frame.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Posterior Draws — as.data.frame.brmsfit","text":"data.frame, matrix, array containing posterior draws.","code":""},{"path":[]},{"path":"/reference/as.mcmc.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Extract posterior samples for use with the coda package — as.mcmc.brmsfit","title":"(Deprecated) Extract posterior samples for use with the coda package — as.mcmc.brmsfit","text":".mcmc method deprecated. recommend using modern consistent as_draws_* extractor functions posterior package instead.","code":""},{"path":"/reference/as.mcmc.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Extract posterior samples for use with the coda package — as.mcmc.brmsfit","text":"","code":"# S3 method for class 'brmsfit' as.mcmc(   x,   pars = NA,   fixed = FALSE,   combine_chains = FALSE,   inc_warmup = FALSE,   ... )"},{"path":"/reference/as.mcmc.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Extract posterior samples for use with the coda package — as.mcmc.brmsfit","text":"x R object typically class brmsfit pars Names parameters posterior samples returned, given character vector regular expressions. default, posterior samples parameters extracted. fixed Indicates whether parameter names matched exactly (TRUE) treated regular expressions (FALSE). Default FALSE. combine_chains Indicates whether chains combined. inc_warmup Indicates warmup samples included. Default FALSE. Warmup samples used tune parameters sampling algorithm analyzed. ... currently unused","code":""},{"path":"/reference/as.mcmc.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Extract posterior samples for use with the coda package — as.mcmc.brmsfit","text":"combine_chains = TRUE mcmc object returned.   combine_chains = FALSE mcmc.list object returned.","code":""},{"path":"/reference/autocor-terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Autocorrelation structures — autocor-terms","title":"Autocorrelation structures — autocor-terms","text":"Specify autocorrelation terms brms models. Currently supported terms arma, ar, ma, cosy, unstr, sar, car, fcor. Terms can directly specified within formula, passed autocor argument brmsformula form one-sided formula. deprecated ways specifying autocorrelation terms, see cor_brms.","code":""},{"path":"/reference/autocor-terms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autocorrelation structures — autocor-terms","text":"autocor term functions almost solely useful called formulas passed brms package. evaluate arguments – exist purely help set model autocorrelation terms.","code":""},{"path":[]},{"path":"/reference/autocor-terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autocorrelation structures — autocor-terms","text":"","code":"# specify autocor terms within the formula y ~ x + arma(p = 1, q = 1) + car(M) #> y ~ x + arma(p = 1, q = 1) + car(M) #> <environment: 0x1230da828>  # specify autocor terms in the 'autocor' argument bf(y ~ x, autocor = ~ arma(p = 1, q = 1) + car(M)) #> y ~ x  #> autocor ~ arma(p = 1, q = 1) + car(M)  # specify autocor terms via 'acformula' bf(y ~ x) + acformula(~ arma(p = 1, q = 1) + car(M)) #> y ~ x  #> autocor ~ arma(p = 1, q = 1) + car(M)"},{"path":"/reference/autocor.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Extract Autocorrelation Objects — autocor.brmsfit","title":"(Deprecated) Extract Autocorrelation Objects — autocor.brmsfit","text":"(Deprecated) Extract Autocorrelation Objects","code":""},{"path":"/reference/autocor.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Extract Autocorrelation Objects — autocor.brmsfit","text":"","code":"# S3 method for class 'brmsfit' autocor(object, resp = NULL, ...)  autocor(object, ...)"},{"path":"/reference/autocor.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Extract Autocorrelation Objects — autocor.brmsfit","text":"object object class brmsfit. resp Optional names response variables. specified, predictions performed specified response variables. ... Currently unused.","code":""},{"path":"/reference/autocor.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Extract Autocorrelation Objects — autocor.brmsfit","text":"cor_brms object list objects multivariate   models. supported models fitted brms 2.11.1 higher.","code":""},{"path":"/reference/bayes_R2.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"Compute Bayesian version R-squared regression models","code":""},{"path":"/reference/bayes_R2.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"","code":"# S3 method for class 'brmsfit' bayes_R2(   object,   resp = NULL,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   ... )"},{"path":"/reference/bayes_R2.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"object object class brmsfit. resp Optional names response variables. specified, predictions performed specified response variables. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... arguments passed posterior_epred, used computation R-squared values.","code":""},{"path":"/reference/bayes_R2.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"summary = TRUE, M x C matrix returned  (M = number response variables c = length(probs) + 2)  containing summary statistics Bayesian R-squared values.  summary = FALSE, posterior draws Bayesian  R-squared values returned S x M matrix (S number draws).","code":""},{"path":"/reference/bayes_R2.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"introduction approach, see Gelman et al. (2019)  https://github.com/jgabry/bayes_R2/.","code":""},{"path":"/reference/bayes_R2.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"Andrew Gelman, Ben Goodrich, Jonah Gabry & Aki Vehtari. (2019).   R-squared Bayesian regression models, American Statistician,   73(3):307-309. 10.1080/00031305.2018.1549100 (Preprint available   https://stat.columbia.edu/~gelman/research/published/bayes_R2_v3.pdf)","code":""},{"path":"/reference/bayes_R2.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a Bayesian version of R-squared for regression models — bayes_R2.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(mpg ~ wt + cyl, data = mtcars) summary(fit) bayes_R2(fit)  # compute R2 with new data nd <- data.frame(mpg = c(10, 20, 30), wt = c(4, 3, 2), cyl = c(8, 6, 4)) bayes_R2(fit, newdata = nd) } # }"},{"path":"/reference/bayes_factor.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmsfit","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmsfit","text":"Compute Bayes factors marginal likelihoods.","code":""},{"path":"/reference/bayes_factor.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmsfit","text":"","code":"# S3 method for class 'brmsfit' bayes_factor(x1, x2, log = FALSE, ...)"},{"path":"/reference/bayes_factor.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmsfit","text":"x1 brmsfit object x2 Another brmsfit object based responses. log Report Bayes factors log-scale? ... Additional arguments passed bridge_sampler.","code":""},{"path":"/reference/bayes_factor.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmsfit","text":"Computing marginal likelihood requires samples   variables defined Stan's parameters block   saved. Otherwise bayes_factor computed.   Thus, please set save_all_pars = TRUE call brm,   planning apply bayes_factor models. computation Bayes factors based bridge sampling requires   lot posterior samples usual. good conservative   rule thumb perhaps 10-fold samples (read: default 4000   samples may enough many cases). enough posterior   samples provided, bridge sampling algorithm tends unstable,   leading considerably different results time run.   thus recommend running bayes_factor   multiple times check stability results. details provided   bridgesampling::bayes_factor.","code":""},{"path":[]},{"path":"/reference/bayes_factor.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with the treatment effect fit1 <- brm(   count ~ zAge + zBase + Trt,   data = epilepsy, family = negbinomial(),   prior = prior(normal(0, 1), class = b),   save_all_pars = TRUE ) summary(fit1)  # model without the treatment effect fit2 <- brm(   count ~ zAge + zBase,   data = epilepsy, family = negbinomial(),   prior = prior(normal(0, 1), class = b),   save_all_pars = TRUE ) summary(fit2)  # compute the bayes factor bayes_factor(fit1, fit2) } # }"},{"path":"/reference/bridge_sampler.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Marginal Likelihood via Bridge Sampling — bridge_sampler.brmsfit","title":"Log Marginal Likelihood via Bridge Sampling — bridge_sampler.brmsfit","text":"Computes log marginal likelihood via bridge sampling, can used computation bayes factors posterior model probabilities. brmsfit method just thin wrapper around corresponding method stanfit objects.","code":""},{"path":"/reference/bridge_sampler.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Marginal Likelihood via Bridge Sampling — bridge_sampler.brmsfit","text":"","code":"# S3 method for class 'brmsfit' bridge_sampler(samples, recompile = FALSE, ...)"},{"path":"/reference/bridge_sampler.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Marginal Likelihood via Bridge Sampling — bridge_sampler.brmsfit","text":"samples brmsfit object. recompile Logical, indicating whether Stan model recompiled. may necessary running bridge sampling another machine one used fit model. recompilation done default. ... Additional arguments passed bridge_sampler.stanfit.","code":""},{"path":"/reference/bridge_sampler.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log Marginal Likelihood via Bridge Sampling — bridge_sampler.brmsfit","text":"Computing marginal likelihood requires samples variables   defined Stan's parameters block saved. Otherwise   bridge_sampler computed. Thus, please set save_pars   = save_pars(= TRUE) call brm, planning   apply bridge_sampler models. computation marginal likelihoods based bridge sampling requires   lot posterior draws usual. good conservative   rule thump perhaps 10-fold draws (read: default 4000   draws may enough many cases). enough posterior   draws provided, bridge sampling algorithm tends   unstable leading considerably different results time run.   thus recommend running bridge_sampler   multiple times check stability results. details provided   bridgesampling::bridge_sampler.","code":""},{"path":[]},{"path":"/reference/bridge_sampler.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Marginal Likelihood via Bridge Sampling — bridge_sampler.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with the treatment effect fit1 <- brm(   count ~ zAge + zBase + Trt,   data = epilepsy, family = negbinomial(),   prior = prior(normal(0, 1), class = b),   save_pars = save_pars(all = TRUE) ) summary(fit1) bridge_sampler(fit1)  # model without the treatment effect fit2 <- brm(   count ~ zAge + zBase,   data = epilepsy, family = negbinomial(),   prior = prior(normal(0, 1), class = b),   save_pars = save_pars(all = TRUE) ) summary(fit2) bridge_sampler(fit2) } # }"},{"path":"/reference/brm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"Fit Bayesian generalized (non-)linear multivariate multilevel models using Stan full Bayesian inference. wide range distributions link functions supported, allowing users fit – among others – linear, robust linear, count data, survival, response times, ordinal, zero-inflated, hurdle, extended-support beta regression, even self-defined mixture models multilevel context. modeling options include non-linear smooth terms, auto-correlation structures, censored data, meta-analytic standard errors, quite . addition, parameters response distributions can predicted order perform distributional regression. Prior specifications flexible explicitly encourage users apply prior distributions actually reflect beliefs. addition, model fit can easily assessed compared posterior predictive checks leave-one-cross-validation.","code":""},{"path":"/reference/brm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"","code":"brm(   formula,   data,   family = gaussian(),   prior = NULL,   autocor = NULL,   data2 = NULL,   cov_ranef = NULL,   sample_prior = \"no\",   sparse = NULL,   knots = NULL,   drop_unused_levels = TRUE,   stanvars = NULL,   stan_funs = NULL,   fit = NA,   save_pars = getOption(\"brms.save_pars\", NULL),   save_ranef = NULL,   save_mevars = NULL,   save_all_pars = NULL,   init = NULL,   inits = NULL,   chains = 4,   iter = getOption(\"brms.iter\", 2000),   warmup = floor(iter/2),   thin = 1,   cores = getOption(\"mc.cores\", 1),   threads = getOption(\"brms.threads\", NULL),   opencl = getOption(\"brms.opencl\", NULL),   normalize = getOption(\"brms.normalize\", TRUE),   control = NULL,   algorithm = getOption(\"brms.algorithm\", \"sampling\"),   backend = getOption(\"brms.backend\", \"rstan\"),   future = getOption(\"future\", FALSE),   silent = 1,   seed = NA,   save_model = NULL,   stan_model_args = list(),   file = NULL,   file_compress = TRUE,   file_refit = getOption(\"brms.file_refit\", \"never\"),   empty = FALSE,   rename = TRUE,   ... )"},{"path":"/reference/brm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"formula object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data object class data.frame (one can coerced class) containing data variables used model. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. prior One brmsprior objects created set_prior related functions combined using c method + operator. See also default_prior help. autocor (Deprecated) optional cor_brms object describing correlation structure within response variable (.e., 'autocorrelation'). See documentation cor_brms description available correlation structures. Defaults NULL, corresponding correlations. multivariate models, autocor might also list autocorrelation structures. now recommend specify autocorrelation terms directly within formula. See brmsformula details. data2 named list objects containing data, passed via argument data. Required objects used autocorrelation structures specify dependency structures well within-group covariance matrices. cov_ranef (Deprecated) list matrices proportional (within) covariance structure group-level effects. names matrices correspond columns data used grouping factors. levels grouping factor appear rownames corresponding matrix. argument can used, among others model pedigrees phylogenetic effects. now recommended specify matrices formula interface using gr related functions. See vignette(\"brms_phylogenetics\") details. sample_prior Indicate draws priors drawn additionally posterior draws. Options \"\" (default), \"yes\", \"\". Among others, draws can used calculate Bayes factors point hypotheses via hypothesis. Please note improper priors sampled, including default improper priors used brm. See set_prior set (proper) priors. Please also note prior draws overall intercept obtained default technical reasons. See brmsformula obtain prior draws intercept. sample_prior set \"\", draws drawn solely priors ignoring likelihood, allows among others generate draws prior predictive distribution. case, parameters must proper priors. sparse (Deprecated) Logical; indicates whether population-level design matrices treated sparse (defaults FALSE). design matrices many zeros, can considerably reduce required memory. Sampling speed currently improved even slightly decreased. now recommended use sparse argument brmsformula related functions. knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. drop_unused_levels unused factors levels data dropped? Defaults TRUE. stanvars optional stanvars object generated function stanvar define additional variables use Stan's program blocks. stan_funs (Deprecated) optional character string containing self-defined  Stan functions, included functions block generated Stan code. now recommended use stanvars argument purpose instead. fit instance S3 class brmsfit derived previous fit; defaults NA. fit class brmsfit, compiled model associated fitted result re-used arguments modifying model code data ignored. recommended use argument directly, call update method, instead. save_pars object generated save_pars controlling parameters saved model. argument impact model fitting . save_ranef (Deprecated) flag indicate group-level effects level grouping factor(s) saved (default TRUE). Set FALSE save memory. argument impact model fitting . save_mevars (Deprecated) flag indicate draws latent noise-free variables obtained using mi terms saved (default FALSE). Saving draws allows better use methods predict latent variables leads large R objects even models moderate size complexity. save_all_pars (Deprecated) flag indicate draws variables defined Stan's parameters block saved (default FALSE). Saving draws required order apply methods bridge_sampler, bayes_factor, post_prob. Can set globally current R session via \"brms.save_pars\" option (see options). init Initial values sampler. NULL (default) \"random\", Stan randomly generate initial values parameters reasonable range. 0, parameters initialized zero unconstrained space. option sometimes useful certain families, happens default random initial values cause draws essentially constant. Generally, setting init = 0 worth try, chains initialize behave well. Alternatively, init can list lists containing initial values, function (function name) generating initial values. latter options mainly implemented internal testing available users necessary. specifying initial values using list function currently parameter names must correspond names used generated Stan code (names used R). details specifying initial values can consult documentation selected backend. inits (Deprecated) Alias init. chains Number Markov chains (defaults 4). iter Number total iterations per chain (including warmup; defaults 2000). Can set globally current R session via \"brms.iter\" option (see options). warmup positive integer specifying number warmup (aka burnin) iterations. also specifies number iterations used stepsize adaptation, warmup draws used inference. number warmup larger iter default iter/2. thin Thinning rate. Must positive integer. Set thin > 1 save memory computation time iter large. cores Number cores use executing chains parallel, defaults 1 recommend setting mc.cores option many processors hardware RAM allow (number chains). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. threads Number threads use within-chain parallelization. control threading process, threads may also brmsthreads object created threading. Within-chain parallelization experimental! recommend use experienced Stan's reduce_sum function slow running model sped means. Can set globally current R session via \"brms.threads\" option (see options). opencl platform device IDs OpenCL device use fitting using GPU support. know IDs OpenCL device, c(0,0) likely need. details, see opencl. Can set globally current R session via \"brms.opencl\" option normalize Logical. Indicates whether normalization constants included Stan code (defaults TRUE). Setting FALSE requires Stan version >= 2.25 work. FALSE, sampling efficiency may increased post processing functions bridge_sampler available. Can controlled globally current R session via `brms.normalize` option. control named list parameters control sampler's behavior. defaults NULL default values used. important control parameters discussed 'Details' section . comprehensive overview see stan. algorithm Character string naming estimation approach use. Options \"sampling\" MCMC (default), \"meanfield\" variational inference independent normal distributions, \"fullrank\" variational inference multivariate normal distribution, \"pathfinder\" pathfinder algorithm, \"laplace\" laplace approximation, \"fixed_param\" sampling fixed parameter values. Can set globally current R session via \"brms.algorithm\" option (see options). backend Character string naming package use backend fitting Stan model. Options \"rstan\" (default) \"cmdstanr\". Can set globally current R session via \"brms.backend\" option (see options). Details rstan cmdstanr packages available https://mc-stan.org/rstan/ https://mc-stan.org/cmdstanr/, respectively. Additionally \"mock\" backend available make testing brms packages depend easier. \"mock\" backend actually fitting, checks generated Stan code correctness returns whatever passed additional mock_fit argument result fit. future Logical; TRUE, future package used parallel execution chains argument cores ignored. Can set globally current R session via \"future\" option. execution type controlled via plan (see examples section ). silent Verbosity level 0 2. 1 (default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Set refresh = 0 turn well. using backend = \"rstan\" can also set open_progress = FALSE prevent opening additional progress bars. seed seed random number generation make results reproducible. NA (default), Stan set seed randomly. save_model Either NULL character string. latter case, model's Stan code saved via cat text file named string supplied save_model. stan_model_args list arguments passed rstan::stan_model backend = \"rstan\" cmdstanr::cmdstan_model backend = \"cmdstanr\", allows change models compiled. file Either NULL character string. latter case, fitted model object saved via saveRDS file named string supplied file. .rds extension added automatically. file already exists, brm load return saved model object instead refitting model. Unless specify file_refit argument well, existing files overwritten, manually remove file order refit save model existing file name. file name stored brmsfit object later usage. file_compress Logical character string, specifying one compression algorithms supported saveRDS. file argument provided, compression used saving fitted model object. file_refit Modifies fit stored via file argument re-used. Can set globally current R session via \"brms.file_refit\" option (see options). \"never\" (default) fit always loaded exists fitting skipped. \"always\" model always refitted. set \"on_change\", brms refit model model, data algorithm passed Stan differ stored file. also covers changes priors, sample_prior, stanvars, covariance structure, etc. believe false positive, can use brmsfit_needs_refit see refit deemed necessary. Refit triggered changes additional parameters fit (e.g., initial values, number iterations, control arguments, ...). known limitation refit triggered within-chain parallelization switched /. empty Logical. TRUE, Stan model created compiled corresponding 'fit' slot brmsfit object empty. useful estimated brms-created Stan model outside brms want feed back package. rename internal use . ... arguments passed Stan. backend = \"rstan\" arguments passed sampling vb. backend = \"cmdstanr\" arguments passed cmdstanr::sample cmdstanr::variational method.","code":""},{"path":"/reference/brm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"object class brmsfit, contains posterior   draws along many useful information model. Use   methods(class = \"brmsfit\") overview available methods.","code":""},{"path":"/reference/brm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"Fit generalized (non-)linear multivariate multilevel model via   full Bayesian inference using Stan. general overview provided   vignettes vignette(\"brms_overview\")   vignette(\"brms_multilevel\"). full list available vignettes   see vignette(package = \"brms\"). Formula syntax brms models Details formula syntax applied brms can found   brmsformula. Families link functions Details families supported brms can found   brmsfamily. Prior distributions Priors specified using   set_prior function. documentation   contains detailed information correctly specify priors. find   parameters parameter classes priors can defined, use   default_prior. Default priors chosen   non weakly informative influence results   negligible usually worry . However,   getting familiar Bayesian statistics, recommend   start thinking reasonable informative priors model   parameters: Nearly always, least prior information   available can used improve inference. Adjusting sampling behavior Stan addition choosing number iterations, warmup draws,   chains, users can control behavior NUTS sampler, using   control argument. important reason use control   decrease (eliminate best) number divergent transitions   cause bias obtained posterior draws. Whenever see   warning \"x divergent transitions warmup.\"   really think increasing adapt_delta. , write   control = list(adapt_delta = <x>), <x> usually   value 0.8 (current default) 1. Increasing   adapt_delta slow sampler decrease number   divergent transitions threatening validity posterior   draws. Another problem arises depth tree evaluated   iteration exceeded. less common divergent   transitions, may also bias posterior draws. happens,   Stan throw warning suggesting increase   max_treedepth, can accomplished writing control =   list(max_treedepth = <x>) positive integer <x>   usually larger current default 10. details   control argument see stan.","code":""},{"path":"/reference/brm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"Paul-Christian Buerkner (2017). brms: R Package Bayesian Multilevel Models Using Stan. Journal Statistical Software, 80(1), 1-28. doi:10.18637/jss.v080.i01 Paul-Christian Buerkner (2018). Advanced Bayesian Multilevel Modeling R Package brms. R Journal. 10(1), 395–411. doi:10.32614/RJ-2018-017","code":""},{"path":[]},{"path":"/reference/brm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"Paul-Christian Buerkner paul.buerkner@gmail.com","code":""},{"path":"/reference/brm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian Generalized (Non-)Linear Multivariate Multilevel Models — brm","text":"","code":"if (FALSE) { # \\dontrun{ # Poisson regression for the number of seizures in epileptic patients fit1 <- brm(   count ~ zBase * Trt + (1|patient),   data = epilepsy, family = poisson(),   prior = prior(normal(0, 10), class = b) +     prior(cauchy(0, 2), class = sd) )  # generate a summary of the results summary(fit1)  # plot the MCMC chains as well as the posterior distributions plot(fit1)  # predict responses based on the fitted model head(predict(fit1))  # plot conditional effects for each predictor plot(conditional_effects(fit1), ask = FALSE)  # investigate model fit loo(fit1) pp_check(fit1)   # Ordinal regression modeling patient's rating of inhaler instructions # category specific effects are estimated for variable 'treat' fit2 <- brm(rating ~ period + carry + cs(treat),             data = inhaler, family = sratio(\"logit\"),             prior = set_prior(\"normal(0,5)\"), chains = 2) summary(fit2) plot(fit2, ask = FALSE) WAIC(fit2)   # Survival regression modeling the time between the first # and second recurrence of an infection in kidney patients. fit3 <- brm(time | cens(censored) ~ age * sex + disease + (1|patient),             data = kidney, family = lognormal()) summary(fit3) plot(fit3, ask = FALSE) plot(conditional_effects(fit3), ask = FALSE)   # Probit regression using the binomial family ntrials <- sample(1:10, 100, TRUE) success <- rbinom(100, size = ntrials, prob = 0.4) x <- rnorm(100) data4 <- data.frame(ntrials, success, x) fit4 <- brm(success | trials(ntrials) ~ x, data = data4,             family = binomial(\"probit\")) summary(fit4)   # Non-linear Gaussian model fit5 <- brm(   bf(cum ~ ult * (1 - exp(-(dev/theta)^omega)),      ult ~ 1 + (1|AY), omega ~ 1, theta ~ 1,      nl = TRUE),   data = loss, family = gaussian(),   prior = c(     prior(normal(5000, 1000), nlpar = \"ult\"),     prior(normal(1, 2), nlpar = \"omega\"),     prior(normal(45, 10), nlpar = \"theta\")   ),   control = list(adapt_delta = 0.9) ) summary(fit5) conditional_effects(fit5)   # Normal model with heterogeneous variances data_het <- data.frame(   y = c(rnorm(50), rnorm(50, 1, 2)),   x = factor(rep(c(\"a\", \"b\"), each = 50)) ) fit6 <- brm(bf(y ~ x, sigma ~ 0 + x), data = data_het) summary(fit6) plot(fit6) conditional_effects(fit6)  # extract estimated residual SDs of both groups sigmas <- exp(as.data.frame(fit6, variable = \"^b_sigma_\", regex = TRUE)) ggplot(stack(sigmas), aes(values)) +   geom_density(aes(fill = ind))   # Quantile regression predicting the 25%-quantile fit7 <- brm(bf(y ~ x, quantile = 0.25), data = data_het,             family = asym_laplace()) summary(fit7) conditional_effects(fit7)  # use the future package for more flexible parallelization library(future) plan(multisession, workers = 4) fit7 <- update(fit7, future = TRUE)   # fit a model manually via rstan scode <- stancode(count ~ Trt, data = epilepsy) sdata <- standata(count ~ Trt, data = epilepsy) stanfit <- rstan::stan(model_code = scode, data = sdata) # feed the Stan model back into brms fit8 <- brm(count ~ Trt, data = epilepsy, empty = TRUE) fit8$fit <- stanfit fit8 <- rename_pars(fit8) summary(fit8) } # }"},{"path":"/reference/brm_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the same brms model on multiple datasets — brm_multiple","title":"Run the same brms model on multiple datasets — brm_multiple","text":"Run brms model multiple datasets combine results one fitted model object. useful particular multiple missing value imputation, model fitted multiple imputed data sets. Models can run parallel using future package.","code":""},{"path":"/reference/brm_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the same brms model on multiple datasets — brm_multiple","text":"","code":"brm_multiple(   formula,   data,   family = gaussian(),   prior = NULL,   data2 = NULL,   autocor = NULL,   cov_ranef = NULL,   sample_prior = c(\"no\", \"yes\", \"only\"),   sparse = NULL,   knots = NULL,   stanvars = NULL,   stan_funs = NULL,   silent = 1,   recompile = FALSE,   combine = TRUE,   fit = NA,   algorithm = getOption(\"brms.algorithm\", \"sampling\"),   seed = NA,   file = NULL,   file_compress = TRUE,   file_refit = getOption(\"brms.file_refit\", \"never\"),   ... )"},{"path":"/reference/brm_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the same brms model on multiple datasets — brm_multiple","text":"formula object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data list data.frames used fit separate model. Alternatively, mids object mice package. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. prior One brmsprior objects created set_prior related functions combined using c method + operator. See also default_prior help. data2 list named lists used fit separate model. named lists contains objects representing data passed via argument data (see brm examples). length outer list match length list passed data argument. autocor (Deprecated) optional cor_brms object describing correlation structure within response variable (.e., 'autocorrelation'). See documentation cor_brms description available correlation structures. Defaults NULL, corresponding correlations. multivariate models, autocor might also list autocorrelation structures. now recommend specify autocorrelation terms directly within formula. See brmsformula details. cov_ranef (Deprecated) list matrices proportional (within) covariance structure group-level effects. names matrices correspond columns data used grouping factors. levels grouping factor appear rownames corresponding matrix. argument can used, among others model pedigrees phylogenetic effects. now recommended specify matrices formula interface using gr related functions. See vignette(\"brms_phylogenetics\") details. sample_prior Indicate draws priors drawn additionally posterior draws. Options \"\" (default), \"yes\", \"\". Among others, draws can used calculate Bayes factors point hypotheses via hypothesis. Please note improper priors sampled, including default improper priors used brm. See set_prior set (proper) priors. Please also note prior draws overall intercept obtained default technical reasons. See brmsformula obtain prior draws intercept. sample_prior set \"\", draws drawn solely priors ignoring likelihood, allows among others generate draws prior predictive distribution. case, parameters must proper priors. sparse (Deprecated) Logical; indicates whether population-level design matrices treated sparse (defaults FALSE). design matrices many zeros, can considerably reduce required memory. Sampling speed currently improved even slightly decreased. now recommended use sparse argument brmsformula related functions. knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. stanvars optional stanvars object generated function stanvar define additional variables use Stan's program blocks. stan_funs (Deprecated) optional character string containing self-defined  Stan functions, included functions block generated Stan code. now recommended use stanvars argument purpose instead. silent Verbosity level 0 2. 1 (default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Set refresh = 0 turn well. using backend = \"rstan\" can also set open_progress = FALSE prevent opening additional progress bars. recompile Logical, indicating whether Stan model recompiled every imputed data set. Defaults FALSE. NULL, brm_multiple tries figure internally, recompilation necessary, example data-dependent priors changed. Using default recompilation fine cases. combine Logical; Indicates fitted models combined single fitted model object via combine_models. Defaults TRUE. fit instance S3 class brmsfit_multiple derived previous fit; defaults NA. fit class brmsfit_multiple, compiled model associated fitted result re-used arguments modifying model code data ignored. recommended use argument directly, call update method, instead. algorithm Character string naming estimation approach use. Options \"sampling\" MCMC (default), \"meanfield\" variational inference independent normal distributions, \"fullrank\" variational inference multivariate normal distribution, \"pathfinder\" pathfinder algorithm, \"laplace\" laplace approximation, \"fixed_param\" sampling fixed parameter values. Can set globally current R session via \"brms.algorithm\" option (see options). seed seed random number generation make results reproducible. NA (default), Stan set seed randomly. file Either NULL character string. latter case, fitted model object saved via saveRDS file named string supplied file. .rds extension added automatically. file already exists, brm load return saved model object instead refitting model. Unless specify file_refit argument well, existing files overwritten, manually remove file order refit save model existing file name. file name stored brmsfit object later usage. file_compress Logical character string, specifying one compression algorithms supported saveRDS. file argument provided, compression used saving fitted model object. file_refit Modifies fit stored via file argument re-used. Can set globally current R session via \"brms.file_refit\" option (see options). \"never\" (default) fit always loaded exists fitting skipped. \"always\" model always refitted. set \"on_change\", brms refit model model, data algorithm passed Stan differ stored file. also covers changes priors, sample_prior, stanvars, covariance structure, etc. believe false positive, can use brmsfit_needs_refit see refit deemed necessary. Refit triggered changes additional parameters fit (e.g., initial values, number iterations, control arguments, ...). known limitation refit triggered within-chain parallelization switched /. ... arguments passed brm.","code":""},{"path":"/reference/brm_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the same brms model on multiple datasets — brm_multiple","text":"combine = TRUE brmsfit_multiple object,   inherits class brmsfit behaves essentially .   combine = FALSE list brmsfit objects.","code":""},{"path":"/reference/brm_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run the same brms model on multiple datasets — brm_multiple","text":"combined model may issue false positive convergence warnings,   MCMC chains corresponding different datasets may necessarily   overlap, even original models converge. find   whether original models converged, subset draws belonging   individual models run convergence diagnostics.   See Examples details.","code":""},{"path":"/reference/brm_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the same brms model on multiple datasets — brm_multiple","text":"","code":"if (FALSE) { # \\dontrun{ library(mice) m <- 5 imp <- mice(nhanes2, m = m)  # fit the model using mice and lm fit_imp1 <- with(lm(bmi ~ age + hyp + chl), data = imp) summary(pool(fit_imp1))  # fit the model using brms fit_imp2 <- brm_multiple(bmi ~ age + hyp + chl, data = imp, chains = 1) summary(fit_imp2) plot(fit_imp2, variable = \"^b_\", regex = TRUE)  # investigate convergence of the original models library(posterior) draws <- as_draws_array(fit_imp2) # every dataset has just one chain here draws_per_dat <- lapply(1:m, \\(i) subset_draws(draws, chain = i)) lapply(draws_per_dat, summarise_draws, default_convergence_measures())  # use the future package for parallelization library(future) plan(multisession, workers = 4) fit_imp3 <- brm_multiple(bmi ~ age + hyp + chl, data = imp, chains = 1) summary(fit_imp3) } # }"},{"path":"/reference/brms-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Regression Models using 'Stan' — brms-package","title":"Bayesian Regression Models using 'Stan' — brms-package","text":"Stan Development Team brms package provides interface fit Bayesian generalized multivariate (non-)linear multilevel models using Stan, C++ package obtaining full Bayesian inference (see https://mc-stan.org/). formula syntax extended version syntax applied lme4 package provide familiar simple interface performing regression analyses.","code":""},{"path":"/reference/brms-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Regression Models using 'Stan' — brms-package","text":"main function brms brm, uses formula syntax specify wide range complex Bayesian models (see brmsformula details). Based supplied formulas, data, additional information, writes Stan code fly via stancode, prepares data via standata fits model using Stan. Subsequently, large number post-processing methods can applied: get overview estimated parameters, summary conditional_effects perfectly suited. Detailed visual analyses can performed applying pp_check stanplot methods, rely bayesplot package. Model comparisons can done via loo waic, make use loo package well via bayes_factor relies bridgesampling package. full list methods apply, type methods(class = \"brmsfit\"). brms based Stan, C++ compiler required. program Rtools (available https://cran.r-project.org/bin/windows/Rtools/) comes C++ compiler Windows. Mac, use Xcode. instructions get compilers running, see prerequisites section RStan-Getting-Started page. comparing packages fitting multilevel models brms, keep mind latter needs compile models actually fitting , require 20 40 seconds depending machine, operating system overall model complexity. Thus, fitting smaller models may relatively slow compilation time makes majority whole running time. larger / complex models however, fitting take several minutes even hours, compilation time make much difference models. See vignette(\"brms_overview\") vignette(\"brms_multilevel\") general introduction overview brms. full list available vignettes, type vignette(package = \"brms\").","code":""},{"path":"/reference/brms-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian Regression Models using 'Stan' — brms-package","text":"Paul-Christian Buerkner (2017). brms: R Package Bayesian Multilevel Models Using Stan. Journal Statistical Software, 80(1), 1-28. doi:10.18637/jss.v080.i01 Paul-Christian Buerkner (2018). Advanced Bayesian Multilevel Modeling R Package brms. R Journal. 10(1), 395–411. doi:10.32614/RJ-2018-017 Stan Development Team. Stan Modeling Language User's Guide Reference Manual. https://mc-stan.org/users/documentation/. Stan Development Team (2020). RStan: R interface Stan. R package version 2.21.2. https://mc-stan.org/","code":""},{"path":[]},{"path":"/reference/brms-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Regression Models using 'Stan' — brms-package","text":"Maintainer: Paul-Christian Bürkner paul.buerkner@gmail.com contributors: Jonah Gabry [contributor] Sebastian Weber [contributor] Andrew Johnson [contributor] Martin Modrak [contributor] Hamada S. Badr [contributor] Frank Weber [contributor] Aki Vehtari [contributor] Mattan S. Ben-Shachar [contributor] Hayden Rabel [contributor] Simon C. Mills [contributor] Stephen Wild [contributor] Ven Popov [contributor] Ioannis Kosmidis [contributor] Ben Schneider [contributor] Noa Kallioinen [contributor] Wellington J. Silva [contributor] Luiz Carvalho [contributor]","code":""},{"path":"/reference/brmsfamily.html","id":null,"dir":"Reference","previous_headings":"","what":"Special Family Functions for brms Models — brmsfamily","title":"Special Family Functions for brms Models — brmsfamily","text":"Family objects provide convenient way specify details models used many model fitting functions. family functions presented use brms **** work model fitting functions glm glmer. However, standard family functions described family work brms. can also specify custom families use brms custom_family function.","code":""},{"path":"/reference/brmsfamily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special Family Functions for brms Models — brmsfamily","text":"","code":"brmsfamily(   family,   link = NULL,   link_sigma = \"log\",   link_shape = \"log\",   link_nu = \"logm1\",   link_phi = \"log\",   link_kappa = \"log\",   link_beta = \"log\",   link_zi = \"logit\",   link_hu = \"logit\",   link_zoi = \"logit\",   link_coi = \"logit\",   link_disc = \"log\",   link_bs = \"log\",   link_ndt = \"log\",   link_bias = \"logit\",   link_xi = \"log1p\",   link_alpha = \"identity\",   link_quantile = \"logit\",   threshold = \"flexible\",   refcat = NULL )  student(link = \"identity\", link_sigma = \"log\", link_nu = \"logm1\")  bernoulli(link = \"logit\")  beta_binomial(link = \"logit\", link_phi = \"log\")  negbinomial(link = \"log\", link_shape = \"log\")  geometric(link = \"log\")  lognormal(link = \"identity\", link_sigma = \"log\")  shifted_lognormal(link = \"identity\", link_sigma = \"log\", link_ndt = \"log\")  skew_normal(link = \"identity\", link_sigma = \"log\", link_alpha = \"identity\")  exponential(link = \"log\")  weibull(link = \"log\", link_shape = \"log\")  frechet(link = \"log\", link_nu = \"logm1\")  gen_extreme_value(link = \"identity\", link_sigma = \"log\", link_xi = \"log1p\")  exgaussian(link = \"identity\", link_sigma = \"log\", link_beta = \"log\")  wiener(   link = \"identity\",   link_bs = \"log\",   link_ndt = \"log\",   link_bias = \"logit\" )  Beta(link = \"logit\", link_phi = \"log\")  xbeta(link = \"logit\", link_phi = \"log\", link_kappa = \"log\")  dirichlet(link = \"logit\", link_phi = \"log\", refcat = NULL)  logistic_normal(link = \"identity\", link_sigma = \"log\", refcat = NULL)  von_mises(link = \"tan_half\", link_kappa = \"log\")  asym_laplace(link = \"identity\", link_sigma = \"log\", link_quantile = \"logit\")  cox(link = \"log\")  hurdle_poisson(link = \"log\", link_hu = \"logit\")  hurdle_negbinomial(link = \"log\", link_shape = \"log\", link_hu = \"logit\")  hurdle_gamma(link = \"log\", link_shape = \"log\", link_hu = \"logit\")  hurdle_lognormal(link = \"identity\", link_sigma = \"log\", link_hu = \"logit\")  hurdle_cumulative(   link = \"logit\",   link_hu = \"logit\",   link_disc = \"log\",   threshold = \"flexible\" )  zero_inflated_beta(link = \"logit\", link_phi = \"log\", link_zi = \"logit\")  zero_one_inflated_beta(   link = \"logit\",   link_phi = \"log\",   link_zoi = \"logit\",   link_coi = \"logit\" )  zero_inflated_poisson(link = \"log\", link_zi = \"logit\")  zero_inflated_negbinomial(link = \"log\", link_shape = \"log\", link_zi = \"logit\")  zero_inflated_binomial(link = \"logit\", link_zi = \"logit\")  zero_inflated_beta_binomial(   link = \"logit\",   link_phi = \"log\",   link_zi = \"logit\" )  categorical(link = \"logit\", refcat = NULL)  multinomial(link = \"logit\", refcat = NULL)  dirichlet_multinomial(link = \"logit\", link_phi = \"log\", refcat = NULL)  cumulative(link = \"logit\", link_disc = \"log\", threshold = \"flexible\")  sratio(link = \"logit\", link_disc = \"log\", threshold = \"flexible\")  cratio(link = \"logit\", link_disc = \"log\", threshold = \"flexible\")  acat(link = \"logit\", link_disc = \"log\", threshold = \"flexible\")"},{"path":"/reference/brmsfamily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special Family Functions for brms Models — brmsfamily","text":"family character string naming distribution family response variable used model. Currently, following families supported: gaussian, student, binomial, bernoulli, beta-binomial, poisson, negbinomial, geometric, Gamma, skew_normal, lognormal, shifted_lognormal, exgaussian, wiener, inverse.gaussian, exponential, weibull, frechet, Beta, dirichlet, von_mises, asym_laplace, gen_extreme_value, categorical, multinomial, dirichlet_multinomial, cumulative, cratio, sratio, acat, hurdle_poisson, hurdle_negbinomial, hurdle_gamma, hurdle_lognormal, hurdle_cumulative, zero_inflated_binomial, zero_inflated_beta_binomial, zero_inflated_beta, zero_inflated_negbinomial, zero_inflated_poisson, zero_one_inflated_beta, xbeta. link specification model link function. can name/expression character string. See 'Details' section information link functions supported family. link_sigma Link auxiliary parameter sigma predicted. link_shape Link auxiliary parameter shape predicted. link_nu Link auxiliary parameter nu predicted. link_phi Link auxiliary parameter phi predicted. link_kappa Link auxiliary parameter kappa predicted. link_beta Link auxiliary parameter beta predicted. link_zi Link auxiliary parameter zi predicted. link_hu Link auxiliary parameter hu predicted. link_zoi Link auxiliary parameter zoi predicted. link_coi Link auxiliary parameter coi predicted. link_disc Link auxiliary parameter disc predicted. link_bs Link auxiliary parameter bs predicted. link_ndt Link auxiliary parameter ndt predicted. link_bias Link auxiliary parameter bias predicted. link_xi Link auxiliary parameter xi predicted. link_alpha Link auxiliary parameter alpha predicted. link_quantile Link auxiliary parameter quantile predicted. threshold character string indicating type thresholds (.e. intercepts) used ordinal model. \"flexible\" provides standard unstructured thresholds, \"equidistant\" restricts distance consecutive thresholds value, \"sum_to_zero\" ensures thresholds sum zero. refcat Optional name reference response category used categorical, multinomial, dirichlet, dirichlet_multinomial logistic_normal models. NULL (default), first category used reference. NA, categories predicted, requires strong priors carefully specified predictor terms order lead identified model.","code":""},{"path":"/reference/brmsfamily.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Special Family Functions for brms Models — brmsfamily","text":", list common use cases different families.   list ment exhaustive. Family gaussian can used linear regression. Family student can used robust linear regression   less influenced outliers. Family skew_normal can handle skewed responses linear   regression. Families poisson, negbinomial, geometric   can used regression unbounded count data. Families bernoulli, binomial, beta_binomial   can used binary regression (.e., commonly logistic   regression). Families categorical, multinomial   dirichlet_multinomial can used multi-logistic regression   two possible outcomes. Families cumulative, cratio ('continuation ratio'),   sratio ('stopping ratio'), acat ('adjacent category')   leads ordinal regression. Families Gamma, weibull, exponential,   lognormal, frechet, inverse.gaussian, cox   (Cox proportional hazards model) can used (among others)   time--event regression also known survival regression. Families weibull, frechet, gen_extreme_value   ('generalized extreme value') allow modeling extremes. Families beta, dirichlet, logistic_normal   can used model responses representing rates probabilities. Family xbeta extends beta family   support [0, 1] responses exact 0s /   1s, response takes values 0, 1,   (0, 1) according single process.   merit assuming 0 1 values arise different   processes (0, 1) values,   zero_inflated_beta, zero_one_inflated_beta families   provide flexibility.  details see Kosmidis & Zeileis   (2024). Family asym_laplace allows quantile regression fixing   auxiliary quantile parameter quantile interest. Family exgaussian ('exponentially modified Gaussian')   shifted_lognormal especially suited model reaction times. Family wiener provides implementation Wiener   diffusion model. family, main formula predicts drift   parameter 'delta' parameters modeled auxiliary parameters   (see brmsformula details). Families hurdle_poisson, hurdle_negbinomial,   hurdle_gamma, hurdle_lognormal, zero_inflated_poisson,   zero_inflated_negbinomial, zero_inflated_binomial,   zero_inflated_beta_binomial, zero_inflated_beta,   zero_one_inflated_beta, hurdle_cumulative allow estimate   zero-inflated hurdle models. models can helpful   many zeros data (ones case one-inflated models)   explained primary distribution response. , list possible links family.  first   link mentioned family default. Families gaussian, student,   skew_normal, exgaussian, asym_laplace,   gen_extreme_value support links (names)   identity, log, inverse,   softplus. Families poisson, negbinomial, geometric,   zero_inflated_poisson, zero_inflated_negbinomial,   hurdle_poisson, hurdle_negbinomial support   log, identity, sqrt, softplus. Families binomial, bernoulli,   beta_binomial, zero_inflated_binomial,   zero_inflated_beta_binomial, Beta,   zero_inflated_beta, zero_one_inflated_beta,   xbeta support logit, probit,   probit_approx, cloglog, cauchit,   identity, log. Families cumulative, cratio, sratio,   acat, hurdle_cumulative support logit,   probit, probit_approx, cloglog, cauchit. Families categorical, multinomial,   dirichlet_multinomial dirichlet support logit. Families Gamma, weibull, exponential,   frechet, hurdle_gamma support   log, identity, inverse, softplus. Families lognormal hurdle_lognormal   support identity inverse. Family logistic_normal supports identity. Family inverse.gaussian supports 1/mu^2,   inverse, identity, log, softplus. Family von_mises supports tan_half   identity. Family cox supports log, identity,   softplus proportional hazards parameter. Family wiener supports identity, log,   softplus main parameter represents   drift rate. Please note calling Gamma family   function stats package, default link   inverse instead log although latter default   brms. Also, using family functions gaussian,   binomial, poisson, Gamma stats   package (see family), special link functions   softplus cauchit work. case,   use brmsfamily specify family corresponding link   function.","code":""},{"path":"/reference/brmsfamily.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Special Family Functions for brms Models — brmsfamily","text":"Kosmidis , Zeileis (2024). Extended-Support Beta Regression [0, 1] Responses. arXiv Preprint. doi:10.48550/arXiv.2409.07233","code":""},{"path":[]},{"path":"/reference/brmsfamily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Special Family Functions for brms Models — brmsfamily","text":"","code":"# create a family object  (fam1 <- student(\"log\")) #>  #> Family: student  #> Link function: log  #>   # alternatively use the brmsfamily function  (fam2 <- brmsfamily(\"student\", \"log\")) #>  #> Family: student  #> Link function: log  #>   # both leads to the same object  identical(fam1, fam2) #> [1] FALSE"},{"path":"/reference/brmsfit-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class brmsfit of models fitted with the brms package — brmsfit-class","title":"Class brmsfit of models fitted with the brms package — brmsfit-class","text":"Models fitted brms package represented brmsfit object, contains posterior draws (samples), model formula, Stan code, relevant data, information.","code":""},{"path":"/reference/brmsfit-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class brmsfit of models fitted with the brms package — brmsfit-class","text":"See methods(class = \"brmsfit\") overview available methods.","code":""},{"path":"/reference/brmsfit-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class brmsfit of models fitted with the brms package — brmsfit-class","text":"formula brmsformula object. data data.frame containing variables used model. data2 list data objects passed via data. prior brmsprior object containing information priors used model. stanvars stanvars object. model model code Stan language. exclude names parameters draws saved. algorithm name algorithm used fit model. backend name backend used fit model. threads object class `brmsthreads` created threading. opencl object class `brmsopencl` created opencl. stan_args Named list additional control arguments passed Stan backend directly. fit object class stanfit among others containing posterior draws. basis object contains small subset Stan data created fitting time, needed process new data correctly. criteria empty list adding model fit criteria estimation model. file Optional name file model object stored loaded . version versions brms rstan model fitted. family (Deprecated) brmsfamily object. autocor (Deprecated) cor_brms object containing autocorrelation structure specified. ranef (Deprecated) data.frame containing group-level structure. cov_ranef (Deprecated) list customized group-level covariance matrices. stan_funs (Deprecated) character string length one NULL. data.name (Deprecated) name data specified user.","code":""},{"path":[]},{"path":"/reference/brmsfit_needs_refit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if cached fit can be used. — brmsfit_needs_refit","title":"Check if cached fit can be used. — brmsfit_needs_refit","text":"Checks whether given cached fit can used without refitting file_refit = \"on_change\" used. function internal exposed facilitate debugging problems cached fits. function may change removed future versions scripts use .","code":""},{"path":"/reference/brmsfit_needs_refit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if cached fit can be used. — brmsfit_needs_refit","text":"","code":"brmsfit_needs_refit(   fit,   sdata = NULL,   scode = NULL,   data = NULL,   algorithm = NULL,   silent = FALSE,   verbose = FALSE )"},{"path":"/reference/brmsfit_needs_refit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if cached fit can be used. — brmsfit_needs_refit","text":"fit Old brmsfit object (e.g., loaded file). sdata New Stan data (result call standata). Pass NULL avoid data check. scode New Stan code (result call stancode). Pass NULL avoid code check. data New data check consistency factor level names. Pass NULL avoid data check. algorithm New algorithm. Pass NULL avoid algorithm check. silent Logical. TRUE, messages given. verbose Logical. TRUE detailed report differences printed console.","code":""},{"path":"/reference/brmsfit_needs_refit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if cached fit can be used. — brmsfit_needs_refit","text":"boolean indicating whether refit needed.","code":""},{"path":"/reference/brmsfit_needs_refit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if cached fit can be used. — brmsfit_needs_refit","text":"Use verbose = TRUE get additional info stored fit differs given data code.","code":""},{"path":"/reference/brmsformula-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear and Non-linear formulas in brms — brmsformula-helpers","title":"Linear and Non-linear formulas in brms — brmsformula-helpers","text":"Helper functions specify linear non-linear formulas use brmsformula.","code":""},{"path":"/reference/brmsformula-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear and Non-linear formulas in brms — brmsformula-helpers","text":"","code":"nlf(formula, ..., flist = NULL, dpar = NULL, resp = NULL, loop = NULL)  lf(   ...,   flist = NULL,   dpar = NULL,   resp = NULL,   center = NULL,   cmc = NULL,   sparse = NULL,   decomp = NULL )  acformula(autocor, resp = NULL)  set_nl(nl = TRUE, dpar = NULL, resp = NULL)  set_rescor(rescor = TRUE)  set_mecor(mecor = TRUE)"},{"path":"/reference/brmsformula-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear and Non-linear formulas in brms — brmsformula-helpers","text":"formula Non-linear formula distributional parameter. name distributional parameter can either specified left-hand side formula via argument dpar. ... Additional formula objects specify predictors non-linear distributional parameters. Formulas can either named directly contain names left-hand side. Alternatively, possible fix parameters certain values passing numbers character strings case arguments named provide parameter names. See 'Details' information. flist Optional list formulas, treated way formulas passed via ... argument. dpar Optional character string specifying distributional parameter formulas passed via ... flist belong. resp Optional character string specifying response variable formulas passed via ... flist belong. relevant multivariate models. loop Logical; used non-linear models. Indicates computation non-linear formula done inside (TRUE) outside (FALSE) loop observations. Defaults TRUE. center Logical; Indicates population-level design matrix centered, usually increases sampling efficiency. See 'Details' section information. Defaults TRUE distributional parameters FALSE non-linear parameters. cmc Logical; Indicates whether automatic cell-mean coding enabled removing intercept adding 0 right-hand model formulas. Defaults TRUE mirror behavior standard R formula parsing. sparse Logical; indicates whether population-level design matrices treated sparse (defaults FALSE). design matrices many zeros, can considerably reduce required memory. Sampling speed currently improved even slightly decreased. decomp Optional name decomposition used population-level design matrix. Defaults NULL decomposition. options currently available \"QR\" QR decomposition helps fitting models highly correlated predictors. autocor one sided formula containing autocorrelation terms. none autocorrelation terms autocor silently ignored. nl Logical; Indicates whether formula treated specifying non-linear model. default, formula treated ordinary linear model formula. rescor Logical; Indicates residual correlation response variables modeled. Currently possible multivariate gaussian student models. relevant multivariate models. mecor Logical; Indicates correlations latent variables defined terms modeled. Defaults TRUE.","code":""},{"path":"/reference/brmsformula-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear and Non-linear formulas in brms — brmsformula-helpers","text":"lf nlf list can   passed brmsformula added   existing brmsformula mvbrmsformula object.   set_nl set_rescor logical value can   added existing brmsformula mvbrmsformula object.","code":""},{"path":[]},{"path":"/reference/brmsformula-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear and Non-linear formulas in brms — brmsformula-helpers","text":"","code":"# add more formulas to the model bf(y ~ 1) +   nlf(sigma ~ a * exp(b * x)) +   lf(a ~ x, b ~ z + (1|g)) +   gaussian() #> y ~ 1  #> sigma ~ a * exp(b * x) #> a ~ x #> b ~ z + (1 | g)  # specify 'nl' later on bf(y ~ a * inv_logit(x * b)) +   lf(a + b ~ z) +   set_nl(TRUE) #> y ~ a * inv_logit(x * b)  #> a ~ z #> b ~ z  # specify a multivariate model bf(y1 ~ x + (1|g)) +   bf(y2 ~ z) +   set_rescor(TRUE) #> y1 ~ x + (1 | g)  #> y2 ~ z   # add autocorrelation terms bf(y ~ x) + acformula(~ arma(p = 1, q = 1) + car(W)) #> y ~ x  #> autocor ~ arma(p = 1, q = 1) + car(W)"},{"path":"/reference/brmsformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a model formula for use in brms — brmsformula","title":"Set up a model formula for use in brms — brmsformula","text":"Set model formula use brms package allowing define (potentially non-linear) additive multilevel models parameters assumed response distribution.","code":""},{"path":"/reference/brmsformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a model formula for use in brms — brmsformula","text":"","code":"brmsformula(   formula,   ...,   flist = NULL,   family = NULL,   autocor = NULL,   nl = NULL,   loop = NULL,   center = NULL,   cmc = NULL,   sparse = NULL,   decomp = NULL,   unused = NULL )"},{"path":"/reference/brmsformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a model formula for use in brms — brmsformula","text":"formula object class formula (one can coerced class): symbolic description model fitted. details model specification given 'Details'. ... Additional formula objects specify predictors non-linear distributional parameters. Formulas can either named directly contain names left-hand side. Alternatively, possible fix parameters certain values passing numbers character strings case arguments named provide parameter names. See 'Details' information. flist Optional list formulas, treated way formulas passed via ... argument. family argument brm. family specified brmsformula, overwrite value specified functions. autocor optional formula contains autocorrelation terms described autocor-terms alternatively cor_brms object (deprecated). autocor specified brmsformula, overwrite value specified functions. nl Logical; Indicates whether formula treated specifying non-linear model. default, formula treated ordinary linear model formula. loop Logical; used non-linear models. Indicates computation non-linear formula done inside (TRUE) outside (FALSE) loop observations. Defaults TRUE. center Logical; Indicates population-level design matrix centered, usually increases sampling efficiency. See 'Details' section information. Defaults TRUE distributional parameters FALSE non-linear parameters. cmc Logical; Indicates whether automatic cell-mean coding enabled removing intercept adding 0 right-hand model formulas. Defaults TRUE mirror behavior standard R formula parsing. sparse Logical; indicates whether population-level design matrices treated sparse (defaults FALSE). design matrices many zeros, can considerably reduce required memory. Sampling speed currently improved even slightly decreased. decomp Optional name decomposition used population-level design matrix. Defaults NULL decomposition. options currently available \"QR\" QR decomposition helps fitting models highly correlated predictors. unused optional formula contains variables unused model still stored model's data frame. can useful, example, variables required post-processing model.","code":""},{"path":"/reference/brmsformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a model formula for use in brms — brmsformula","text":"object class brmsformula,   essentially list containing model   formulas well additional information.","code":""},{"path":"/reference/brmsformula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up a model formula for use in brms — brmsformula","text":"General formula structure formula argument accepts formulas following syntax: response | aterms ~ pterms + (gterms | group) pterms part contains effects assumed   across observations. call 'population-level' 'overall' effects,   (adopting frequentist vocabulary) 'fixed' effects. optional   gterms part may contain effects assumed vary across   grouping variables specified group. call 'group-level'   'varying' effects, (adopting frequentist vocabulary) 'random' effects,   although latter name misleading Bayesian context.   details type vignette(\"brms_overview\")   vignette(\"brms_multilevel\"). Group-level terms Multiple grouping factors multiple group-level effects   possible. (course can also run models without group-level   effects.) Instead | may use || grouping terms   prevent correlations modeled. Equivalently, cor   argument gr function can used purpose,   example, (1 + x || g) equivalent   (1 + x | gr(g, cor = FALSE)). also possible model different group-level terms   grouping factor correlated (even across different formulas, e.g.,   non-linear models) using |<ID>| instead |.   group-level terms sharing ID modeled correlated. ,   instance, one specifies terms (1+x||g) (1+z||g)   somewhere formulas passed brmsformula, correlations   corresponding group-level effects estimated.   example, variable data just symbol   indicate correlations multiple group-level terms. Equivalently,   id argument gr function can used well,   example, (1 + x | gr(g, id = \"\")). levels grouping factor belong different sub-populations,   may reasonable assume different covariance matrix   sub-populations. instance, variation within   treatment group within control group randomized control   trial might differ. Suppose y outcome,   x factor indicating treatment control group.   , estimate different hyper-parameters varying   effects (case varying intercept) treatment control   group via y ~ x + (1 | gr(subject, = x)). can specify multi-membership terms using mm   function. instance, multi-membership term two members   (1 | mm(g1, g2)), g1 g2   specify first second member, respectively. Moreover,   covariate x varies across levels grouping-factors   g1 g2, can save respective covariate values   variables x1 x2 model varying   effect (1 + mmc(x1, x2) | mm(g1, g2)). Special predictor terms Flexible non-linear smooth terms can modeled using s   t2 functions pterms part   model formula. allows fit generalized additive mixed   models (GAMMs) brms. implementation similar   used gamm4 package. details model class   see gam gamm. Gaussian process terms can fitted using gp   function pterms part model formula. Similar   smooth terms, Gaussian processes can used model complex non-linear   relationships, instance temporal spatial autocorrelation.   However, computationally demanding thus recommended   large datasets approximations need used. pterms gterms parts may contain four non-standard   effect types namely monotonic, measurement error, missing value,   category specific effects, can specified using terms   form mo(predictor), (predictor, sd_predictor),   mi(predictor), cs(<predictors>), respectively.   Category specific effects can estimated   ordinal models explained detail package's   main vignette (type vignette(\"brms_overview\")).   three effect types explained following. monotonic predictor must either integer valued ordered factor,   first difference ordinary continuous predictor.   importantly, predictor categories (integers) assumed   equidistant respect effect response variable.   Instead, distance adjacent predictor categories (integers)   estimated data may vary across categories.   realized parameterizing follows:   One parameter takes care direction size effect similar   ordinary regression parameter, additional parameter vector   estimates normalized distances consecutive predictor categories.   main application monotonic effects ordinal predictors   can way modeled without (falsely) treating continuous   unordered categorical predictors. details examples   see vignette(\"brms_monotonic\"). Quite often, predictors measured naturally contain   measurement error. Although researchers well aware problem,   measurement error predictors ignored   regression analyses, possibly packages allow   modeling . Notably, measurement error can handled   structural equation models, many general regression models   (featured brms) transferred   SEM framework. brms, effects noise-free predictors   can modeled using ('measurement error') function.   , say, y response variable   x measured predictor known measurement error   sdx, can simply include right-hand side   model formula via y ~ (x, sdx).   can easily extended general formulas.   x2 another measured predictor corresponding error   sdx2 z predictor without error   (e.g., experimental setting), can model main effects   interactions three predictors well known manner:   y ~ (x, sdx) * (x2, sdx2) * z.   function soft deprecated favor flexible   consistent mi function (see ). variable contains missing values, corresponding rows   excluded data default (row-wise exclusion). However,   quite often want keep rows instead estimate missing values.   two approaches : () Impute missing values   model fitting instance via multiple imputation (see   brm_multiple way handle multiple imputed datasets).   (b) Impute missing values fly model fitting. latter   approach explained following. Using variable missing   values predictors requires two things, First, need specify   predictor contains missings imputed.   , say, y primary response, x   predictor missings z predictor without missings,   go y ~ mi(x) + z. Second, need model x   additional response corresponding predictors   addition term mi(). example, write   x | mi() ~ z. Measurement error may included via   sdy argument, say, x | mi(sdy = se) ~ z.   See mi examples real data. Autocorrelation terms Autocorrelation terms can directly specified inside pterms   part well. Details can found autocor-terms. Additional response information Another special brms formula syntax optional   aterms part, may contain multiple terms form   fun(<variable>) separated + providing special   information response variable. fun can replaced   either se, weights, subset, cens, trunc,   trials, cat, dec, rate, vreal,   vint. meanings explained   (see also addition-terms). families gaussian, student skew_normal,   possible specify standard errors observations, thus allowing   perform meta-analysis. Suppose variable yi contains   effect sizes studies sei corresponding   standard errors. , fixed random effects meta-analyses can   conducted using formulas yi | se(sei) ~ 1   yi | se(sei) ~ 1 + (1|study), respectively,   study variable uniquely identifying every study.   desired, meta-regression can performed via   yi | se(sei) ~ 1 + mod1 + mod2 + (1|study)   yi | se(sei) ~ 1 + mod1 + mod2 + (1 + mod1 + mod2|study),   mod1 mod2 represent moderator variables.   default, standard errors replace parameter sigma.   model sigma addition known standard errors,   set argument sigma function se TRUE,   instance, yi | se(sei, sigma = TRUE) ~ 1. families, weighted regression may performed using   weights aterms part. Internally,   implemented multiplying log-posterior values   observation corresponding weights.   Suppose variable wei contains weights   yi response variable.   , formula yi | weights(wei) ~ predictors   implements weighted regression. multivariate models, subset may used aterms   part, use different subsets data different univariate   models. instance, sub logical variable   y response one univariate models, may   write y | subset(sub) ~ predictors y   predicted observations sub evaluates   TRUE. log-linear models poisson models, rate may used   aterms part specify denominator response   expressed rate. numerator given actual response   variable distribution according family usual. Using   rate(denom) equivalent adding offset(log(denom))   linear predictor main parameter former arguably   convenient explicit. exception categorical ordinal families,   left, right, interval censoring can modeled   y | cens(censored) ~ predictors. censoring variable   (named censored example) contain values   'left', 'none', 'right', 'interval'   (equivalently -1, 0, 1, 2) indicate   corresponding observation left censored, censored, right censored,   interval censored. interval censored data, second variable   (call y2) passed cens. case,   formula structure y | cens(censored, y2) ~ predictors.   lower bounds given y, upper bounds given   y2 interval censored data. Intervals assumed open   left closed right: (y, y2]. exception categorical ordinal families,   response distribution can truncated using trunc   function addition part. response variable truncated   , say, 0 100, can specify via   yi | trunc(lb = 0, ub = 100) ~ predictors.   Instead numbers, variables data set can also passed allowing   varying truncation points across observations. Defining one   two arguments trunc leads one-sided truncation. continuous families, missing values responses can imputed   within Stan using addition term mi. mostly   useful combination mi predictor terms explained   'Special predictor terms'. families binomial zero_inflated_binomial,   addition contain variable indicating number trials   underlying observation. lme4 syntax, may write instance   cbind(success, n - success), equivalent   success | trials(n) brms syntax. number trials   constant across observations, say 10,   may also write success | trials(10).   Please note cbind() syntax work   brms expected way syntax reserved   purposes. ordinal families, aterms may contain term   thres(number) specify number thresholds (e.g,   thres(6)), equal total number response   categories - 1. given, number thresholds calculated   data. different threshold vectors used different   subsets data, gr argument can used provide   grouping variable (e.g, thres(6, gr = item), item   grouping variable). case, number thresholds can also   variable data different values per group. deprecated quasi alias thres() cat()   total number response categories (.e., number thresholds + 1) can   specified. Wiener diffusion models (family wiener) addition term   dec mandatory specify (vector ) binary decisions   corresponding reaction times. Non-zero values treated   response upper boundary diffusion process zeros   treated response lower boundary. Alternatively,   variable passed dec might also character vector   consisting 'lower' 'upper'. families support index addition term uniquely identify   observation corresponding response variable. Currently,   index primarily useful combination subset   addition mi terms. custom families, possible pass arbitrary number real   integer vectors via addition terms vreal vint,   respectively. example provided   vignette('brms_customfamilies'). pass multiple vectors   data type, provide separated commas inside single   vreal vint statement. Multiple addition terms different types may specified   time using + operator. example, formula   formula = yi | se(sei) + cens(censored) ~ 1 implies censored   meta-analytic model. addition argument disp (short dispersion)   removed version 2.0. may instead use   distributional regression approach specifying   sigma ~ 1 + offset(log(xdisp))   shape ~ 1 + offset(log(xdisp)), xdisp   variable previously passed disp. Parameterization population-level intercept default, population-level intercept (incorporated) estimated   separately part population-level parameter vector b   result, priors intercept also specified separately.   Furthermore, increase sampling efficiency, population-level design   matrix X centered around column means X_means   intercept incorporated. leads temporary bias intercept   equal <X_means, b>, <,> scalar product.   bias corrected fitting model, aware   effectively defining prior intercept centered design matrix   real intercept. can turn special handling   intercept setting argument center FALSE.   details setting priors population-level intercepts, see   set_prior. behavior can avoided using reserved   (internally generated) variable Intercept.   Instead y ~ x, may write   y ~ 0 + Intercept + x. way, priors can   defined real intercept, directly. addition,   intercept just treated ordinary population-level effect   thus priors defined b also apply .   Note parameterization may less efficient   default parameterization discussed . Formula syntax non-linear models brms, possible specify non-linear models   arbitrary complexity.   non-linear model can just specified within formula   argument. Suppose, want predict response y   predictor x, x linked y   y = alpha - beta * lambda^x, parameters   alpha, beta, lambda. certainly   non-linear model defined via   formula = y ~ alpha - beta * lambda^x (addition arguments   can added way ordinary formulas).   tell brms non-linear model,   set argument nl TRUE.   Now specify model non-linear parameters.   say just want estimate three parameters   covariates random effects. can pass   alpha + beta + lambda ~ 1 equivalently   (flexible) alpha ~ 1, beta ~ 1, lambda ~ 1   ... argument.   can, course, extended. another predictor z   observations nested within grouping factor g, may write   instance alpha ~ 1, beta ~ 1 + z + (1|g), lambda ~ 1.   formula syntax described applies well.   example, using z g   prediction beta, might also use   non-linear parameters (provided resulting model still   scientifically reasonable). default, non-linear covariates treated real vectors Stan.   However, data covariates type `integer` R (  can enforced `.integer` function), Stan type   changed integer array. way, covariates can also used   indexing purposes Stan. Non-linear models may uniquely identified / show bad convergence.   reason mandatory specify priors non-linear parameters.   instructions , see set_prior.   examples non-linear models, see vignette(\"brms_nonlinear\"). Formula syntax predicting distributional parameters also possible predict parameters response distribution   residual standard deviation sigma gaussian models   hurdle probability hu hurdle models. syntax closely resembles   non-linear parameter, instance sigma ~ x + s(z) +   (1+x|g). examples distributional models, see   vignette(\"brms_distreg\"). Parameter mu exists every family can used   alternative specifying terms formula. mu   formula given, right-hand side formula ignored.   Accordingly, specifying terms right-hand side formula   mu time deprecated. future versions,   formula might updated mu. following   distributional parameters specific families (parameters   treated non-linear parameters): sigma (residual standard   deviation scale gaussian, student,   skew_normal, lognormal exgaussian,   asym_laplace families); shape (shape parameter   Gamma, weibull, negbinomial, related zero-inflated   / hurdle families); nu (degrees freedom parameter   student frechet families); phi (precision   parameter beta, zero_inflated_beta, xbeta families);   kappa (precision parameter von_mises family);   beta (mean parameter exponential component   exgaussian family); quantile (quantile parameter   asym_laplace family); zi (zero-inflation probability);   hu (hurdle probability); zoi (zero-one-inflation   probability); coi (conditional one-inflation probability);   disc (discrimination) ordinal models; bs, ndt,   bias (boundary separation, non-decision time, initial bias   wiener diffusion model). default, distributional parameters   modeled log scale can positive logit   scale can within unit interval. Alternatively, one may fix distributional parameters certain values.   However, mainly useful models become   complicated otherwise convergence issues.   thus suggest generally careful making use option.   quantile parameter asym_laplace distribution   good example useful. fixing quantile,   one can perform quantile regression specified quantile.   instance, quantile = 0.25 allows predicting 25%-quantile.   Furthermore, bias parameter drift-diffusion models,   assumed 0.5 (.e. bias) many applications.   achieve , simply write bias = 0.5.   possible applications Cauchy distribution   special case Student-t distribution   nu = 1, geometric distribution special case   negative binomial distribution shape = 1.   Furthermore, parameter disc ('discrimination') ordinal   models fixed 1 default estimated,   may modeled distributional parameter desired   (see examples). reasons identification, 'disc'   can positive, achieved applying log-link. categorical models, distributional parameters   fixed names. Instead, named response categories   (excluding first one, serves reference category),   prefix 'mu'. , instance, categories named   cat1, cat2, cat3, distributional parameters   named mucat2 mucat3. distributional parameters currently supported brmsformula   positive (negative standard deviation precision parameter   make sense) bounded 0 1 (zero-inflated /   hurdle probabilities, quantiles, initial bias parameter   drift-diffusion models).   However, linear predictors can positive negative, thus log link   (positive parameters) logit link (probability parameters) used   default ensure distributional parameters within valid intervals.   implies , default, effects distributional parameters   estimated log / logit scale one apply inverse link   function get effects original scale.   Alternatively, possible use identity link predict parameters   original scale, directly. However, much likely lead   problems model fitting, parameter actually restricted range. See also brmsfamily overview valid link functions. Formula syntax mixture models specification mixture models closely resembles   non-mixture models. specified otherwise (see ),   mean parameters mixture components predicted   using right-hand side formula. types predictor   terms allowed non-mixture models allowed mixture models   well. Distributional parameters mixture distributions   name corresponding ordinary distributions,   number end indicate mixture component. instance,   use family mixture(gaussian, gaussian), distributional   parameters sigma1 sigma2.   Distributional parameters class can fixed value.   example, write sigma2 = \"sigma1\" make   sure components residual standard deviation,   turn estimated data. addition, two types special distributional parameters.   first named mu<ID>, allow modeling different   predictors mean parameters different mixture components.   instance, want predict mean first component   using predictor x mean second component using   predictor z, can write mu1 ~ x well mu2 ~ z.   second named theta<ID>, constitute mixing   proportions. mixing proportions fixed certain values,   internally normalized form probability vector.   one seeks predict mixing proportions,   one predicted, remaining one used   reference category identify model. -called 'softmax'   transformation applied linear predictor terms form   probability vector. information mixture models, see   documentation mixture. Formula syntax multivariate models Multivariate models may specified using mvbind notation   help mvbf function.   Suppose y1 y2 response variables   x predictor. mvbind(y1, y2) ~ x   specifies multivariate model.   effects terms specified RHS formula   assumed vary across response variables.   instance, two parameters estimated x,   one effect y1 another effect y2.   also true group-level effects. writing, instance,   mvbind(y1, y2) ~ x + (1+x|g), group-level effects   estimated separately response. model effects   correlated across responses, use ID syntax (see ).   present example, look follows:   mvbind(y1, y2) ~ x + (1+x|2|g). course, also use   value 2 ID. also possible specify different formulas different responses.   , instance, y1 predicted x y2   predicted z, write mvbf(y1 ~ x, y2 ~ z).   Alternatively, multiple brmsformula objects can added   specify joint multivariate model (see 'Examples').","code":""},{"path":[]},{"path":"/reference/brmsformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a model formula for use in brms — brmsformula","text":"","code":"# multilevel model with smoothing terms brmsformula(y ~ x1*x2 + s(z) + (1+x1|1) + (1|g2)) #> y ~ x1 * x2 + s(z) + (1 + x1 | 1) + (1 | g2)   # additionally predict 'sigma' brmsformula(y ~ x1*x2 + s(z) + (1+x1|1) + (1|g2),             sigma ~ x1 + (1|g2)) #> y ~ x1 * x2 + s(z) + (1 + x1 | 1) + (1 | g2)  #> sigma ~ x1 + (1 | g2)  # use the shorter alias 'bf' (formula1 <- brmsformula(y ~ x + (x|g))) #> y ~ x + (x | g)  (formula2 <- bf(y ~ x + (x|g))) #> y ~ x + (x | g)  # will be TRUE identical(formula1, formula2) #> [1] TRUE  # incorporate censoring bf(y | cens(censor_variable) ~ predictors) #> y | cens(censor_variable) ~ predictors   # define a simple non-linear model bf(y ~ a1 - a2^x, a1 + a2 ~ 1, nl = TRUE) #> y ~ a1 - a2^x  #> a1 ~ 1 #> a2 ~ 1  # predict a1 and a2 differently bf(y ~ a1 - a2^x, a1 ~ 1, a2 ~ x + (x|g), nl = TRUE) #> y ~ a1 - a2^x  #> a1 ~ 1 #> a2 ~ x + (x | g)  # correlated group-level effects across parameters bf(y ~ a1 - a2^x, a1 ~ 1 + (1 |2| g), a2 ~ x + (x |2| g), nl = TRUE) #> y ~ a1 - a2^x  #> a1 ~ 1 + (1 | 2 | g) #> a2 ~ x + (x | 2 | g) # alternative but equivalent way to specify the above model bf(y ~ a1 - a2^x, a1 ~ 1 + (1 | gr(g, id = 2)),    a2 ~ x + (x | gr(g, id = 2)), nl = TRUE) #> y ~ a1 - a2^x  #> a1 ~ 1 + (1 | gr(g, id = 2)) #> a2 ~ x + (x | gr(g, id = 2))  # define a multivariate model bf(mvbind(y1, y2) ~ x * z + (1|g)) #> y1 ~ x * z + (1 | g)  #> y2 ~ x * z + (1 | g)   # define a zero-inflated model # also predicting the zero-inflation part bf(y ~ x * z + (1+x|ID1|g), zi ~ x + (1|ID1|g)) #> y ~ x * z + (1 + x | ID1 | g)  #> zi ~ x + (1 | ID1 | g)  # specify a predictor as monotonic bf(y ~ mo(x) + more_predictors) #> y ~ mo(x) + more_predictors   # for ordinal models only # specify a predictor as category specific bf(y ~ cs(x) + more_predictors) #> y ~ cs(x) + more_predictors  # add a category specific group-level intercept bf(y ~ cs(x) + (cs(1)|g)) #> y ~ cs(x) + (cs(1) | g)  # specify parameter 'disc' bf(y ~ person + item, disc ~ item) #> y ~ person + item  #> disc ~ item  # specify variables containing measurement error bf(y ~ me(x, sdx)) #> y ~ me(x, sdx)   # specify predictors on all parameters of the wiener diffusion model # the main formula models the drift rate 'delta' bf(rt | dec(decision) ~ x, bs ~ x, ndt ~ x, bias ~ x) #> rt | dec(decision) ~ x  #> bs ~ x #> ndt ~ x #> bias ~ x  # fix the bias parameter to 0.5 bf(rt | dec(decision) ~ x, bias = 0.5) #> rt | dec(decision) ~ x  #> bias = 0.5  # specify different predictors for different mixture components mix <- mixture(gaussian, gaussian) #> Setting order = 'mu' for mixtures of the same family. bf(y ~ 1, mu1 ~ x, mu2 ~ z, family = mix) #> y ~ 1  #> mu1 ~ x #> mu2 ~ z  # fix both residual standard deviations to the same value bf(y ~ x, sigma2 = \"sigma1\", family = mix) #> y ~ x  #> sigma2 = sigma1  # use the '+' operator to specify models bf(y ~ 1) +   nlf(sigma ~ a * exp(b * x), a ~ x) +   lf(b ~ z + (1|g), dpar = \"sigma\") +   gaussian() #> Warning: Arguments '...' and 'flist' in nlf() will be reworked at some point. Please avoid using them if possible. #> Warning: Argument 'dpar' is no longer necessary and ignored. #> y ~ 1  #> sigma ~ a * exp(b * x) #> a ~ x #> b ~ z + (1 | g)  # specify a multivariate model using the '+' operator bf(y1 ~ x + (1|g)) +   gaussian() + cor_ar(~1|g) +   bf(y2 ~ z) + poisson() #> Warning: Using 'cor_brms' objects for 'autocor' is deprecated. Please see ?cor_brms for details. #> y1 ~ x + (1 | g)  #> autocor ~ arma(time = NA, gr = g, p = 1, q = 0, cov = FALSE) #> y2 ~ z   # specify correlated residuals of a gaussian and a poisson model form1 <- bf(y1 ~ 1 + x + (1|c|obs), sigma = 1) + gaussian() form2 <- bf(y2 ~ 1 + x + (1|c|obs)) + poisson()  # model missing values in predictors bf(bmi ~ age * mi(chl)) +   bf(chl | mi() ~ age) +   set_rescor(FALSE) #> bmi ~ age * mi(chl)  #> chl | mi() ~ age   # model sigma as a function of the mean bf(y ~ eta, nl = TRUE) +   lf(eta ~ 1 + x) +   nlf(sigma ~ tau * sqrt(eta)) +   lf(tau ~ 1) #> y ~ eta  #> eta ~ 1 + x #> sigma ~ tau * sqrt(eta) #> tau ~ 1"},{"path":"/reference/brmshypothesis.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptions of brmshypothesis Objects — brmshypothesis","title":"Descriptions of brmshypothesis Objects — brmshypothesis","text":"brmshypothesis object contains posterior draws well summary statistics non-linear hypotheses returned hypothesis.","code":""},{"path":"/reference/brmshypothesis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptions of brmshypothesis Objects — brmshypothesis","text":"","code":"# S3 method for class 'brmshypothesis' print(   x,   digits = 2,   chars = 20,   short = getOption(\"brms.short_summary\", FALSE),   ... )  # S3 method for class 'brmshypothesis' plot(   x,   nvariables = 5,   N = NULL,   ignore_prior = FALSE,   chars = 40,   colors = NULL,   theme = NULL,   ask = TRUE,   plot = TRUE,   ... )"},{"path":"/reference/brmshypothesis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptions of brmshypothesis Objects — brmshypothesis","text":"x object class brmsfit. digits Minimal number significant digits, see print.default. chars Maximum number characters hypothesis print plot. NULL, print full hypotheses. Defaults 20. short flag indicating whether provide shorter summary less informational text. Defaults FALSE. Can set globally current session via brms.short_summary option. ... Currently ignored. nvariables number variables (parameters) plotted per page. N Deprecated alias nvariables. ignore_prior flag indicating prior distributions also plotted. used priors specified relevant parameters. colors Two values specifying colors posterior prior density respectively. NULL (default) colors taken current color scheme bayesplot package. theme theme object modifying appearance plots. basic themes see ggtheme theme_default. ask Logical; indicates user prompted new page plotted. used plot TRUE. plot Logical; indicates plots plotted directly active graphic device. Defaults TRUE.","code":""},{"path":"/reference/brmshypothesis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Descriptions of brmshypothesis Objects — brmshypothesis","text":"two important elements brmshypothesis object hypothesis, data.frame containing summary estimates hypotheses, samples, data.frame containing corresponding posterior draws.","code":""},{"path":[]},{"path":"/reference/brmsterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Formulas of brms Models — brmsterms","title":"Parse Formulas of brms Models — brmsterms","text":"Parse formulas objects use brms.","code":""},{"path":"/reference/brmsterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Formulas of brms Models — brmsterms","text":"","code":"brmsterms(formula, ...)  # Default S3 method brmsterms(formula, ...)  # S3 method for class 'brmsformula' brmsterms(formula, check_response = TRUE, resp_rhs_all = TRUE, ...)  # S3 method for class 'mvbrmsformula' brmsterms(formula, ...)"},{"path":"/reference/brmsterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Formulas of brms Models — brmsterms","text":"formula object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. ... arguments passed methods. check_response Logical; Indicates whether left-hand side formula (.e. response variables addition arguments) parsed. FALSE, formula may also one-sided. resp_rhs_all Logical; Indicates whether also include response variables right-hand side formula .$allvars, . represents output brmsterms.","code":""},{"path":"/reference/brmsterms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Formulas of brms Models — brmsterms","text":"object class brmsterms mvbrmsterms   (multivariate models), list containing   required information initially stored formula   easier use format, basically list formulas   (abstract syntax tree).","code":""},{"path":"/reference/brmsterms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse Formulas of brms Models — brmsterms","text":"main formula parsing function brms.   usually called directly, exported allow   package developers making use formula syntax implemented   brms. long packages depend functions,   may changed without deprecation warnings, new features make   necessary.","code":""},{"path":[]},{"path":"/reference/car.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial conditional autoregressive (CAR) structures — car","title":"Spatial conditional autoregressive (CAR) structures — car","text":"Set spatial conditional autoregressive (CAR) term brms. function evaluate arguments – exists purely help set model CAR terms.","code":""},{"path":"/reference/car.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial conditional autoregressive (CAR) structures — car","text":"","code":"car(M, gr = NA, type = \"escar\")"},{"path":"/reference/car.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial conditional autoregressive (CAR) structures — car","text":"M Adjacency matrix locations. non-zero entries treated two locations adjacent. gr specified, row names M match levels grouping factor. gr optional grouping factor mapping observations spatial locations. specified, observation treated separate location. recommended always specify grouping factor allow handling new data post-processing methods. type Type CAR structure. Currently implemented \"escar\" (exact sparse CAR), \"esicar\" (exact sparse intrinsic CAR), \"icar\" (intrinsic CAR), \"bym2\". information provided 'Details' section.","code":""},{"path":"/reference/car.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial conditional autoregressive (CAR) structures — car","text":"object class 'car_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":"/reference/car.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial conditional autoregressive (CAR) structures — car","text":"escar esicar types   implemented based case study Max Joseph   (https://github.com/mbjoseph/CARstan). icar   bym2 type implemented based case study Mitzi Morris   (https://mc-stan.org/users/documentation/case-studies/icar_stan.html).","code":""},{"path":[]},{"path":"/reference/car.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial conditional autoregressive (CAR) structures — car","text":"","code":"if (FALSE) { # \\dontrun{ # generate some spatial data east <- north <- 1:10 Grid <- expand.grid(east, north) K <- nrow(Grid)  # set up distance and neighbourhood matrices distance <- as.matrix(dist(Grid)) W <- array(0, c(K, K)) W[distance == 1] <- 1 rownames(W) <- 1:nrow(W)  # generate the covariates and response data x1 <- rnorm(K) x2 <- rnorm(K) theta <- rnorm(K, sd = 0.05) phi <- rmulti_normal(   1, mu = rep(0, K), Sigma = 0.4 * exp(-0.1 * distance) ) eta <- x1 + x2 + phi prob <- exp(eta) / (1 + exp(eta)) size <- rep(50, K) y <- rbinom(n = K, size = size, prob = prob) g <- 1:length(y) dat <- data.frame(y, size, x1, x2, g)  # fit a CAR model fit <- brm(y | trials(size) ~ x1 + x2 + car(W, gr = g),            data = dat, data2 = list(W = W),            family = binomial()) summary(fit) } # }"},{"path":"/reference/coef.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Coefficients — coef.brmsfit","title":"Extract Model Coefficients — coef.brmsfit","text":"Extract model coefficients, sum population-level effects corresponding group-level effects","code":""},{"path":"/reference/coef.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Coefficients — coef.brmsfit","text":"","code":"# S3 method for class 'brmsfit' coef(object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ...)"},{"path":"/reference/coef.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Coefficients — coef.brmsfit","text":"object object class brmsfit. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... arguments passed fixef.brmsfit ranef.brmsfit.","code":""},{"path":"/reference/coef.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Coefficients — coef.brmsfit","text":"list 3D arrays (one per grouping factor).  summary TRUE,  1st dimension contains factor levels,  2nd dimension contains summary statistics  (see posterior_summary),  3rd dimension contains group-level effects.  summary FALSE, 1st dimension contains  posterior draws, 2nd dimension contains factor levels,  3rd dimension contains group-level effects.","code":""},{"path":"/reference/coef.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Model Coefficients — coef.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt + (1+Trt|visit),            data = epilepsy, family = gaussian(), chains = 2) ## extract population and group-level coefficients separately fixef(fit) ranef(fit) ## extract combined coefficients coef(fit) } # }"},{"path":"/reference/combine_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Models fitted with brms — combine_models","title":"Combine Models fitted with brms — combine_models","text":"Combine multiple brmsfit objects, fitted model. usefully instance manually run models parallel.","code":""},{"path":"/reference/combine_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Models fitted with brms — combine_models","text":"","code":"combine_models(..., mlist = NULL, check_data = TRUE)"},{"path":"/reference/combine_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Models fitted with brms — combine_models","text":"... One brmsfit objects. mlist Optional list one brmsfit objects. check_data Logical; indicates data checked across models (defaults TRUE). Setting FALSE may useful instance combining models fitted multiple imputed data sets.","code":""},{"path":"/reference/combine_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Models fitted with brms — combine_models","text":"brmsfit object.","code":""},{"path":"/reference/combine_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine Models fitted with brms — combine_models","text":"function just takes first model replaces   stanfit object (slot fit) combined   stanfit objects models.","code":""},{"path":"/reference/compare_ic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Information Criteria of Different Models — compare_ic","title":"Compare Information Criteria of Different Models — compare_ic","text":"Compare information criteria different models fitted waic loo. Deprecated removed future. Please use loo_compare instead.","code":""},{"path":"/reference/compare_ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Information Criteria of Different Models — compare_ic","text":"","code":"compare_ic(..., x = NULL, ic = c(\"loo\", \"waic\", \"kfold\"))"},{"path":"/reference/compare_ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Information Criteria of Different Models — compare_ic","text":"... least two objects returned waic loo. Alternatively, brmsfit objects information criteria precomputed via add_ic may passed, well. x list containing types objects can passed via .... ic name information criterion extracted brmsfit objects. Ignored information criterion objects passed directly.","code":""},{"path":"/reference/compare_ic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Information Criteria of Different Models — compare_ic","text":"object class iclist.","code":""},{"path":"/reference/compare_ic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Information Criteria of Different Models — compare_ic","text":"See loo_compare recommended way   comparing models loo package.","code":""},{"path":[]},{"path":"/reference/compare_ic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Information Criteria of Different Models — compare_ic","text":"","code":"if (FALSE) { # \\dontrun{ # model with population-level effects only fit1 <- brm(rating ~ treat + period + carry,             data = inhaler) waic1 <- waic(fit1)  # model with an additional varying intercept for subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),             data = inhaler) waic2 <- waic(fit2)  # compare both models compare_ic(waic1, waic2) } # }"},{"path":"/reference/conditional_effects.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","title":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","text":"Display conditional effects one numeric /categorical predictors including two-way interaction effects.","code":""},{"path":"/reference/conditional_effects.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","text":"","code":"# S3 method for class 'brmsfit' conditional_effects(   x,   effects = NULL,   conditions = NULL,   int_conditions = NULL,   re_formula = NA,   prob = 0.95,   robust = TRUE,   method = \"posterior_epred\",   spaghetti = FALSE,   surface = FALSE,   categorical = FALSE,   ordinal = FALSE,   transform = NULL,   resolution = 100,   select_points = 0,   too_far = 0,   probs = NULL,   ... )  conditional_effects(x, ...)  # S3 method for class 'brms_conditional_effects' plot(   x,   ncol = NULL,   points = getOption(\"brms.plot_points\", FALSE),   rug = getOption(\"brms.plot_rug\", FALSE),   mean = TRUE,   jitter_width = 0,   stype = c(\"contour\", \"raster\"),   line_args = list(),   cat_args = list(),   errorbar_args = list(),   surface_args = list(),   spaghetti_args = list(),   point_args = list(),   rug_args = list(),   facet_args = list(),   theme = NULL,   ask = TRUE,   plot = TRUE,   ... )"},{"path":"/reference/conditional_effects.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","text":"x object class brmsfit. effects optional character vector naming effects (main effects interactions) compute conditional plots. Interactions specified : variable names. NULL (default), plots generated main effects two-way interactions estimated model. specifying effects manually, two-way interactions (including grouping variables) may plotted even originally modeled. conditions optional data.frame containing variable values condition . effect defined effects plotted separately row conditions. Values cond__ column used titles subplots. cond__ given, row names used purpose instead. recommended define rows order keep plots clear. See make_conditions easy way define conditions. NULL (default), numeric variables conditionalized using means factors get first level assigned. NA values within factors interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. int_conditions optional named list whose elements vectors values variables specified effects. values, predictions evaluated. names int_conditions match variable names exactly. Additionally, elements vectors may named , case names appear labels conditions plots. Instead vectors, functions returning vectors may passed applied original values corresponding variable. NULL (default), predictions evaluated \\(mean\\) \\(mean +/- sd\\) numeric predictors categories factor-like predictors. re_formula formula containing group-level effects considered conditional predictions. NULL, include group-level effects; NA (default), include group-level effects. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. robust TRUE (default) median used measure central tendency. FALSE mean used instead. method Method used obtain predictions. Can set \"posterior_epred\" (default), \"posterior_predict\", \"posterior_linpred\". details, see respective function documentations. spaghetti Logical. Indicates predictions visualized via spaghetti plots. applied numeric predictors. TRUE, recommended set argument ndraws relatively small value (e.g., 100) order reduce computation time. surface Logical. Indicates interactions two-dimensional smooths visualized surface. Defaults FALSE. surface type can controlled via argument stype related plotting method. categorical Logical. Indicates effects categorical ordinal models shown terms probabilities response categories. Defaults FALSE. ordinal (Deprecated) Please use argument categorical. Logical. Indicates effects ordinal models visualized raster response categories y-axis. Defaults FALSE. transform function character string naming function applied predicted responses summary statistics computed. allowed method = \"posterior_predict\". resolution Number support points used generate plots. Higher resolution leads smoother plots. Defaults 100. surface TRUE, implies 10000 support points interaction terms, might necessary reduce resolution RAM available. select_points Positive number. relevant points rug set TRUE: Actual data points numeric variables far away values specified conditions can excluded plot. Values scaled unit interval points select_points values conditions excluded. default, points used. too_far Positive number. surface plots : Grid points far away actual data points can excluded plot. too_far determines far. grid scaled unit square grid points too_far predictor variables excluded. default, grid points used. Ignored non-surface plots. probs (Deprecated) quantiles used computation uncertainty intervals. Please use argument prob instead. ... arguments draw_ids ndraws passed posterior_predict posterior_epred. ncol Number plots display per column effect. NULL (default), ncol computed internally based number rows conditions. points Logical. Indicates original data points added via geom_jitter. Default FALSE. Can controlled globally via brms.plot_points option. Note data points added match specified conditions defined conditions. categorical predictors, conditions match exactly. numeric predictors, argument select_points used determine, points match condition. rug Logical. Indicates rug representation predictor values added via geom_rug. Default FALSE. Depends select_points way points . Can controlled globally via brms.plot_rug option. mean Logical. relevant spaghetti plots. TRUE (default), display mean regression line top regression lines sample. jitter_width used points = TRUE: Amount horizontal jittering data points. Mainly useful ordinal models. Defaults 0 jittering. stype Indicates surface plots displayed. Either \"contour\" \"raster\". line_args used plots continuous predictors: named list arguments passed geom_smooth. cat_args used plots categorical predictors: named list arguments passed geom_point. errorbar_args used plots categorical predictors: named list arguments passed geom_errorbar. surface_args used surface plots: named list arguments passed geom_contour geom_raster (depending argument stype). spaghetti_args used spaghetti plots: named list arguments passed geom_smooth. point_args used points = TRUE: named list arguments passed geom_jitter. rug_args used rug = TRUE: named list arguments passed geom_rug. facet_args used multiple conditions provided: named list arguments passed facet_wrap. theme theme object modifying appearance plots. basic themes see ggtheme theme_default. ask Logical; indicates user prompted new page plotted. used plot TRUE. plot Logical; indicates plots plotted directly active graphic device. Defaults TRUE.","code":""},{"path":"/reference/conditional_effects.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","text":"object class 'brms_conditional_effects'   named list one data.frame per effect containing information   required generate conditional effects plots. Among others,   data.frames contain special variables, namely estimate__   (predicted values response), se__ (standard error   predicted response), lower__ upper__ (lower upper   bounds uncertainty interval response), well   cond__ (used faceting conditions contains multiple   rows). corresponding plot method returns named   list ggplot objects, can   customized using ggplot2 package.","code":""},{"path":"/reference/conditional_effects.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","text":"creating conditional_effects particular predictor   (interaction two predictors), one choose values   predictors condition . default, mean used   continuous variables reference category used factors,   may change values via argument conditions. also   implication points argument: created plots,   points shown correspond factor levels actually   used conditioning, order create false impression   bad model fit, just due conditioning certain factor   levels. fully change colors created plots, one amend   scale_colour scale_fill. See   scale_colour_grey   scale_colour_gradient   details.","code":""},{"path":"/reference/conditional_effects.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Conditional Effects of Predictors — conditional_effects.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt + (1 | patient),            data = epilepsy, family = poisson())  ## plot all conditional effects plot(conditional_effects(fit), ask = FALSE)  ## change colours to grey scale library(ggplot2) ce <- conditional_effects(fit, \"zBase:Trt\") plot(ce, plot = FALSE)[[1]] +   scale_color_grey() +   scale_fill_grey()  ## only plot the conditional interaction effect of 'zBase:Trt' ## for different values for 'zAge' conditions <- data.frame(zAge = c(-1, 0, 1)) plot(conditional_effects(fit, effects = \"zBase:Trt\",                          conditions = conditions))  ## also incorporate group-level effects variance over patients ## also add data points and a rug representation of predictor values plot(conditional_effects(fit, effects = \"zBase:Trt\",                          conditions = conditions, re_formula = NULL),      points = TRUE, rug = TRUE)  ## change handling of two-way interactions int_conditions <- list(   zBase = setNames(c(-2, 1, 0), c(\"b\", \"c\", \"a\")) ) conditional_effects(fit, effects = \"Trt:zBase\",                     int_conditions = int_conditions) conditional_effects(fit, effects = \"Trt:zBase\",                     int_conditions = list(zBase = quantile))  ## fit a model to illustrate how to plot 3-way interactions fit3way <- brm(count ~ zAge * zBase * Trt, data = epilepsy) conditions <- make_conditions(fit3way, \"zAge\") conditional_effects(fit3way, \"zBase:Trt\", conditions = conditions) ## only include points close to the specified values of zAge ce <- conditional_effects(   fit3way, \"zBase:Trt\", conditions = conditions,   select_points = 0.1 ) plot(ce, points = TRUE) } # }"},{"path":"/reference/conditional_smooths.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Smooth Terms — conditional_smooths.brmsfit","title":"Display Smooth Terms — conditional_smooths.brmsfit","text":"Display smooth s t2 terms models fitted brms.","code":""},{"path":"/reference/conditional_smooths.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Smooth Terms — conditional_smooths.brmsfit","text":"","code":"# S3 method for class 'brmsfit' conditional_smooths(   x,   smooths = NULL,   int_conditions = NULL,   prob = 0.95,   spaghetti = FALSE,   surface = TRUE,   resolution = 100,   too_far = 0,   ndraws = NULL,   draw_ids = NULL,   nsamples = NULL,   subset = NULL,   probs = NULL,   ... )  conditional_smooths(x, ...)"},{"path":"/reference/conditional_smooths.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Smooth Terms — conditional_smooths.brmsfit","text":"x object class brmsfit. smooths Optional character vector smooth terms display. NULL (default) smooth terms shown. int_conditions optional named list whose elements vectors values variables specified effects. values, predictions evaluated. names int_conditions match variable names exactly. Additionally, elements vectors may named , case names appear labels conditions plots. Instead vectors, functions returning vectors may passed applied original values corresponding variable. NULL (default), predictions evaluated \\(mean\\) \\(mean +/- sd\\) numeric predictors categories factor-like predictors. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. spaghetti Logical. Indicates predictions visualized via spaghetti plots. applied numeric predictors. TRUE, recommended set argument ndraws relatively small value (e.g., 100) order reduce computation time. surface Logical. Indicates interactions two-dimensional smooths visualized surface. Defaults TRUE. surface type can controlled via argument stype related plotting method. resolution Number support points used generate plots. Higher resolution leads smoother plots. Defaults 100. surface TRUE, implies 10000 support points interaction terms, might necessary reduce resolution RAM available. too_far Positive number. surface plots : Grid points far away actual data points can excluded plot. too_far determines far. grid scaled unit square grid points too_far predictor variables excluded. default, grid points used. Ignored non-surface plots. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. nsamples Deprecated alias ndraws. subset Deprecated alias draw_ids. probs (Deprecated) quantiles used computation uncertainty intervals. Please use argument prob instead. ... Currently ignored.","code":""},{"path":"/reference/conditional_smooths.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Smooth Terms — conditional_smooths.brmsfit","text":"brmsfit method, object class brms_conditional_effects. See conditional_effects details documentation related plotting function.","code":""},{"path":"/reference/conditional_smooths.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display Smooth Terms — conditional_smooths.brmsfit","text":"Two-dimensional smooth terms visualized using   either contour raster plots.","code":""},{"path":"/reference/conditional_smooths.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Smooth Terms — conditional_smooths.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(0) dat <- mgcv::gamSim(1, n = 200, scale = 2) fit <- brm(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat) # show all smooth terms plot(conditional_smooths(fit), rug = TRUE, ask = FALSE) # show only the smooth term s(x2) plot(conditional_smooths(fit, smooths = \"s(x2)\"), ask = FALSE)  # fit and plot a two-dimensional smooth term fit2 <- brm(y ~ t2(x0, x2), data = dat) ms <- conditional_smooths(fit2) plot(ms, stype = \"contour\") plot(ms, stype = \"raster\") } # }"},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant priors in brms — constant","title":"Constant priors in brms — constant","text":"Function used set constant priors brms. function evaluate arguments – exists purely help set model.","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant priors in brms — constant","text":"","code":"constant(const, broadcast = TRUE)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constant priors in brms — constant","text":"const Numeric value, vector, matrix values parameters fixed . Can also valid Stan variable model. broadcast const automatically broadcasted correct size parameter? Defaults TRUE. supply vectors matrices const vector/matrix valued Stan variables, need set broadcast TRUE (see Examples).","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constant priors in brms — constant","text":"named list elements const broadcast.","code":""},{"path":[]},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constant priors in brms — constant","text":"","code":"stancode(count ~ Base + Age, data = epilepsy,          prior = prior(constant(1), class = \"b\")) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #> } #> transformed parameters { #>   vector[Kc] b;  // regression coefficients #>   // prior contributions to the log posterior #>   real lprior = 0; #>   b = rep_vector(1, rows(b)); #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # will fail parsing because brms will try to broadcast a vector into a vector stancode(count ~ Base + Age, data = epilepsy,          prior = prior(constant(alpha), class = \"b\"),          stanvars = stanvar(c(1, 0), name = \"alpha\")) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #>   vector[2] alpha; #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #> } #> transformed parameters { #>   vector[Kc] b;  // regression coefficients #>   // prior contributions to the log posterior #>   real lprior = 0; #>   b = rep_vector(alpha, rows(b)); #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  stancode(count ~ Base + Age, data = epilepsy,          prior = prior(constant(alpha, broadcast = FALSE), class = \"b\"),          stanvars = stanvar(c(1, 0), name = \"alpha\")) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #>   vector[2] alpha; #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #> } #> transformed parameters { #>   vector[Kc] b;  // regression coefficients #>   // prior contributions to the log posterior #>   real lprior = 0; #>   b = alpha; #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }"},{"path":"/reference/control_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Control Parameters of the NUTS Sampler — control_params","title":"Extract Control Parameters of the NUTS Sampler — control_params","text":"Extract control parameters NUTS sampler adapt_delta max_treedepth.","code":""},{"path":"/reference/control_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Control Parameters of the NUTS Sampler — control_params","text":"","code":"control_params(x, ...)  # S3 method for class 'brmsfit' control_params(x, pars = NULL, ...)"},{"path":"/reference/control_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Control Parameters of the NUTS Sampler — control_params","text":"x R object ... Currently ignored. pars Optional names control parameters returned. NULL (default) control parameters returned. See stan details.","code":""},{"path":"/reference/control_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Control Parameters of the NUTS Sampler — control_params","text":"named list control parameter values.","code":""},{"path":"/reference/cor_ar.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) AR(p) correlation structure — cor_ar","title":"(Deprecated) AR(p) correlation structure — cor_ar","text":"function deprecated. Please see ar new syntax. function constructor cor_arma class, allowing autoregression terms .","code":""},{"path":"/reference/cor_ar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) AR(p) correlation structure — cor_ar","text":"","code":"cor_ar(formula = ~1, p = 1, cov = FALSE)"},{"path":"/reference/cor_ar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) AR(p) correlation structure — cor_ar","text":"formula one sided formula form ~ t, ~ t | g, specifying time covariate t , optionally, grouping factor g. covariate correlation structure must integer valued. grouping factor present formula, correlation structure assumed apply observations within grouping level; observations different grouping levels assumed uncorrelated. Defaults ~ 1, corresponds using order observations data covariate, groups. p non-negative integer specifying autoregressive (AR) order ARMA structure. Default 1. cov flag indicating whether ARMA effects estimated means residual covariance matrices. currently possible stationary ARMA effects order 1. model family natural residuals, latent residuals added automatically. FALSE (default) regression formulation used considerably faster allows ARMA effects order higher 1 available gaussian models generalizations.","code":""},{"path":"/reference/cor_ar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) AR(p) correlation structure — cor_ar","text":"object class cor_arma containing solely autoregression terms.","code":""},{"path":"/reference/cor_ar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated) AR(p) correlation structure — cor_ar","text":"AR refers autoregressive effects residuals,   typically understood autoregressive effects.   However, one may also model autoregressive effects response   variable, called ARR brms.","code":""},{"path":[]},{"path":"/reference/cor_ar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) AR(p) correlation structure — cor_ar","text":"","code":"cor_ar(~visit|patient, p = 2) #> arma(~visit | patient, 2, 0)"},{"path":"/reference/cor_arma.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) ARMA(p,q) correlation structure — cor_arma","title":"(Deprecated) ARMA(p,q) correlation structure — cor_arma","text":"function deprecated. Please see arma new syntax. functions constructor cor_arma class, representing autoregression-moving average correlation structure order (p, q).","code":""},{"path":"/reference/cor_arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) ARMA(p,q) correlation structure — cor_arma","text":"","code":"cor_arma(formula = ~1, p = 0, q = 0, r = 0, cov = FALSE)"},{"path":"/reference/cor_arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) ARMA(p,q) correlation structure — cor_arma","text":"formula one sided formula form ~ t, ~ t | g, specifying time covariate t , optionally, grouping factor g. covariate correlation structure must integer valued. grouping factor present formula, correlation structure assumed apply observations within grouping level; observations different grouping levels assumed uncorrelated. Defaults ~ 1, corresponds using order observations data covariate, groups. p non-negative integer specifying autoregressive (AR) order ARMA structure. Default 0. q non-negative integer specifying moving average (MA) order ARMA structure. Default 0. r longer supported. cov flag indicating whether ARMA effects estimated means residual covariance matrices. currently possible stationary ARMA effects order 1. model family natural residuals, latent residuals added automatically. FALSE (default) regression formulation used considerably faster allows ARMA effects order higher 1 available gaussian models generalizations.","code":""},{"path":"/reference/cor_arma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) ARMA(p,q) correlation structure — cor_arma","text":"object class cor_arma, representing   autoregression-moving-average correlation structure.","code":""},{"path":[]},{"path":"/reference/cor_arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) ARMA(p,q) correlation structure — cor_arma","text":"","code":"cor_arma(~ visit | patient, p = 2, q = 2) #> arma(~visit | patient, 2, 2)"},{"path":"/reference/cor_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"(Defunct) ARR correlation structure — cor_arr","title":"(Defunct) ARR correlation structure — cor_arr","text":"ARR correlation structure longer supported.","code":""},{"path":"/reference/cor_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Defunct) ARR correlation structure — cor_arr","text":"","code":"cor_arr(formula = ~1, r = 1)"},{"path":"/reference/cor_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Defunct) ARR correlation structure — cor_arr","text":"formula one sided formula form ~ t, ~ t | g, specifying time covariate t , optionally, grouping factor g. covariate correlation structure must integer valued. grouping factor present formula, correlation structure assumed apply observations within grouping level; observations different grouping levels assumed uncorrelated. Defaults ~ 1, corresponds using order observations data covariate, groups. r longer supported.","code":""},{"path":"/reference/cor_brms.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Correlation structure classes for the brms package — cor_brms","title":"(Deprecated) Correlation structure classes for the brms package — cor_brms","text":"Classes correlation structures available brms package. cor_brms correlation structure , class common correlation structures implemented brms.","code":""},{"path":"/reference/cor_brms.html","id":"available-correlation-structures","dir":"Reference","previous_headings":"","what":"Available correlation structures","title":"(Deprecated) Correlation structure classes for the brms package — cor_brms","text":"cor_arma autoregressive-moving average (ARMA) structure,   arbitrary orders autoregressive moving   average components cor_ar autoregressive (AR) structure arbitrary order cor_ma moving average (MA) structure arbitrary order cor_car Spatial conditional autoregressive (CAR) structure cor_sar Spatial simultaneous autoregressive (SAR) structure cor_fixed fixed user-defined covariance structure","code":""},{"path":[]},{"path":"/reference/cor_bsts.html","id":null,"dir":"Reference","previous_headings":"","what":"(Defunct) Basic Bayesian Structural Time Series — cor_bsts","title":"(Defunct) Basic Bayesian Structural Time Series — cor_bsts","text":"BSTS correlation structure longer supported.","code":""},{"path":"/reference/cor_bsts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Defunct) Basic Bayesian Structural Time Series — cor_bsts","text":"","code":"cor_bsts(formula = ~1)"},{"path":"/reference/cor_bsts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Defunct) Basic Bayesian Structural Time Series — cor_bsts","text":"formula one sided formula form ~ t, ~ t | g, specifying time covariate t , optionally, grouping factor g. covariate correlation structure must integer valued. grouping factor present formula, correlation structure assumed apply observations within grouping level; observations different grouping levels assumed uncorrelated. Defaults ~ 1, corresponds using order observations data covariate, groups.","code":""},{"path":"/reference/cor_car.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Spatial conditional autoregressive (CAR) structures — cor_car","title":"(Deprecated) Spatial conditional autoregressive (CAR) structures — cor_car","text":"function deprecated. Please see car new syntax. functions constructors cor_car class implementing spatial conditional autoregressive structures.","code":""},{"path":"/reference/cor_car.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Spatial conditional autoregressive (CAR) structures — cor_car","text":"","code":"cor_car(W, formula = ~1, type = \"escar\")  cor_icar(W, formula = ~1)"},{"path":"/reference/cor_car.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Spatial conditional autoregressive (CAR) structures — cor_car","text":"W Adjacency matrix locations. non-zero entries treated two locations adjacent. formula contains grouping factor, row names W match levels grouping factor. formula optional one-sided formula form ~ 1 | g, g grouping factor mapping observations spatial locations. specified, observation treated separate location. recommended always specify grouping factor allow handling new data post-processing methods. type Type CAR structure. Currently implemented \"escar\" (exact sparse CAR), \"esicar\" (exact sparse intrinsic CAR), \"icar\" (intrinsic CAR), \"bym2\". information provided 'Details' section.","code":""},{"path":"/reference/cor_car.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated) Spatial conditional autoregressive (CAR) structures — cor_car","text":"escar esicar types   implemented based case study Max Joseph   (https://github.com/mbjoseph/CARstan). icar   bym2 type implemented based case study Mitzi Morris   (https://mc-stan.org/users/documentation/case-studies/icar_stan.html).","code":""},{"path":"/reference/cor_car.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Spatial conditional autoregressive (CAR) structures — cor_car","text":"","code":"if (FALSE) { # \\dontrun{ # generate some spatial data east <- north <- 1:10 Grid <- expand.grid(east, north) K <- nrow(Grid)  # set up distance and neighbourhood matrices distance <- as.matrix(dist(Grid)) W <- array(0, c(K, K)) W[distance == 1] <- 1  # generate the covariates and response data x1 <- rnorm(K) x2 <- rnorm(K) theta <- rnorm(K, sd = 0.05) phi <- rmulti_normal(   1, mu = rep(0, K), Sigma = 0.4 * exp(-0.1 * distance) ) eta <- x1 + x2 + phi prob <- exp(eta) / (1 + exp(eta)) size <- rep(50, K) y <- rbinom(n = K, size = size, prob = prob) dat <- data.frame(y, size, x1, x2)  # fit a CAR model fit <- brm(y | trials(size) ~ x1 + x2, data = dat,            family = binomial(), autocor = cor_car(W)) summary(fit) } # }"},{"path":"/reference/cor_cosy.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Compound Symmetry (COSY) Correlation Structure — cor_cosy","title":"(Deprecated) Compound Symmetry (COSY) Correlation Structure — cor_cosy","text":"function deprecated. Please see cosy new syntax. functions constructor cor_cosy class, representing compound symmetry structure corresponding uniform correlation.","code":""},{"path":"/reference/cor_cosy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Compound Symmetry (COSY) Correlation Structure — cor_cosy","text":"","code":"cor_cosy(formula = ~1)"},{"path":"/reference/cor_cosy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Compound Symmetry (COSY) Correlation Structure — cor_cosy","text":"formula one sided formula form ~ t, ~ t | g, specifying time covariate t , optionally, grouping factor g. covariate correlation structure must integer valued. grouping factor present formula, correlation structure assumed apply observations within grouping level; observations different grouping levels assumed uncorrelated. Defaults ~ 1, corresponds using order observations data covariate, groups.","code":""},{"path":"/reference/cor_cosy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Compound Symmetry (COSY) Correlation Structure — cor_cosy","text":"object class cor_cosy, representing compound symmetry   correlation structure.","code":""},{"path":"/reference/cor_cosy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Compound Symmetry (COSY) Correlation Structure — cor_cosy","text":"","code":"cor_cosy(~ visit | patient) #> cosy(~visit | patient)"},{"path":"/reference/cor_fixed.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Fixed user-defined covariance matrices — cor_fixed","title":"(Deprecated) Fixed user-defined covariance matrices — cor_fixed","text":"function deprecated. Please see fcor new syntax. Define fixed covariance matrix response variable instance model multivariate effect sizes meta-analysis.","code":""},{"path":"/reference/cor_fixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Fixed user-defined covariance matrices — cor_fixed","text":"","code":"cor_fixed(V)"},{"path":"/reference/cor_fixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Fixed user-defined covariance matrices — cor_fixed","text":"V Known covariance matrix response variable. vector passed, used diagonal entries (variances) covariances set zero.","code":""},{"path":"/reference/cor_fixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Fixed user-defined covariance matrices — cor_fixed","text":"object class cor_fixed.","code":""},{"path":"/reference/cor_fixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Fixed user-defined covariance matrices — cor_fixed","text":"","code":"if (FALSE) { # \\dontrun{ dat <- data.frame(y = rnorm(3)) V <- cbind(c(0.5, 0.3, 0.2), c(0.3, 1, 0.1), c(0.2, 0.1, 0.2)) fit <- brm(y~1, data = dat, autocor = cor_fixed(V)) } # }"},{"path":"/reference/cor_ma.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) MA(q) correlation structure — cor_ma","title":"(Deprecated) MA(q) correlation structure — cor_ma","text":"function deprecated. Please see ma new syntax. function constructor cor_arma class, allowing moving average terms .","code":""},{"path":"/reference/cor_ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) MA(q) correlation structure — cor_ma","text":"","code":"cor_ma(formula = ~1, q = 1, cov = FALSE)"},{"path":"/reference/cor_ma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) MA(q) correlation structure — cor_ma","text":"formula one sided formula form ~ t, ~ t | g, specifying time covariate t , optionally, grouping factor g. covariate correlation structure must integer valued. grouping factor present formula, correlation structure assumed apply observations within grouping level; observations different grouping levels assumed uncorrelated. Defaults ~ 1, corresponds using order observations data covariate, groups. q non-negative integer specifying moving average (MA) order ARMA structure. Default 1. cov flag indicating whether ARMA effects estimated means residual covariance matrices. currently possible stationary ARMA effects order 1. model family natural residuals, latent residuals added automatically. FALSE (default) regression formulation used considerably faster allows ARMA effects order higher 1 available gaussian models generalizations.","code":""},{"path":"/reference/cor_ma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) MA(q) correlation structure — cor_ma","text":"object class cor_arma containing solely moving average terms.","code":""},{"path":[]},{"path":"/reference/cor_ma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) MA(q) correlation structure — cor_ma","text":"","code":"cor_ma(~visit|patient, q = 2) #> arma(~visit | patient, 0, 2)"},{"path":"/reference/cor_sar.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","title":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","text":"Thse functions deprecated. Please see sar new syntax. functions constructors cor_sar class implementing spatial simultaneous autoregressive structures. lagsar structure implements SAR response values: $$y = \\rho W y + \\eta + e$$ errorsar structure implements SAR residuals: $$y = \\eta + u, u = \\rho W u + e$$ equations, \\(\\eta\\) predictor term \\(e\\) independent normally t-distributed residuals.","code":""},{"path":"/reference/cor_sar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","text":"","code":"cor_sar(W, type = c(\"lag\", \"error\"))  cor_lagsar(W)  cor_errorsar(W)"},{"path":"/reference/cor_sar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","text":"W object specifying spatial weighting matrix. Can either spatial weight matrix object class listw nb, spatial weighting matrix can computed. type Type SAR structure. Either \"lag\" (SAR response values) \"error\" (SAR residuals).","code":""},{"path":"/reference/cor_sar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","text":"object class cor_sar used calls   brm.","code":""},{"path":"/reference/cor_sar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","text":"Currently, families gaussian student   support SAR structures.","code":""},{"path":"/reference/cor_sar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Spatial simultaneous autoregressive (SAR) structures — cor_sar","text":"","code":"if (FALSE) { # \\dontrun{ data(oldcol, package = \"spdep\") fit1 <- brm(CRIME ~ INC + HOVAL, data = COL.OLD,             autocor = cor_lagsar(COL.nb),             chains = 2, cores = 2) summary(fit1) plot(fit1)  fit2 <- brm(CRIME ~ INC + HOVAL, data = COL.OLD,             autocor = cor_errorsar(COL.nb),             chains = 2, cores = 2) summary(fit2) plot(fit2) } # }"},{"path":"/reference/cosy.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up COSY correlation structures — cosy","title":"Set up COSY correlation structures — cosy","text":"Set compounds symmetry (COSY) term brms. function evaluate arguments – exists purely help set model COSY terms.","code":""},{"path":"/reference/cosy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up COSY correlation structures — cosy","text":"","code":"cosy(time = NA, gr = NA)"},{"path":"/reference/cosy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up COSY correlation structures — cosy","text":"time optional time variable specifying time ordering observations. default, existing order observations data used. gr optional grouping variable. specified, correlation structure assumed apply observations within grouping level.","code":""},{"path":"/reference/cosy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up COSY correlation structures — cosy","text":"object class 'cosy_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":[]},{"path":"/reference/cosy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up COSY correlation structures — cosy","text":"","code":"if (FALSE) { # \\dontrun{ data(\"lh\") lh <- as.data.frame(lh) fit <- brm(x ~ cosy(), data = lh) summary(fit) } # }"},{"path":"/reference/create_priorsense_data.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior sensitivity: Create priorsense data — create_priorsense_data.brmsfit","title":"Prior sensitivity: Create priorsense data — create_priorsense_data.brmsfit","text":"create_priorsense_data.brmsfit method can used create data structure needed priorsense package performing power-scaling sensitivity analysis. method called automatically performing powerscaling via powerscale related functions, rarely need call manually .","code":""},{"path":"/reference/create_priorsense_data.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior sensitivity: Create priorsense data — create_priorsense_data.brmsfit","text":"","code":"# S3 method for class 'brmsfit' create_priorsense_data(x, ...)"},{"path":"/reference/create_priorsense_data.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior sensitivity: Create priorsense data — create_priorsense_data.brmsfit","text":"x brmsfit object. ... Additional arguments passed log_lik, example newdata.","code":""},{"path":"/reference/create_priorsense_data.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior sensitivity: Create priorsense data — create_priorsense_data.brmsfit","text":"priorsense_data object used conjunction priorsense package.","code":""},{"path":"/reference/create_priorsense_data.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior sensitivity: Create priorsense data — create_priorsense_data.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # fit a model with non-uniform priors fit <- brm(rating ~ treat + period + carry,            data = inhaler, family = sratio(),            prior = set_prior(\"normal(0, 0.5)\")) summary(fit)  # The following code requires the 'priorsense' package to be installed: library(priorsense)  # perform power-scaling of the prior powerscale(fit, alpha = 1.5, component = \"prior\")  # perform power-scaling sensitivity checks powerscale_sensitivity(fit)  # create power-scaling sensitivity plots (for one variable) powerscale_plot_dens(fit, variable = \"b_treat\") } # }"},{"path":"/reference/cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Category Specific Predictors in brms Models — cs","title":"Category Specific Predictors in brms Models — cs","text":"Category Specific Predictors brms Models","code":""},{"path":"/reference/cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Category Specific Predictors in brms Models — cs","text":"","code":"cs(expr)"},{"path":"/reference/cs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Category Specific Predictors in brms Models — cs","text":"expr Expression containing predictors, category specific effects estimated. evaluation, R formula syntax applied.","code":""},{"path":"/reference/cs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Category Specific Predictors in brms Models — cs","text":"detailed documentation see help(brmsformula)   well vignette(\"brms_overview\"). function almost solely useful called formulas passed brms package.","code":""},{"path":[]},{"path":"/reference/cs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Category Specific Predictors in brms Models — cs","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(rating ~ period + carry + cs(treat),            data = inhaler, family = sratio(\"cloglog\"),            prior = set_prior(\"normal(0,5)\"), chains = 2) summary(fit) plot(fit, ask = FALSE) } # }"},{"path":"/reference/custom_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Families in brms Models — custom_family","title":"Custom Families in brms Models — custom_family","text":"Define custom families (.e. response distribution) use brms models. allows users benefit modeling flexibility brms, applying self-defined likelihood functions. post-processing methods brmsfit objects can made compatible custom families. See vignette(\"brms_customfamilies\") details. list built-families see brmsfamily.","code":""},{"path":"/reference/custom_family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Families in brms Models — custom_family","text":"","code":"custom_family(   name,   dpars = \"mu\",   links = \"identity\",   type = c(\"real\", \"int\"),   lb = NA,   ub = NA,   vars = NULL,   loop = TRUE,   specials = NULL,   threshold = \"flexible\",   log_lik = NULL,   posterior_predict = NULL,   posterior_epred = NULL,   predict = NULL,   fitted = NULL,   env = parent.frame() )"},{"path":"/reference/custom_family.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Families in brms Models — custom_family","text":"name Name custom family. dpars Names distributional parameters family. One parameter must named \"mu\" main formula model correspond parameter. links Names link functions distributional parameters. type Indicates response distribution continuous (\"real\") discrete (\"int\"). controls corresponding density function named <name>_lpdf <name>_lpmf. lb Vector lower bounds distributional parameters. Defaults NA lower bound. ub Vector upper bounds distributional parameters. Defaults NA upper bound. vars Names variables part likelihood function without distributional parameters. , vars can used pass data likelihood. arguments added list function arguments end, distributional parameters. See stanvar details adding self-defined data generated Stan model. Addition arguments vreal vint may used purpose well (see Examples ). See also brmsformula addition-terms details. loop Logical; likelihood evaluated via loop (TRUE; default) observations Stan? FALSE, Stan code written vectorized manner observations possible. specials character vector special options enable custom family. Currently internal use . threshold Optional threshold type custom ordinal families. Ignored non-ordinal families. log_lik Optional function compute log-likelihood values model R. relevant one wants ensure compatibility method log_lik. posterior_predict Optional function compute posterior prediction model R. relevant one wants ensure compatibility method posterior_predict. posterior_epred Optional function compute expected values posterior predictive distribution model R. relevant one wants ensure compatibility method posterior_epred. predict Deprecated alias `posterior_predict`. fitted Deprecated alias `posterior_epred`. env environment certain post-processing functions related custom family can found, directly passed custom_family. relevant one wants ensure compatibility methods log_lik, posterior_predict, posterior_epred. default, env environment custom_family called.","code":""},{"path":"/reference/custom_family.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Families in brms Models — custom_family","text":"object class customfamily inheriting   class brmsfamily.","code":""},{"path":"/reference/custom_family.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom Families in brms Models — custom_family","text":"corresponding probability density mass Stan   functions need name custom family.   family called myfamily,   Stan functions called myfamily_lpdf   myfamily_lpmf depending whether defines   continuous discrete distribution.","code":""},{"path":[]},{"path":"/reference/custom_family.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Families in brms Models — custom_family","text":"","code":"if (FALSE) { # \\dontrun{ ## demonstrate how to fit a beta-binomial model ## generate some fake data phi <- 0.7 n <- 300 z <- rnorm(n, sd = 0.2) ntrials <- sample(1:10, n, replace = TRUE) eta <- 1 + z mu <- exp(eta) / (1 + exp(eta)) a <- mu * phi b <- (1 - mu) * phi p <- rbeta(n, a, b) y <- rbinom(n, ntrials, p) dat <- data.frame(y, z, ntrials)  # define a custom family beta_binomial2 <- custom_family(   \"beta_binomial2\", dpars = c(\"mu\", \"phi\"),   links = c(\"logit\", \"log\"), lb = c(NA, 0),   type = \"int\", vars = \"vint1[n]\" )  # define the corresponding Stan density function stan_density <- \"   real beta_binomial2_lpmf(int y, real mu, real phi, int N) {     return beta_binomial_lpmf(y | N, mu * phi, (1 - mu) * phi);   } \" stanvars <- stanvar(scode = stan_density, block = \"functions\")  # fit the model fit <- brm(y | vint(ntrials) ~ z, data = dat,            family = beta_binomial2, stanvars = stanvars) summary(fit)   # define a *vectorized* custom family (no loop over observations) # notice also that 'vint' no longer has an observation index beta_binomial2_vec <- custom_family(   \"beta_binomial2\", dpars = c(\"mu\", \"phi\"),   links = c(\"logit\", \"log\"), lb = c(NA, 0),   type = \"int\", vars = \"vint1\", loop = FALSE )  # define the corresponding Stan density function stan_density_vec <- \"   real beta_binomial2_lpmf(array[] int y, vector mu, real phi, array[] int N) {     return beta_binomial_lpmf(y | N, mu * phi, (1 - mu) * phi);   } \" stanvars_vec <- stanvar(scode = stan_density_vec, block = \"functions\")  # fit the model fit_vec <- brm(y | vint(ntrials) ~ z, data = dat,            family = beta_binomial2_vec,            stanvars = stanvars_vec) summary(fit_vec) } # }"},{"path":"/reference/data_predictor.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Predictor Data — data_predictor","title":"Prepare Predictor Data — data_predictor","text":"Prepare data related predictor variables brms. exported use package development.","code":""},{"path":"/reference/data_predictor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Predictor Data — data_predictor","text":"","code":"data_predictor(x, ...)"},{"path":"/reference/data_predictor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Predictor Data — data_predictor","text":"x R object. ... arguments passed methods.","code":""},{"path":"/reference/data_predictor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Predictor Data — data_predictor","text":"named list data related predictor variables.","code":""},{"path":"/reference/data_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Response Data — data_response","title":"Prepare Response Data — data_response","text":"Prepare data related response variables brms. exported use package development.","code":""},{"path":"/reference/data_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Response Data — data_response","text":"","code":"data_response(x, ...)"},{"path":"/reference/data_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Response Data — data_response","text":"x R object. ... arguments passed methods.","code":""},{"path":"/reference/data_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Response Data — data_response","text":"named list data related response variables.","code":""},{"path":"/reference/default_prior.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Priors for brms Models — default_prior.default","title":"Default Priors for brms Models — default_prior.default","text":"Get information parameters (parameter classes) priors may specified including default priors.","code":""},{"path":"/reference/default_prior.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Priors for brms Models — default_prior.default","text":"","code":"# Default S3 method default_prior(   object,   data,   family = gaussian(),   autocor = NULL,   data2 = NULL,   knots = NULL,   drop_unused_levels = TRUE,   sparse = NULL,   ... )"},{"path":"/reference/default_prior.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Priors for brms Models — default_prior.default","text":"object object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data object class data.frame (one can coerced class) containing data variables used model. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. autocor (Deprecated) optional cor_brms object describing correlation structure within response variable (.e., 'autocorrelation'). See documentation cor_brms description available correlation structures. Defaults NULL, corresponding correlations. multivariate models, autocor might also list autocorrelation structures. now recommend specify autocorrelation terms directly within formula. See brmsformula details. data2 named list objects containing data, passed via argument data. Required objects used autocorrelation structures specify dependency structures well within-group covariance matrices. knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. drop_unused_levels unused factors levels data dropped? Defaults TRUE. sparse (Deprecated) Logical; indicates whether population-level design matrices treated sparse (defaults FALSE). design matrices many zeros, can considerably reduce required memory. Sampling speed currently improved even slightly decreased. now recommended use sparse argument brmsformula related functions. ... arguments internal usage .","code":""},{"path":"/reference/default_prior.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Priors for brms Models — default_prior.default","text":"brmsprior object. , data.frame specific   columns including prior, class, coef, group   several rows, providing information parameter (parameter   class) priors can specified. prior column empty except   internal default priors.","code":""},{"path":[]},{"path":"/reference/default_prior.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Priors for brms Models — default_prior.default","text":"","code":"# get all parameters and parameters classes to define priors on (prior <- default_prior(count ~ zAge + zBase * Trt + (1|patient) + (1|obs),                         data = epilepsy, family = poisson())) #>                   prior     class       coef   group resp dpar nlpar lb ub tag #>  student_t(3, 1.4, 2.5) Intercept                                              #>                  (flat)         b                                              #>                  (flat)         b       Trt1                                   #>                  (flat)         b       zAge                                   #>                  (flat)         b      zBase                                   #>                  (flat)         b zBase:Trt1                                   #>    student_t(3, 0, 2.5)        sd                                     0        #>    student_t(3, 0, 2.5)        sd                obs                  0        #>    student_t(3, 0, 2.5)        sd  Intercept     obs                  0        #>    student_t(3, 0, 2.5)        sd            patient                  0        #>    student_t(3, 0, 2.5)        sd  Intercept patient                  0        #>        source #>       default #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized)  # define a prior on all population-level effects a once prior$prior[1] <- \"normal(0,10)\"  # define a specific prior on the population-level effect of Trt prior$prior[5] <- \"student_t(10, 0, 5)\"  # verify that the priors indeed found their way into Stan's model code stancode(count ~ zAge + zBase * Trt + (1|patient) + (1|obs),          data = epilepsy, family = poisson(),          prior = prior) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   array[N] int Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   // data for group-level effects of ID 2 #>   int<lower=1> N_2;  // number of grouping levels #>   int<lower=1> M_2;  // number of coefficients per level #>   array[N] int<lower=1> J_2;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_2_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #>   vector<lower=0>[M_2] sd_2;  // group-level standard deviations #>   array[M_2] vector[N_2] z_2;  // standardized group-level effects #> } #> transformed parameters { #>   vector[N_1] r_1_1;  // actual group-level effects #>   vector[N_2] r_2_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   r_2_1 = (sd_2[1] * (z_2[1])); #>   lprior += student_t_lpdf(b[2] | 10, 0, 5); #>   lprior += normal_lpdf(Intercept | 0,10); #>   lprior += student_t_lpdf(sd_1 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #>   lprior += student_t_lpdf(sd_2 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Intercept; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n] + r_2_1[J_2[n]] * Z_2_1[n]; #>     } #>     target += poisson_log_glm_lpmf(Y | Xc, mu, b); #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #>   target += std_normal_lpdf(z_2[1]); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }"},{"path":"/reference/default_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors for Bayesian models — default_prior","title":"Default priors for Bayesian models — default_prior","text":"default_prior generic function can used   get default priors Bayesian models. original use   within brms package, new methods use   objects packages can registered generic.","code":""},{"path":"/reference/default_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors for Bayesian models — default_prior","text":"","code":"default_prior(object, ...)  get_prior(formula, ...)"},{"path":"/reference/default_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default priors for Bayesian models — default_prior","text":"object object whose class determine method used. symbolic description model fitted. ... arguments passed specific method. formula Synonym object use get_prior.","code":""},{"path":"/reference/default_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors for Bayesian models — default_prior","text":"Usually, brmsprior object. See   default_prior.default details.","code":""},{"path":"/reference/default_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default priors for Bayesian models — default_prior","text":"See default_prior.default default method applied brms models. can view available methods typing methods(default_prior).","code":""},{"path":[]},{"path":"/reference/default_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default priors for Bayesian models — default_prior","text":"","code":"## get all parameters and parameters classes to define priors on (prior <- default_prior(count ~ zAge + zBase * Trt + (1|patient) + (1|obs),                         data = epilepsy, family = poisson())) #>                   prior     class       coef   group resp dpar nlpar lb ub tag #>  student_t(3, 1.4, 2.5) Intercept                                              #>                  (flat)         b                                              #>                  (flat)         b       Trt1                                   #>                  (flat)         b       zAge                                   #>                  (flat)         b      zBase                                   #>                  (flat)         b zBase:Trt1                                   #>    student_t(3, 0, 2.5)        sd                                     0        #>    student_t(3, 0, 2.5)        sd                obs                  0        #>    student_t(3, 0, 2.5)        sd  Intercept     obs                  0        #>    student_t(3, 0, 2.5)        sd            patient                  0        #>    student_t(3, 0, 2.5)        sd  Intercept patient                  0        #>        source #>       default #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized)"},{"path":"/reference/density_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Density Ratios — density_ratio","title":"Compute Density Ratios — density_ratio","text":"Compute ratio two densities given points based draws corresponding distributions.","code":""},{"path":"/reference/density_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Density Ratios — density_ratio","text":"","code":"density_ratio(x, y = NULL, point = 0, n = 4096, ...)"},{"path":"/reference/density_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Density Ratios — density_ratio","text":"x Vector draws first distribution, usually posterior distribution quantity interest. y Optional vector draws second distribution, usually prior distribution quantity interest. NULL (default), density x evaluated. point Numeric values evaluate compare densities. Defaults 0. n Single numeric value. Influences accuracy density estimation. See density details. ... arguments passed density.","code":""},{"path":"/reference/density_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Density Ratios — density_ratio","text":"vector length equal length(point). y   provided, density ratio x y returned. Else,   density x returned.","code":""},{"path":"/reference/density_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Density Ratios — density_ratio","text":"order achieve sufficient accuracy density estimation,   draws usual required. may need effective   sample size 10,000 reliably estimate densities.","code":""},{"path":"/reference/density_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Density Ratios — density_ratio","text":"","code":"x <- rnorm(10000) y <- rnorm(10000, mean = 1) density_ratio(x, y, point = c(0, 1)) #> [1] 1.6180075 0.6426878"},{"path":"/reference/diagnostic-quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","title":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","text":"Extract quantities can used diagnose sampling behavior algorithms applied Stan back-end brms.","code":""},{"path":"/reference/diagnostic-quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","text":"","code":"# S3 method for class 'brmsfit' log_posterior(object, ...)  # S3 method for class 'brmsfit' nuts_params(object, pars = NULL, ...)  # S3 method for class 'brmsfit' rhat(x, pars = NULL, ...)  # S3 method for class 'brmsfit' neff_ratio(object, pars = NULL, ...)"},{"path":"/reference/diagnostic-quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","text":"object, x brmsfit object. ... Arguments passed individual methods. pars optional character vector parameter names. nuts_params NUTS sampler parameter names rather model parameters. pars omitted parameters included.","code":""},{"path":"/reference/diagnostic-quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","text":"exact form output depends method.","code":""},{"path":"/reference/diagnostic-quantities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","text":"details see   bayesplot-extractors.","code":""},{"path":"/reference/diagnostic-quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Diagnostic Quantities of brms Models — diagnostic-quantities","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(time ~ age * sex, data = kidney)  lp <- log_posterior(fit) head(lp)  np <- nuts_params(fit) str(np) # extract the number of divergence transitions sum(subset(np, Parameter == \"divergent__\")$Value)  head(rhat(fit)) head(neff_ratio(fit)) } # }"},{"path":"/reference/do_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a Function Call — do_call","title":"Execute a Function Call — do_call","text":"Execute function call similar .call, without deparsing function arguments. large number arguments (.e., thousand) function currently somewhat inefficient used care case.","code":""},{"path":"/reference/do_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a Function Call — do_call","text":"","code":"do_call(what, args, pkg = NULL, envir = parent.frame())"},{"path":"/reference/do_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a Function Call — do_call","text":"Either function non-empty character string naming function called. args list arguments function call. names attribute args gives argument names. pkg Optional name package search function character string. envir environment within evaluate call.","code":""},{"path":"/reference/do_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a Function Call — do_call","text":"result (evaluated) function call.","code":""},{"path":"/reference/draws-brms.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform brmsfit to draws objects — draws-brms","title":"Transform brmsfit to draws objects — draws-brms","text":"Transform brmsfit object format supported posterior package.","code":""},{"path":"/reference/draws-brms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform brmsfit to draws objects — draws-brms","text":"","code":"# S3 method for class 'brmsfit' as_draws(x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ...)  # S3 method for class 'brmsfit' as_draws_matrix(x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ...)  # S3 method for class 'brmsfit' as_draws_array(x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ...)  # S3 method for class 'brmsfit' as_draws_df(x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ...)  # S3 method for class 'brmsfit' as_draws_list(x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ...)  # S3 method for class 'brmsfit' as_draws_rvars(x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ...)"},{"path":"/reference/draws-brms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform brmsfit to draws objects — draws-brms","text":"x brmsfit object another R object methods defined. variable character vector providing variables extract. default, variables extracted. regex Logical; variable treated (vector ) regular expressions? variable x matching least one regular expressions selected. Defaults FALSE. inc_warmup warmup draws included? Defaults FALSE. ... Arguments passed individual methods (applicable).","code":""},{"path":"/reference/draws-brms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform brmsfit to draws objects — draws-brms","text":"subset iterations, chains, draws, use   subset_draws method   transforming brmsfit draws object.","code":""},{"path":[]},{"path":"/reference/draws-brms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform brmsfit to draws objects — draws-brms","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt + (1|patient),            data = epilepsy, family = poisson())  # extract posterior draws in an array format (draws_fit <- as_draws_array(fit)) posterior::summarize_draws(draws_fit)  # extract only certain variables as_draws_array(fit, variable = \"r_patient\") as_draws_array(fit, variable = \"^b_\", regex = TRUE)  # extract posterior draws in a random variables format as_draws_rvars(fit) } # }"},{"path":"/reference/draws-index-brms.html","id":null,"dir":"Reference","previous_headings":"","what":"Index brmsfit objects — draws-index-brms","title":"Index brmsfit objects — draws-index-brms","text":"Index brmsfit objects","code":""},{"path":"/reference/draws-index-brms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index brmsfit objects — draws-index-brms","text":"","code":"# S3 method for class 'brmsfit' variables(x, ...)  # S3 method for class 'brmsfit' nvariables(x, ...)  # S3 method for class 'brmsfit' niterations(x)  # S3 method for class 'brmsfit' nchains(x)  # S3 method for class 'brmsfit' ndraws(x)"},{"path":"/reference/draws-index-brms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index brmsfit objects — draws-index-brms","text":"x brmsfit object another R object methods defined. ... Arguments passed individual methods (applicable).","code":""},{"path":"/reference/emmeans-brms-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Support Functions for emmeans — emmeans-brms-helpers","title":"Support Functions for emmeans — emmeans-brms-helpers","text":"Functions required compatibility brms emmeans. Users required call functions . Instead, called automatically emmeans function emmeans package.","code":""},{"path":"/reference/emmeans-brms-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support Functions for emmeans — emmeans-brms-helpers","text":"","code":"# S3 method for class 'brmsfit' recover_data(   object,   data,   resp = NULL,   dpar = NULL,   nlpar = NULL,   re_formula = NA,   epred = FALSE,   ... )  # S3 method for class 'brmsfit' emm_basis(   object,   trms,   xlev,   grid,   vcov.,   resp = NULL,   dpar = NULL,   nlpar = NULL,   re_formula = NA,   epred = FALSE,   ... )"},{"path":"/reference/emmeans-brms-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support Functions for emmeans — emmeans-brms-helpers","text":"object object class brmsfit. data, trms, xlev, grid, vcov. Arguments required emmeans. resp Optional names response variables. specified, predictions performed specified response variables. dpar Optional name predicted distributional parameter. specified, expected predictions parameters returned. nlpar Optional name predicted non-linear parameter. specified, expected predictions parameters returned. re_formula Optional formula containing group-level effects considered prediction. NULL, include group-level effects; NA (default), include group-level effects. epred Logical. TRUE compute predictions posterior predictive distribution's mean (see posterior_epred.brmsfit) ignoring arguments dpar nlpar. Defaults FALSE. specified response transformation within formula, need set epred TRUE emmeans detect transformation. ... Additional arguments passed emmeans.","code":""},{"path":"/reference/emmeans-brms-helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Support Functions for emmeans — emmeans-brms-helpers","text":"order ensure compatibility brms models emmeans, predictions generated 'manually' via design matrix coefficient vector, rather via posterior_linpred.brmsfit. appears generally work well, note produces `.@linfct` slot contains computed predictions columns instead coefficients.","code":""},{"path":"/reference/emmeans-brms-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Support Functions for emmeans — emmeans-brms-helpers","text":"","code":"if (FALSE) { # \\dontrun{ fit1 <- brm(time | cens(censored) ~ age * sex + disease + (1|patient),             data = kidney, family = lognormal()) summary(fit1)  # summarize via 'emmeans' library(emmeans) rg <- ref_grid(fit1) em <- emmeans(rg, \"disease\") summary(em, point.est = mean)  # obtain estimates for the posterior predictive distribution's mean epred <- emmeans(fit1, \"disease\", epred = TRUE) summary(epred, point.est = mean)   # model with transformed response variable fit2 <- brm(log(mpg) ~ factor(cyl), data = mtcars) summary(fit2)  # results will be on the log scale by default emmeans(fit2, ~ cyl) # log transform is detected and can be adjusted automatically emmeans(fit2, ~ cyl, epred = TRUE, type = \"response\") } # }"},{"path":"/reference/epilepsy.html","id":null,"dir":"Reference","previous_headings":"","what":"Epileptic seizure counts — epilepsy","title":"Epileptic seizure counts — epilepsy","text":"Breslow Clayton (1993) analyze data initially   provided Thall Vail (1990) concerning   seizure counts randomized trial anti-convulsant   therapy epilepsy. Covariates treatment,   8-week baseline seizure counts, age patients years.","code":""},{"path":"/reference/epilepsy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epileptic seizure counts — epilepsy","text":"","code":"epilepsy"},{"path":"/reference/epilepsy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Epileptic seizure counts — epilepsy","text":"data frame 236 observations containing information   following 9 variables. Age age patients years Base seizure count 8-weeks baseline Trt Either 0 1 indicating    patient received anti-convulsant therapy patient patient number visit session number 1 (first visit)    4 (last visit) count seizure count two visits obs observation number,    unique identifier observation zAge Standardized Age zBase Standardized Base","code":""},{"path":"/reference/epilepsy.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Epileptic seizure counts — epilepsy","text":"Thall, P. F., & Vail, S. C. (1990).  covariance models longitudinal count data overdispersion.  Biometrics, 46(2), 657-671. Breslow, N. E., & Clayton, D. G. (1993).  Approximate inference generalized linear mixed models.  Journal American Statistical Association, 88(421), 9-25.","code":""},{"path":"/reference/epilepsy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epileptic seizure counts — epilepsy","text":"","code":"if (FALSE) { # \\dontrun{ ## poisson regression without random effects. fit1 <- brm(count ~ zAge + zBase * Trt,             data = epilepsy, family = poisson()) summary(fit1) plot(fit1)  ## poisson regression with varying intercepts of patients ## as well as normal priors for overall effects parameters. fit2 <- brm(count ~ zAge + zBase * Trt + (1|patient),             data = epilepsy, family = poisson(),             prior = set_prior(\"normal(0,5)\")) summary(fit2) plot(fit2) } # }"},{"path":"/reference/expose_functions.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Expose user-defined Stan functions — expose_functions.brmsfit","title":"Expose user-defined Stan functions — expose_functions.brmsfit","text":"Export user-defined Stan function optionally vectorize . details see expose_stan_functions.","code":""},{"path":"/reference/expose_functions.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expose user-defined Stan functions — expose_functions.brmsfit","text":"","code":"# S3 method for class 'brmsfit' expose_functions(x, vectorize = FALSE, env = globalenv(), ...)  expose_functions(x, ...)"},{"path":"/reference/expose_functions.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expose user-defined Stan functions — expose_functions.brmsfit","text":"x object class brmsfit. vectorize Logical; Indicates exposed functions vectorized via Vectorize. Defaults FALSE. env Environment functions made available. Defaults global environment. ... arguments passed expose_stan_functions.","code":""},{"path":"/reference/expp1.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential function plus one. — expp1","title":"Exponential function plus one. — expp1","text":"Computes exp(x) + 1.","code":""},{"path":"/reference/expp1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential function plus one. — expp1","text":"","code":"expp1(x)"},{"path":"/reference/expp1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential function plus one. — expp1","text":"x numeric complex vector.","code":""},{"path":"/reference/family.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Family Objects — family.brmsfit","title":"Extract Model Family Objects — family.brmsfit","text":"Extract Model Family Objects","code":""},{"path":"/reference/family.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Family Objects — family.brmsfit","text":"","code":"# S3 method for class 'brmsfit' family(object, resp = NULL, ...)"},{"path":"/reference/family.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Family Objects — family.brmsfit","text":"object object class brmsfit. resp Optional names response variables. specified, predictions performed specified response variables. ... Currently unused.","code":""},{"path":"/reference/family.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Family Objects — family.brmsfit","text":"brmsfamily object list objects multivariate models.","code":""},{"path":"/reference/fcor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed residual correlation (FCOR) structures — fcor","title":"Fixed residual correlation (FCOR) structures — fcor","text":"Set fixed residual correlation (FCOR) term brms. function evaluate arguments – exists purely help set model FCOR terms.","code":""},{"path":"/reference/fcor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed residual correlation (FCOR) structures — fcor","text":"","code":"fcor(M)"},{"path":"/reference/fcor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed residual correlation (FCOR) structures — fcor","text":"M Known correlation/covariance matrix response variable. vector passed, used diagonal entries (variances) correlations/covariances set zero. actual covariance matrix used likelihood obtained multiplying M square residual standard deviation parameter sigma estimated part model.","code":""},{"path":"/reference/fcor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed residual correlation (FCOR) structures — fcor","text":"object class 'fcor_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":[]},{"path":"/reference/fcor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed residual correlation (FCOR) structures — fcor","text":"","code":"if (FALSE) { # \\dontrun{ dat <- data.frame(y = rnorm(3)) V <- cbind(c(0.5, 0.3, 0.2), c(0.3, 1, 0.1), c(0.2, 0.1, 0.2)) fit <- brm(y ~ 1 + fcor(V), data = dat, data2 = list(V = V)) } # }"},{"path":"/reference/fitted.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Values of the Posterior Predictive Distribution — fitted.brmsfit","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmsfit","text":"method alias posterior_epred.brmsfit additional arguments obtaining summaries computed draws.","code":""},{"path":"/reference/fitted.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmsfit","text":"","code":"# S3 method for class 'brmsfit' fitted(   object,   newdata = NULL,   re_formula = NULL,   scale = c(\"response\", \"linear\"),   resp = NULL,   dpar = NULL,   nlpar = NULL,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   ... )"},{"path":"/reference/fitted.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. resp Optional names response variables. specified, predictions performed specified response variables. dpar Optional name predicted distributional parameter. specified, expected predictions parameters returned. nlpar Optional name predicted non-linear parameter. specified, expected predictions parameters returned. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). summary summary statistics returned instead raw values? Default TRUE.. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/fitted.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmsfit","text":"array predicted mean response values.   summary = FALSE output resembles   posterior_epred.brmsfit. summary = TRUE output depends family: categorical   ordinal families, output N x E x C array, N   number observations, E number summary statistics, C   number categories. families, output N x E   matrix. number summary statistics E equal 2 +   length(probs): Estimate column contains point estimates (either   mean median depending argument robust),   Est.Error column contains uncertainty estimates (either standard   deviation median absolute deviation depending argument   robust). remaining columns starting Q contain   quantile estimates specified via argument probs. multivariate models, additional dimension added output   indexes along different response variables.","code":""},{"path":[]},{"path":"/reference/fitted.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler)  ## compute expected predictions fitted_values <- fitted(fit) head(fitted_values)  ## plot expected predictions against actual response dat <- as.data.frame(cbind(Y = standata(fit)$Y, fitted_values)) ggplot(dat) + geom_point(aes(x = Estimate, y = Y)) } # }"},{"path":"/reference/fixef.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Population-Level Estimates — fixef.brmsfit","title":"Extract Population-Level Estimates — fixef.brmsfit","text":"Extract population-level ('fixed') effects brmsfit object.","code":""},{"path":"/reference/fixef.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Population-Level Estimates — fixef.brmsfit","text":"","code":"# S3 method for class 'brmsfit' fixef(   object,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   pars = NULL,   ... )"},{"path":"/reference/fixef.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Population-Level Estimates — fixef.brmsfit","text":"object object class brmsfit. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. pars Optional names coefficients extract. default, coefficients extracted. ... Currently ignored.","code":""},{"path":"/reference/fixef.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Population-Level Estimates — fixef.brmsfit","text":"summary TRUE, matrix returned   posterior_summary population-level effects.   summary FALSE, matrix one row per   posterior draw one column per population-level effect.","code":""},{"path":"/reference/fixef.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Population-Level Estimates — fixef.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(time | cens(censored) ~ age + sex + disease,            data = kidney, family = \"exponential\") fixef(fit) # extract only some coefficients fixef(fit, pars = c(\"age\", \"sex\")) } # }"},{"path":"/reference/get_cache_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Cache Folder for brms — get_cache_folder","title":"Determine Cache Folder for brms — get_cache_folder","text":"Checks provided file path includes directory. , returns directory. Otherwise, looks user‐defined `brms_cache_folder` option. option set, defaults current directory (\".\").","code":""},{"path":"/reference/get_cache_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Cache Folder for brms — get_cache_folder","text":"","code":"get_cache_folder(file)"},{"path":"/reference/get_cache_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Cache Folder for brms — get_cache_folder","text":"file file path (string) may include directory component.","code":""},{"path":"/reference/get_cache_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Cache Folder for brms — get_cache_folder","text":"string indicating folder use caching.","code":""},{"path":"/reference/get_dpar.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws of a Distributional Parameter — get_dpar","title":"Draws of a Distributional Parameter — get_dpar","text":"Get draws distributional parameter brmsprep mvbrmsprep object. function primarily useful developing custom families packages depending brms. function lets callers easily handle case distributional parameter predicted directly, via (non-)linear predictor fixed constant. See vignette vignette(\"brms_customfamilies\") example use case.","code":""},{"path":"/reference/get_dpar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws of a Distributional Parameter — get_dpar","text":"","code":"get_dpar(prep, dpar, i = NULL, inv_link = NULL)"},{"path":"/reference/get_dpar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws of a Distributional Parameter — get_dpar","text":"prep 'brmsprep' 'mvbrmsprep' object created prepare_predictions. dpar Name distributional parameter. observation numbers predictions shall extracted. NULL (default), observation extracted. Ignored dpar predicted. inv_link inverse link function applied? NULL (default), value chosen internally. particular, inv_link TRUE default custom families.","code":""},{"path":"/reference/get_dpar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws of a Distributional Parameter — get_dpar","text":"parameter predicted NULL   length() > 1, S x N matrix. parameter   predicted length() == 1, vector length S.   S number draws N number   observations length specified.","code":""},{"path":"/reference/get_dpar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws of a Distributional Parameter — get_dpar","text":"","code":"if (FALSE) { # \\dontrun{ posterior_predict_my_dist <- function(i, prep, ...) {   mu <- brms::get_dpar(prep, \"mu\", i = i)   mypar <- brms::get_dpar(prep, \"mypar\", i = i)   my_rng(mu, mypar) } } # }"},{"path":"/reference/get_refmodel.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","title":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","text":"get_refmodel.brmsfit method can used create reference model structure needed projpred package performing projection predictive variable selection. method called automatically performing variable selection via varsel cv_varsel, rarely need call manually .","code":""},{"path":"/reference/get_refmodel.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","text":"","code":"get_refmodel.brmsfit(   object,   newdata = NULL,   resp = NULL,   cvfun = NULL,   dis = NULL,   latent = FALSE,   brms_seed = NULL,   ... )"},{"path":"/reference/get_refmodel.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. resp Optional names response variables. specified, predictions performed specified response variables. cvfun Optional cross-validation function (see get_refmodel details). NULL (default), cvfun defined internally based kfold.brmsfit. dis Passed argument dis init_refmodel, leave NULL unless projpred complains . latent See argument latent extend_family. Setting TRUE requires projpred version >= 2.4.0. brms_seed seed used infer seeds kfold.brmsfit sampling group-level effects new levels (multilevel models). NULL, set.seed called . NULL, pseudorandom number generator (PRNG) state reset (state calling function) upon exiting function. ... arguments passed init_refmodel.","code":""},{"path":"/reference/get_refmodel.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","text":"refmodel object used conjunction   projpred package.","code":""},{"path":"/reference/get_refmodel.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","text":"extract_model_data function used internally   get_refmodel.brmsfit ignores arguments wrhs orhs   (warning thrown non-NULL). example, arguments   weightsnew offsetnew   proj_linpred,   proj_predict,   predict.refmodel passed   wrhs orhs, respectively.","code":""},{"path":"/reference/get_refmodel.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projection Predictive Variable Selection: Get Reference Model — get_refmodel.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # fit a simple model fit <- brm(count ~ zAge + zBase * Trt,            data = epilepsy, family = poisson()) summary(fit)  # The following code requires the 'projpred' package to be installed: library(projpred)  # perform variable selection without cross-validation vs <- varsel(fit) summary(vs) plot(vs)  # perform variable selection with cross-validation cv_vs <- cv_varsel(fit) summary(cv_vs) plot(cv_vs) } # }"},{"path":"/reference/get_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract response values — get_y","title":"Extract response values — get_y","text":"Extract response values brmsfit object.","code":""},{"path":"/reference/get_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract response values — get_y","text":"","code":"get_y(x, resp = NULL, sort = FALSE, warn = FALSE, ...)"},{"path":"/reference/get_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract response values — get_y","text":"x brmsfit object. resp Optional names response variables extract values. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). warn internal use . ... arguments passed standata.","code":""},{"path":"/reference/get_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract response values — get_y","text":"Returns vector response values univariate models   matrix response values one column per response variable   multivariate models.","code":""},{"path":"/reference/gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Gaussian process terms in brms — gp","title":"Set up Gaussian process terms in brms — gp","text":"Set Gaussian process (GP) term brms. function evaluate arguments – exists purely help set model GP terms.","code":""},{"path":"/reference/gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Gaussian process terms in brms — gp","text":"","code":"gp(   ...,   by = NA,   k = NA,   cov = \"exp_quad\",   iso = TRUE,   gr = TRUE,   cmc = TRUE,   scale = TRUE,   c = 5/4 )"},{"path":"/reference/gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up Gaussian process terms in brms — gp","text":"... One predictors GP. numeric factor variable length predictor. numeric vector case, elements multiply values returned GP. factor variable case, separate GP fitted factor level. k Optional number basis functions computing Hilbert-space approximate GPs. NA (default), exact GPs computed. cov Name covariance kernel. Currently supported \"exp_quad\" (exponentiated-quadratic kernel; default), \"matern32\" (Matern 3/2 kernel), \"matern52\" (Matern 5/2 kernel), \"exponential\" (exponential kernel; alias: \"matern12\"). iso flag indicate whether isotropic (TRUE; default) non-isotropic GP used. former case, amount smoothing applied predictors. latter case, predictors may different smoothing. Ignored single predictor supplied. gr Logical; Indicates auto-grouping used (defaults TRUE). enabled, observations sharing predictor values represented latent variable GP. improve sampling efficiency drastically number unique predictor combinations small relative number observations. cmc Logical; relevant factor. TRUE (default), cell-mean coding used -factor, one GP per level estimated. FALSE, contrast GPs estimated according contrasts set -factor. scale Logical; TRUE (default), predictors scaled maximum Euclidean distance two points 1. often improves sampling speed convergence. Scaling also affects estimated length-scale parameters resemble scaled predictors (original predictors) scale TRUE. c Numeric value used approximate GPs. Defines multiplicative constant predictors' range predictions computed. good default c = 5/4 still working providing better recommendations.","code":""},{"path":"/reference/gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up Gaussian process terms in brms — gp","text":"object class 'gp_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":"/reference/gp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up Gaussian process terms in brms — gp","text":"GP stochastic process,  describes relation one predictors  \\(x = (x_1, ..., x_d)\\) response \\(f(x)\\),  \\(d\\) number predictors. GP  generalization multivariate normal distribution  infinite number dimensions. Thus, can  interpreted prior functions. values \\(f( )\\)  finite set locations jointly multivariate  normal, covariance matrix defined covariance  kernel \\(k_p(x_i, x_j)\\), \\(p\\) vector parameters  GP:  $$(f(x_1), \\ldots f(x_n) \\sim MVN(0, (k_p(x_i, x_j))_{,j=1}^n) .$$  smoothness general behavior function \\(f\\)  depends choice covariance kernel.  detailed introduction Gaussian processes,  see https://en.wikipedia.org/wiki/Gaussian_process. mathematical details supported kernels, please see Stan manual:  https://mc-stan.org/docs/functions-reference/matrix_operations.html  \"Gaussian Process Covariance Functions\".","code":""},{"path":[]},{"path":"/reference/gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up Gaussian process terms in brms — gp","text":"","code":"if (FALSE) { # \\dontrun{ # simulate data using the mgcv package dat <- mgcv::gamSim(1, n = 30, scale = 2)  # fit a simple GP model fit1 <- brm(y ~ gp(x2), dat, chains = 2) summary(fit1) me1 <- conditional_effects(fit1, ndraws = 200, spaghetti = TRUE) plot(me1, ask = FALSE, points = TRUE)  # fit a more complicated GP model and use an approximate GP for x2 fit2 <- brm(y ~ gp(x0) + x1 + gp(x2, k = 10) + x3, dat, chains = 2) summary(fit2) me2 <- conditional_effects(fit2, ndraws = 200, spaghetti = TRUE) plot(me2, ask = FALSE, points = TRUE)  # fit a multivariate GP model with Matern 3/2 kernel fit3 <- brm(y ~ gp(x1, x2, cov = \"matern32\"), dat, chains = 2) summary(fit3) me3 <- conditional_effects(fit3, ndraws = 200, spaghetti = TRUE) plot(me3, ask = FALSE, points = TRUE)  # compare model fit loo(fit1, fit2, fit3)  # simulate data with a factor covariate dat2 <- mgcv::gamSim(4, n = 90, scale = 2)  # fit separate gaussian processes for different levels of 'fac' fit4 <- brm(y ~ gp(x2, by = fac), dat2, chains = 2) summary(fit4) plot(conditional_effects(fit4), points = TRUE) } # }"},{"path":"/reference/gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up basic grouping terms in brms — gr","title":"Set up basic grouping terms in brms — gr","text":"Function used set basic grouping term brms. function evaluate arguments – exists purely help set model grouping terms. gr called implicitly inside package usually need call directly.","code":""},{"path":"/reference/gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up basic grouping terms in brms — gr","text":"","code":"gr(   ...,   by = NULL,   cor = TRUE,   id = NA,   pw = NULL,   cov = NULL,   dist = \"gaussian\" )"},{"path":"/reference/gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up basic grouping terms in brms — gr","text":"... One terms containing grouping factors. optional factor variable, specifying sub-populations groups. level variable, separate variance-covariance matrix fitted. Levels grouping factor must nested levels variable. cor Logical. TRUE (default), group-level terms modelled correlated. id Optional character string. group-level terms across model id modeled correlated (cor TRUE). See brmsformula details. pw Optional numeric variable specifying prior weights. weight contribution group log-prior group-level coefficients. one distinct value level grouping variable. cov optional matrix proportional within-group covariance matrix group-level effects. levels grouping factor appear rownames corresponding matrix. argument can used, among others, model pedigrees phylogenetic effects. See vignette(\"brms_phylogenetics\") details. default, levels grouping factor modeled independent . dist Name distribution group-level effects. Currently \"gaussian\" option.","code":""},{"path":[]},{"path":"/reference/gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up basic grouping terms in brms — gr","text":"","code":"if (FALSE) { # \\dontrun{ # model using basic lme4-style formula fit1 <- brm(count ~ Trt + (1|patient), data = epilepsy) summary(fit1)  # equivalent model using 'gr' which is called anyway internally fit2 <- brm(count ~ Trt + (1|gr(patient)), data = epilepsy) summary(fit2)  # include Trt as a by variable fit3 <- brm(count ~ Trt + (1|gr(patient, by = Trt)), data = epilepsy) summary(fit3)  # include a group-level weight variable epilepsy[['patient_samp_wgt']] <- c(1, rep(c(0.9, 1.1), each = 29)) fit4 <- brm(count ~ Trt + (1|gr(patient, pw = patient_samp_wgt)),             data = epilepsy) summary(fit4) } # }"},{"path":"/reference/horseshoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Regularized horseshoe priors in brms — horseshoe","title":"Regularized horseshoe priors in brms — horseshoe","text":"Function used set regularized horseshoe priors related hierarchical shrinkage priors brms. function evaluate arguments – exists purely help set model.","code":""},{"path":"/reference/horseshoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regularized horseshoe priors in brms — horseshoe","text":"","code":"horseshoe(   df = 1,   scale_global = 1,   df_global = 1,   scale_slab = 2,   df_slab = 4,   par_ratio = NULL,   autoscale = TRUE,   main = FALSE )"},{"path":"/reference/horseshoe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regularized horseshoe priors in brms — horseshoe","text":"df Degrees freedom student-t prior local shrinkage parameters. Defaults 1. scale_global Scale student-t prior global shrinkage parameter. Defaults 1. linear models, scale_global internally multiplied residual standard deviation parameter sigma. df_global Degrees freedom student-t prior global shrinkage parameter. Defaults 1. df_global greater 1, shape prior longer resemble horseshoe may appropriately called hierarchical shrinkage prior case. scale_slab Scale Student-t slab. Defaults 2. original unregularized horseshoe prior obtained setting scale_slab infinite, can approximate practice setting large real value. df_slab Degrees freedom student-t slab. Defaults 4. par_ratio Ratio expected number non-zero coefficients expected number zero coefficients. specified, scale_global ignored internally computed par_ratio / sqrt(N), N total number observations data. autoscale Logical; indicating whether horseshoe prior scaled using residual standard deviation sigma possible sensible (defaults TRUE). Autoscaling applied distributional parameters model contain parameter sigma. main Logical (defaults FALSE); relevant horseshoe prior spans multiple parameter classes. case, arguments given single instance main TRUE used. Arguments given instances prior ignored. See Examples section .","code":""},{"path":"/reference/horseshoe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regularized horseshoe priors in brms — horseshoe","text":"character string obtained match.call()   additional arguments.","code":""},{"path":"/reference/horseshoe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regularized horseshoe priors in brms — horseshoe","text":"horseshoe prior special shrinkage prior initially proposed   Carvalho et al. (2009).   symmetric around zero fat tails infinitely large spike   zero. makes ideal sparse models   many regression coefficients, although minority non-zero.   horseshoe prior can applied population-level effects   (excluding intercept) using set_prior(\"horseshoe(1)\").   1 implies student-t prior local shrinkage   parameters 1 degrees freedom. may, however, lead   increased number divergent transition Stan.   Accordingly, increasing degrees freedom slightly higher values   (e.g., 3) may often better option, although prior   longer resembles horseshoe case.   , scale global shrinkage parameter plays important role   amount shrinkage applied. defaults 1,   may result shrinkage (Piironen & Vehtari, 2016).   thus possible change scale using argument scale_global   horseshoe prior, instance horseshoe(1, scale_global = 0.5).   linear models, scale_global internally multiplied   residual standard deviation parameter sigma. See Piironen   Vehtari (2016) recommendations properly set global scale.   degrees freedom global shrinkage prior may also   adjusted via argument df_global.   Piironen Vehtari (2017) recommend specifying ratio   expected number non-zero coefficients expected number zero   coefficients par_ratio rather scale_global directly.   proposed Piironen Vehtari (2017), additional regularization   applied affects non-zero coefficients. amount   regularization can controlled via scale_slab df_slab.   make sure shrinkage can equally affect coefficients,   predictors one scale.   Generally, models horseshoe priors likely models   divergent transitions increasing adapt_delta   0.8 values closer 1 often necessary.   See documentation brm instructions   increase adapt_delta. prior account scale differences terms   applied . Accordingly, please make sure terms   comparable scale ensure shrinkage applied properly. Currently, following classes support horseshoe prior: b   (overall regression coefficients), sds (SDs smoothing splines),   sdgp (SDs Gaussian processes), ar (autoregressive   coefficients), ma (moving average coefficients), sderr (SD   latent residuals), sdcar (SD spatial CAR structures), sd   (SD varying coefficients).","code":""},{"path":"/reference/horseshoe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Regularized horseshoe priors in brms — horseshoe","text":"Carvalho, C. M., Polson, N. G., & Scott, J. G. (2009). Handling sparsity via horseshoe. Artificial Intelligence Statistics. http://proceedings.mlr.press/v5/carvalho09a Piironen J. & Vehtari . (2017). Hyperprior Choice Global Shrinkage Parameter Horseshoe Prior. Artificial Intelligence Statistics. https://arxiv.org/pdf/1610.05559v1 Piironen, J., Vehtari, . (2017). Sparsity information regularization horseshoe shrinkage priors. Electronic Journal Statistics. https://arxiv.org/abs/1707.01694","code":""},{"path":[]},{"path":"/reference/horseshoe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regularized horseshoe priors in brms — horseshoe","text":"","code":"set_prior(horseshoe(df = 3, par_ratio = 0.1)) #> b ~ horseshoe(df = 3, par_ratio = 0.1)  # specify the horseshoe prior across multiple parameter classes set_prior(horseshoe(df = 3, par_ratio = 0.1, main = TRUE), class = \"b\") +   set_prior(horseshoe(), class = \"sd\") #>                                            prior class coef group resp dpar #>  horseshoe(df = 3, par_ratio = 0.1, main = TRUE)     b                      #>                                      horseshoe()    sd                      #>  nlpar   lb   ub tag source #>        <NA> <NA>       user #>        <NA> <NA>       user"},{"path":"/reference/hypothesis.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","title":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","text":"Perform non-linear hypothesis testing model parameters.","code":""},{"path":"/reference/hypothesis.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","text":"","code":"# S3 method for class 'brmsfit' hypothesis(   x,   hypothesis,   class = \"b\",   group = \"\",   scope = c(\"standard\", \"ranef\", \"coef\"),   alpha = 0.05,   robust = FALSE,   seed = NULL,   ... )  hypothesis(x, ...)  # Default S3 method hypothesis(x, hypothesis, alpha = 0.05, robust = FALSE, ...)"},{"path":"/reference/hypothesis.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","text":"x R object. brmsfit object, must coercible data.frame. latter case, variables used hypothesis argument need correspond column names x, rows treated representing posterior draws variables. hypothesis character vector specifying one non-linear hypothesis concerning parameters model. class string specifying class parameters tested. Default \"b\" population-level effects. typical options \"sd\" \"cor\". class = NULL, parameters can tested , specified full name (see also variables) group Name grouping factor evaluate group-level effects parameters related grouping factor. scope Indicates look variables specified hypothesis. \"standard\", use full parameter names (subject restriction given class group). \"coef\" \"ranef\", compute hypothesis levels grouping factor given \"group\", based output coef.brmsfit ranef.brmsfit, respectively. alpha alpha-level tests (default 0.05; see 'Details' information). robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. seed single numeric value passed set.seed make results reproducible. currently relevant point hypotheses scope least two parameters (see Details). ... Currently ignored.","code":""},{"path":"/reference/hypothesis.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","text":"brmshypothesis object.","code":""},{"path":"/reference/hypothesis.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","text":"Among others, hypothesis computes evidence ratio   (Evid.Ratio) hypothesis. one-sided hypothesis,   just posterior probability (Post.Prob) hypothesis   alternative. , hypothesis form   > b, evidence ratio ratio posterior probability   > b posterior probability < b.   example, values greater one indicate evidence favor   > b larger evidence favor < b.   two-sided (point) hypothesis, evidence ratio Bayes factor   hypothesis alternative computed via Savage-Dickey density   ratio method. posterior density point interest   divided prior density point. Values greater one   indicate evidence favor point hypothesis increased   seeing data. order calculate Bayes factor, parameters   related hypothesis must proper priors argument   sample_prior function brm must set \"yes\".   Otherwise Evid.Ratio (Post.Prob) NA. Please note Savage-Dickey density ratio implemented provides   basic test point hypotheses. recommended use   bridge sampling instead (via bayes_factor relies   bridgesampling package). interpreting Bayes factors point   hypotheses, make sure priors reasonable carefully chosen,   result depend heavily priors. particular, avoid using   default priors. Additionally, note point hypotheses scope   one parameter (e.g., testing equality two parameters) involve   random sampling priors parameters (accommodate   assumption priors different parameters independent ).   introduces element randomness hypothesis tests. Consider   repeating test assure results sufficiently stable, use argument   seed reproducibility. Finally, note , technical reasons,   sample priors certain parameters classes. notably, include   overall intercept parameters (prior class \"Intercept\") well group-level   coefficients. one-sided hypotheses, Evid.Ratio may sometimes 0 Inf implying   small large evidence, respectively, favor tested hypothesis.   one-sided hypotheses pairs, basically means posterior   draws side value dividing two hypotheses.   sense, instead 0 Inf, may rather read   Evid.Ratio smaller 1 / S greater S, respectively,   S denotes number posterior draws used   computations. argument alpha specifies size credible interval   (.e., Bayesian confidence interval). instance, tested   two-sided hypothesis set alpha = 0.05 (5%) , credible   interval contain 1 - alpha = 0.95 (95%) posterior   values. Hence, alpha * 100% posterior values   lie outside credible interval. Although allows testing   hypotheses similar manner frequentist null-hypothesis   testing framework, strongly argue using arbitrary cutoffs (e.g.,   p < .05) determine 'existence' effect.","code":""},{"path":[]},{"path":"/reference/hypothesis.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-Linear Hypothesis Testing — hypothesis.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## define priors prior <- c(set_prior(\"normal(0,2)\", class = \"b\"),            set_prior(\"student_t(10,0,1)\", class = \"sigma\"),            set_prior(\"student_t(10,0,1)\", class = \"sd\"))  ## fit a linear mixed effects models fit <- brm(time ~ age + sex + disease + (1 + age|patient),            data = kidney, family = lognormal(),            prior = prior, sample_prior = \"yes\",            control = list(adapt_delta = 0.95))  ## perform two-sided hypothesis testing (hyp1 <- hypothesis(fit, \"sexfemale = age + diseasePKD\")) plot(hyp1) hypothesis(fit, \"exp(age) - 3 = 0\", alpha = 0.01)  ## perform one-sided hypothesis testing hypothesis(fit, \"diseasePKD + diseaseGN - 3 < 0\")  hypothesis(fit, \"age < Intercept\",            class = \"sd\", group  = \"patient\")  ## test the amount of random intercept variance on all variance h <- paste(\"sd_patient__Intercept^2 / (sd_patient__Intercept^2 +\",            \"sd_patient__age^2 + sigma^2) = 0\") (hyp2 <- hypothesis(fit, h, class = NULL)) plot(hyp2)  ## test more than one hypothesis at once h <- c(\"diseaseGN = diseaseAN\", \"2 * diseaseGN - diseasePKD = 0\") (hyp3 <- hypothesis(fit, h)) plot(hyp3, ignore_prior = TRUE)  ## compute hypotheses for all levels of a grouping factor hypothesis(fit, \"age = 0\", scope = \"coef\", group = \"patient\")  ## use the default method dat <- as.data.frame(fit) str(dat) hypothesis(dat, \"b_age > 0\") } # }"},{"path":"/reference/inhaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Clarity of inhaler instructions — inhaler","title":"Clarity of inhaler instructions — inhaler","text":"Ezzet Whitehead (1991) analyze data two-treatment,   two-period crossover trial compare 2 inhalation devices   delivering drug salbutamol 286 asthma patients.   Patients asked rate clarity leaflet instructions   accompanying device, using 4-point ordinal scale.","code":""},{"path":"/reference/inhaler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clarity of inhaler instructions — inhaler","text":"","code":"inhaler"},{"path":"/reference/inhaler.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clarity of inhaler instructions — inhaler","text":"data frame 572 observations containing   information following 5 variables. subject subject number rating rating inhaler instructions    scale ranging 1 4 treat contrast indicate    two inhaler devices used period contrast indicate time administration carry contrast indicate possible carry effects","code":""},{"path":"/reference/inhaler.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clarity of inhaler instructions — inhaler","text":"Ezzet, F., & Whitehead, J. (1991).   random effects model ordinal responses crossover trial.   Statistics Medicine, 10(6), 901-907.","code":""},{"path":"/reference/inhaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clarity of inhaler instructions — inhaler","text":"","code":"if (FALSE) { # \\dontrun{ ## ordinal regression with family \"sratio\" fit1 <- brm(rating ~ treat + period + carry,             data = inhaler, family = sratio(),             prior = set_prior(\"normal(0,5)\")) summary(fit1) plot(fit1)  ## ordinal regression with family \"cumulative\" ## and random intercept over subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),               data = inhaler, family = cumulative(),               prior = set_prior(\"normal(0,5)\")) summary(fit2) plot(fit2) } # }"},{"path":"/reference/inv_logit_scaled.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled inverse logit-link — inv_logit_scaled","title":"Scaled inverse logit-link — inv_logit_scaled","text":"Computes inv_logit(x) * (ub - lb) + lb","code":""},{"path":"/reference/inv_logit_scaled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled inverse logit-link — inv_logit_scaled","text":"","code":"inv_logit_scaled(x, lb = 0, ub = 1)"},{"path":"/reference/inv_logit_scaled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaled inverse logit-link — inv_logit_scaled","text":"x numeric complex vector. lb Lower bound defaulting 0. ub Upper bound defaulting 1.","code":""},{"path":"/reference/inv_logit_scaled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaled inverse logit-link — inv_logit_scaled","text":"numeric complex vector lb ub.","code":""},{"path":"/reference/is.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a brmsfit object — is.brmsfit","title":"Checks if argument is a brmsfit object — is.brmsfit","text":"Checks argument brmsfit object","code":""},{"path":"/reference/is.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a brmsfit object — is.brmsfit","text":"","code":"is.brmsfit(x)"},{"path":"/reference/is.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a brmsfit object — is.brmsfit","text":"x R object","code":""},{"path":"/reference/is.brmsfit_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a brmsfit_multiple object — is.brmsfit_multiple","title":"Checks if argument is a brmsfit_multiple object — is.brmsfit_multiple","text":"Checks argument brmsfit_multiple object","code":""},{"path":"/reference/is.brmsfit_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a brmsfit_multiple object — is.brmsfit_multiple","text":"","code":"is.brmsfit_multiple(x)"},{"path":"/reference/is.brmsfit_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a brmsfit_multiple object — is.brmsfit_multiple","text":"x R object","code":""},{"path":"/reference/is.brmsformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a brmsformula object — is.brmsformula","title":"Checks if argument is a brmsformula object — is.brmsformula","text":"Checks argument brmsformula object","code":""},{"path":"/reference/is.brmsformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a brmsformula object — is.brmsformula","text":"","code":"is.brmsformula(x)"},{"path":"/reference/is.brmsformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a brmsformula object — is.brmsformula","text":"x R object","code":""},{"path":"/reference/is.brmsprior.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a brmsprior object — is.brmsprior","title":"Checks if argument is a brmsprior object — is.brmsprior","text":"Checks argument brmsprior object","code":""},{"path":"/reference/is.brmsprior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a brmsprior object — is.brmsprior","text":"","code":"is.brmsprior(x)"},{"path":"/reference/is.brmsprior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a brmsprior object — is.brmsprior","text":"x R object","code":""},{"path":"/reference/is.brmsterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a brmsterms object — is.brmsterms","title":"Checks if argument is a brmsterms object — is.brmsterms","text":"Checks argument brmsterms object","code":""},{"path":"/reference/is.brmsterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a brmsterms object — is.brmsterms","text":"","code":"is.brmsterms(x)"},{"path":"/reference/is.brmsterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a brmsterms object — is.brmsterms","text":"x R object","code":""},{"path":[]},{"path":"/reference/is.cor_brms.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is a correlation structure — is.cor_brms","title":"Check if argument is a correlation structure — is.cor_brms","text":"Check argument one correlation structures used brms.","code":""},{"path":"/reference/is.cor_brms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is a correlation structure — is.cor_brms","text":"","code":"is.cor_brms(x)  is.cor_arma(x)  is.cor_cosy(x)  is.cor_sar(x)  is.cor_car(x)  is.cor_fixed(x)"},{"path":"/reference/is.cor_brms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is a correlation structure — is.cor_brms","text":"x R object.","code":""},{"path":"/reference/is.mvbrmsformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a mvbrmsformula object — is.mvbrmsformula","title":"Checks if argument is a mvbrmsformula object — is.mvbrmsformula","text":"Checks argument mvbrmsformula object","code":""},{"path":"/reference/is.mvbrmsformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a mvbrmsformula object — is.mvbrmsformula","text":"","code":"is.mvbrmsformula(x)"},{"path":"/reference/is.mvbrmsformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a mvbrmsformula object — is.mvbrmsformula","text":"x R object","code":""},{"path":"/reference/is.mvbrmsterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a mvbrmsterms object — is.mvbrmsterms","title":"Checks if argument is a mvbrmsterms object — is.mvbrmsterms","text":"Checks argument mvbrmsterms object","code":""},{"path":"/reference/is.mvbrmsterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a mvbrmsterms object — is.mvbrmsterms","text":"","code":"is.mvbrmsterms(x)"},{"path":"/reference/is.mvbrmsterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a mvbrmsterms object — is.mvbrmsterms","text":"x R object","code":""},{"path":[]},{"path":"/reference/kfold.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Fold Cross-Validation — kfold.brmsfit","title":"K-Fold Cross-Validation — kfold.brmsfit","text":"Perform exact K-fold cross-validation refitting model \\(K\\) times leaving one-\\(K\\)th original data. Folds can run parallel using future package.","code":""},{"path":"/reference/kfold.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Fold Cross-Validation — kfold.brmsfit","text":"","code":"# S3 method for class 'brmsfit' kfold(   x,   ...,   K = 10,   Ksub = NULL,   folds = NULL,   group = NULL,   joint = FALSE,   compare = TRUE,   resp = NULL,   model_names = NULL,   save_fits = FALSE,   recompile = NULL,   future_args = list() )"},{"path":"/reference/kfold.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Fold Cross-Validation — kfold.brmsfit","text":"x brmsfit object. ... arguments passed brm. K number subsets equal (possible) size data partitioned performing \\(K\\)-fold cross-validation. model refit K times, time leaving one K subsets. K equal total number observations data \\(K\\)-fold cross-validation equivalent exact leave-one-cross-validation. Ksub Optional number subsets (subsets defined K) evaluated. NULL (default), \\(K\\)-fold cross-validation performed subsets. Ksub single integer, Ksub subsets (K) subsets randomly chosen. Ksub consists multiple integers one-dimensional array (created via .array) potentially length one, corresponding subsets used. argument primarily useful, evaluation subsets infeasible reason. folds Determines subsets constructed. Possible values NULL (default), \"stratified\", \"grouped\", \"loo\". May also vector length equal number observations data. Alters way group handled. information provided 'Details' section. group Optional name grouping variable factor model. exactly done variable depends argument folds. information provided 'Details' section. joint Indicates observations' log likelihoods shall considered jointly ELPD computation. \"obs\" FALSE (default), observation considered separately. enables comparability kfold loo. \"fold\" TRUE, joint log likelihoods per fold used. \"group\", joint log likelihoods per group within folds used (available argument group specified). compare flag indicating information criteria models compared via loo_compare. resp Optional names response variables. specified, predictions performed specified response variables. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names. save_fits TRUE, component fits added returned object store cross-validated brmsfit objects indices omitted observations fold. Defaults FALSE. recompile Logical, indicating whether Stan model recompiled. may necessary running reloo another machine one used fit model. future_args list arguments passed future additional control parallel execution activated.","code":""},{"path":"/reference/kfold.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Fold Cross-Validation — kfold.brmsfit","text":"kfold returns object similar structure   objects returned loo waic methods   can used post-processing functions.","code":""},{"path":"/reference/kfold.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-Fold Cross-Validation — kfold.brmsfit","text":"kfold function performs exact \\(K\\)-fold   cross-validation. First data partitioned \\(K\\) folds   (.e. subsets) equal (close equal possible) size default.   model refit \\(K\\) times, time leaving one   K subsets. \\(K\\) equal total number observations   data \\(K\\)-fold cross-validation equivalent exact   leave-one-cross-validation (loo efficient   approximation). compare_ic function also compatible   objects returned kfold. subsets can constructed multiple different ways: folds group NULL, subsets   randomly chosen equal (close equal   possible) size. folds NULL group specified,   data split subsets, time omitting observations one   factor levels, ignoring argument K. folds = \"stratified\" subsets stratified   group using loo::kfold_split_stratified. folds = \"grouped\" subsets split   group using loo::kfold_split_grouped. folds = \"loo\" exact leave-one-cross-validation   performed K ignored. , group   specified, observations corresponding factor level   currently predicted single value omitted. Thus, case,   predicted values subset omitted ones. folds numeric vector, must contain one element per   observation data. element vector integer   1:K indicating K folds corresponding   observation belongs. convenience functions available   loo package create integer vectors use purpose   (see Examples section also   kfold-helpers page). running kfold brmsfit created   cmdstanr backend different R session, several recompilations   triggered default, cmdstanr writes model   executable temporary directory. avoid , set option   \"cmdstanr_write_stan_file_dir\" nontemporary path choice   creating original brmsfit (see section 'Examples' ).","code":""},{"path":[]},{"path":"/reference/kfold.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Fold Cross-Validation — kfold.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient) + (1|obs),            data = epilepsy, family = poisson()) # throws warning about some pareto k estimates being too high (loo1 <- loo(fit1)) # perform 10-fold cross validation (kfold1 <- kfold(fit1, chains = 1))  # use joint likelihoods per fold for ELPD evaluation kfold(fit1, chains = 1, joint = \"fold\")  # use the future package for parallelization of models # that is to fit models belonging to different folds in parallel library(future) plan(multisession, workers = 4) kfold(fit1, chains = 1) plan(sequential)  ## to avoid recompilations when running kfold() on a 'cmdstanr'-backend fit ## in a fresh R session, set option 'cmdstanr_write_stan_file_dir' before ## creating the initial 'brmsfit' ## CAUTION: the following code creates some files in the current working ## directory: two 'model_<hash>.stan' files, one 'model_<hash>(.exe)' ## executable, and one 'fit_cmdstanr_<some_number>.rds' file set.seed(7) fname <- paste0(\"fit_cmdstanr_\", sample.int(.Machine$integer.max, 1)) options(cmdstanr_write_stan_file_dir = getwd()) fit_cmdstanr <- brm(rate ~ conc + state, data = Puromycin,                     backend = \"cmdstanr\", file = fname)  # now restart the R session and run the following (after attaching 'brms') set.seed(7) fname <- paste0(\"fit_cmdstanr_\", sample.int(.Machine$integer.max, 1)) fit_cmdstanr <- brm(rate ~ conc + state,                     data = Puromycin,                     backend = \"cmdstanr\",                     file = fname) kfold_cmdstanr <- kfold(fit_cmdstanr, K = 2) } # }"},{"path":"/reference/kfold_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from K-Fold Cross-Validation — kfold_predict","title":"Predictions from K-Fold Cross-Validation — kfold_predict","text":"Compute evaluate predictions performing K-fold cross-validation via kfold.","code":""},{"path":"/reference/kfold_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from K-Fold Cross-Validation — kfold_predict","text":"","code":"kfold_predict(x, method = \"posterior_predict\", resp = NULL, ...)"},{"path":"/reference/kfold_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from K-Fold Cross-Validation — kfold_predict","text":"x Object class 'kfold' computed kfold. kfold_predict work, fitted model objects need stored via argument save_fits kfold. method Method used obtain predictions. Can set \"posterior_predict\" (default), \"posterior_epred\", \"posterior_linpred\". details, see respective function documentations. resp Optional names response variables. specified, predictions performed specified response variables. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/kfold_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from K-Fold Cross-Validation — kfold_predict","text":"list two slots named 'y' 'yrep'.   Slot y contains vector observed responses.   Slot yrep contains matrix predicted responses,   rows posterior draws columns observations.","code":""},{"path":[]},{"path":"/reference/kfold_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions from K-Fold Cross-Validation — kfold_predict","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zBase * Trt + (1|patient),            data = epilepsy, family = poisson())  # perform k-fold cross validation (kf <- kfold(fit, save_fits = TRUE, chains = 1))  # define a loss function rmse <- function(y, yrep) {   yrep_mean <- colMeans(yrep)   sqrt(mean((yrep_mean - y)^2)) }  # predict responses and evaluate the loss kfp <- kfold_predict(kf) rmse(y = kfp$y, yrep = kfp$yrep) } # }"},{"path":"/reference/kidney.html","id":null,"dir":"Reference","previous_headings":"","what":"Infections in kidney patients — kidney","title":"Infections in kidney patients — kidney","text":"dataset, originally discussed   McGilchrist Aisbett (1991), describes first second   (possibly right censored) recurrence time   infection kidney patients using portable dialysis equipment.   addition, information risk variables age, sex disease   type provided.","code":""},{"path":"/reference/kidney.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infections in kidney patients — kidney","text":"","code":"kidney"},{"path":"/reference/kidney.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Infections in kidney patients — kidney","text":"data frame 76 observations containing   information following 7 variables. time time first second recurrence infection,    time censoring recur factor levels 1 2    indicating infection recurred first    second time patient censored Either 0 1, 0 indicates    censoring recurrence time 1 indicates right censoring patient patient number age age patient sex sex patient disease factor levels , GN, ,    PKD specifying type disease","code":""},{"path":"/reference/kidney.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Infections in kidney patients — kidney","text":"McGilchrist, C. ., & Aisbett, C. W. (1991).   Regression frailty survival analysis.   Biometrics, 47(2), 461-466.","code":""},{"path":"/reference/kidney.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infections in kidney patients — kidney","text":"","code":"if (FALSE) { # \\dontrun{ ## performing surivival analysis using the \"weibull\" family fit1 <- brm(time | cens(censored) ~ age + sex + disease,             data = kidney, family = weibull, init = \"0\") summary(fit1) plot(fit1)  ## adding random intercepts over patients fit2 <- brm(time | cens(censored) ~ age + sex + disease + (1|patient),             data = kidney, family = weibull(), init = \"0\",             prior = set_prior(\"cauchy(0,2)\", class = \"sd\")) summary(fit2) plot(fit2) } # }"},{"path":"/reference/lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"(Defunct) Set up a lasso prior in brms — lasso","title":"(Defunct) Set up a lasso prior in brms — lasso","text":"functionality longer supported brms version 2.19.2. Please use horseshoe R2D2 shrinkage priors instead.","code":""},{"path":"/reference/lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Defunct) Set up a lasso prior in brms — lasso","text":"","code":"lasso(df = 1, scale = 1)"},{"path":"/reference/lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Defunct) Set up a lasso prior in brms — lasso","text":"df Degrees freedom chi-square prior inverse tuning parameter. Defaults 1. scale Scale lasso prior. Defaults 1.","code":""},{"path":"/reference/lasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Defunct) Set up a lasso prior in brms — lasso","text":"error indicating lasso prior longer supported.","code":""},{"path":"/reference/lasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Defunct) Set up a lasso prior in brms — lasso","text":"Park, T., & Casella, G. (2008). Bayesian Lasso. Journal American    Statistical Association, 103(482), 681-686.","code":""},{"path":[]},{"path":"/reference/launch_shinystan.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to shinystan — launch_shinystan.brmsfit","title":"Interface to shinystan — launch_shinystan.brmsfit","text":"Provide interface shinystan models fitted brms","code":""},{"path":"/reference/launch_shinystan.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to shinystan — launch_shinystan.brmsfit","text":"","code":"launch_shinystan.brmsfit(object, rstudio = getOption(\"shinystan.rstudio\"), ...)"},{"path":"/reference/launch_shinystan.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to shinystan — launch_shinystan.brmsfit","text":"object fitted model object typically class brmsfit. rstudio relevant RStudio users. default (rstudio=FALSE) launch app default web browser rather RStudio's pop-Viewer. Users can change default TRUE setting global option options(shinystan.rstudio = TRUE). ... Optional arguments pass runApp","code":""},{"path":"/reference/launch_shinystan.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to shinystan — launch_shinystan.brmsfit","text":"S4 shinystan object","code":""},{"path":[]},{"path":"/reference/launch_shinystan.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface to shinystan — launch_shinystan.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler, family = \"gaussian\") launch_shinystan(fit) } # }"},{"path":"/reference/log_lik.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Pointwise Log-Likelihood — log_lik.brmsfit","title":"Compute the Pointwise Log-Likelihood — log_lik.brmsfit","text":"Compute Pointwise Log-Likelihood","code":""},{"path":"/reference/log_lik.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Pointwise Log-Likelihood — log_lik.brmsfit","text":"","code":"# S3 method for class 'brmsfit' log_lik(   object,   newdata = NULL,   re_formula = NULL,   resp = NULL,   ndraws = NULL,   draw_ids = NULL,   pointwise = FALSE,   combine = TRUE,   add_point_estimate = FALSE,   cores = NULL,   ... )"},{"path":"/reference/log_lik.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Pointwise Log-Likelihood — log_lik.brmsfit","text":"object fitted model object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. resp Optional names response variables. specified, predictions performed specified response variables. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. pointwise flag indicating whether compute full log-likelihood matrix (default), just return likelihood function along data draws required compute log-likelihood separately observation. latter option rarely useful calling log_lik directly, rather computing waic loo. combine relevant multivariate models. Indicates log-likelihoods submodels combined per observation (.e. added together; default) log-likelihoods returned separately. add_point_estimate internal use . Ensures compatibility loo_subsample method. cores Number cores (defaults 1). non-Windows systems, argument can set globally via mc.cores option. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/log_lik.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Pointwise Log-Likelihood — log_lik.brmsfit","text":"Usually, S x N matrix containing pointwise log-likelihood  draws, S number draws N number  observations data. multivariate models  combine FALSE, S x N x R array returned,  R number response variables.  pointwise = TRUE, output function  draws attribute containing relevant  data posterior draws.","code":""},{"path":"/reference/log_lik.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Pointwise Log-Likelihood — log_lik.brmsfit","text":"NA values within factors newdata,   interpreted dummy variables factor   zero. allows, instance, make predictions grand mean   using sum coding. multilevel models, possible allow new levels grouping factors used predictions. can controlled via argument allow_new_levels. New levels can sampled multiple ways, can controlled via argument sample_new_levels. arguments documented prepare_predictions along several useful arguments control specific aspects predictions.","code":""},{"path":"/reference/logit_scaled.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled logit-link — logit_scaled","title":"Scaled logit-link — logit_scaled","text":"Computes logit((x - lb) / (ub - lb))","code":""},{"path":"/reference/logit_scaled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled logit-link — logit_scaled","text":"","code":"logit_scaled(x, lb = 0, ub = 1)"},{"path":"/reference/logit_scaled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaled logit-link — logit_scaled","text":"x numeric complex vector. lb Lower bound defaulting 0. ub Upper bound defaulting 1.","code":""},{"path":"/reference/logit_scaled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaled logit-link — logit_scaled","text":"numeric complex vector.","code":""},{"path":"/reference/logm1.html","id":null,"dir":"Reference","previous_headings":"","what":"Logarithm with a minus one offset. — logm1","title":"Logarithm with a minus one offset. — logm1","text":"Computes log(x - 1).","code":""},{"path":"/reference/logm1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logarithm with a minus one offset. — logm1","text":"","code":"logm1(x, base = exp(1))"},{"path":"/reference/logm1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logarithm with a minus one offset. — logm1","text":"x numeric complex vector. base positive complex number: base respect logarithms computed. Defaults e = exp(1).","code":""},{"path":"/reference/loo.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"Perform approximate leave-one-cross-validation based posterior likelihood using loo package. details see loo.","code":""},{"path":"/reference/loo.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo(   x,   ...,   compare = TRUE,   resp = NULL,   pointwise = FALSE,   moment_match = FALSE,   reloo = FALSE,   k_threshold = 0.7,   save_psis = FALSE,   moment_match_args = list(),   reloo_args = list(),   model_names = NULL )"},{"path":"/reference/loo.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. compare flag indicating information criteria models compared via loo_compare. resp Optional names response variables. specified, predictions performed specified response variables. pointwise flag indicating whether compute full log-likelihood matrix separately observation. latter approach usually considerably slower requires much less working memory. Accordingly, one runs memory issues, pointwise = TRUE way go. moment_match Logical; Indicate whether loo_moment_match applied problematic observations. Defaults FALSE. models, moment matching work set save_pars = save_pars(= TRUE) fitting model brm. See loo_moment_match.brmsfit details. reloo Logical; Indicate whether reloo applied problematic observations. Defaults FALSE. k_threshold Pareto \\(k\\) threshold observations loo_moment_match reloo applied argument moment_match reloo TRUE. Defaults 0.7. See pareto_k_ids details. save_psis \"psis\" object created internally saved returned object? details see loo. moment_match_args Optional named list additional arguments passed loo_moment_match. reloo_args Optional named list additional arguments passed reloo. can useful, among others, control many chains, iterations, etc. use fitted sub-models. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/loo.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"just one object provided, object class loo.  multiple objects provided, object class loolist.","code":""},{"path":"/reference/loo.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"See loo_compare details model comparisons.  brmsfit objects, LOO alias loo.  Use method add_criterion store  information criteria fitted model object later usage.","code":""},{"path":"/reference/loo.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"Vehtari, ., Gelman, ., & Gabry J. (2016). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing, doi:10.1007/s11222-016-9696-4. arXiv preprint arXiv:1507.04544. Gelman, ., Hwang, J., & Vehtari, . (2014). Understanding predictive information criteria Bayesian models. Statistics Computing, 24, 997-1016. Watanabe, S. (2010). Asymptotic equivalence Bayes cross validation widely applicable information criterion singular learning theory. Journal Machine Learning Research, 11, 3571-3594.","code":""},{"path":"/reference/loo.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with population-level effects only fit1 <- brm(rating ~ treat + period + carry,             data = inhaler) (loo1 <- loo(fit1))  # model with an additional varying intercept for subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),             data = inhaler) (loo2 <- loo(fit2))  # compare both models loo_compare(loo1, loo2) } # }"},{"path":"/reference/loo_R2.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","title":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","text":"Compute LOO-adjusted R-squared regression models","code":""},{"path":"/reference/loo_R2.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo_R2(   object,   resp = NULL,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   seed = NULL,   ... )"},{"path":"/reference/loo_R2.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","text":"object object class brmsfit. resp Optional names response variables. specified, predictions performed specified response variables. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. seed Optional integer used initialize random number generator. ... arguments passed posterior_epred log_lik, used computation R-squared values.","code":""},{"path":"/reference/loo_R2.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","text":"summary = TRUE, M x C matrix returned  (M = number response variables c = length(probs) + 2)  containing Bayesian bootstrap based summary statistics  LOO-adjusted R-squared values. summary = FALSE,  Bayesian bootstrap draws LOO-adjusted R-squared values  returned S x M matrix (S number draws). @details LOO-R2 uses LOO residuals defined \\(1-Var_{loo-res} / Var_y\\), $$ Var_y = V_{n=1}^N y_n, Var_{loo-res} = V_{n=1}^N \\hat{e}_{loo,n}, $$ \\(\\hat{e}_{loo,n}=y_n-\\hat{y}_{loo,n}\\). Bayesian bootstrap used draw approximated uncertainty distribution described Vehtari Lampinen (2002).","code":""},{"path":"/reference/loo_R2.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","text":"Vehtari Lampinen (2002). Bayesian model assessment comparison using cross-validation predictive densities. Neural Computation, 14(10):2439-2468.","code":""},{"path":"/reference/loo_R2.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a LOO-adjusted R-squared for regression models — loo_R2.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(mpg ~ wt + cyl, data = mtcars) summary(fit) loo_R2(fit)  # compute R2 with new data nd <- data.frame(mpg = c(10, 20, 30), wt = c(4, 3, 2), cyl = c(8, 6, 4)) loo_R2(fit, newdata = nd) } # }"},{"path":"/reference/loo_compare.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model comparison with the loo package — loo_compare.brmsfit","title":"Model comparison with the loo package — loo_compare.brmsfit","text":"details see loo_compare.","code":""},{"path":"/reference/loo_compare.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model comparison with the loo package — loo_compare.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo_compare(x, ..., criterion = c(\"loo\", \"waic\", \"kfold\"), model_names = NULL)"},{"path":"/reference/loo_compare.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model comparison with the loo package — loo_compare.brmsfit","text":"x brmsfit object. ... brmsfit objects. criterion name criterion extracted brmsfit objects. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/loo_compare.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model comparison with the loo package — loo_compare.brmsfit","text":"object class \"compare.loo\".","code":""},{"path":"/reference/loo_compare.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model comparison with the loo package — loo_compare.brmsfit","text":"brmsfit objects contain precomputed   criterion objects. See add_criterion help.","code":""},{"path":"/reference/loo_compare.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model comparison with the loo package — loo_compare.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with population-level effects only fit1 <- brm(rating ~ treat + period + carry,             data = inhaler) fit1 <- add_criterion(fit1, \"waic\")  # model with an additional varying intercept for subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),             data = inhaler) fit2 <- add_criterion(fit2, \"waic\")  # compare both models loo_compare(fit1, fit2, criterion = \"waic\") } # }"},{"path":"/reference/loo_model_weights.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model averaging via stacking or pseudo-BMA weighting. — loo_model_weights.brmsfit","title":"Model averaging via stacking or pseudo-BMA weighting. — loo_model_weights.brmsfit","text":"Compute model weights brmsfit objects via stacking pseudo-BMA weighting. details, see loo::loo_model_weights.","code":""},{"path":"/reference/loo_model_weights.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model averaging via stacking or pseudo-BMA weighting. — loo_model_weights.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo_model_weights(x, ..., model_names = NULL)"},{"path":"/reference/loo_model_weights.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model averaging via stacking or pseudo-BMA weighting. — loo_model_weights.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/loo_model_weights.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model averaging via stacking or pseudo-BMA weighting. — loo_model_weights.brmsfit","text":"named vector model weights.","code":""},{"path":"/reference/loo_model_weights.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model averaging via stacking or pseudo-BMA weighting. — loo_model_weights.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with population-level effects only fit1 <- brm(rating ~ treat + period + carry,             data = inhaler, family = \"gaussian\") # model with an additional varying intercept for subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),             data = inhaler, family = \"gaussian\") loo_model_weights(fit1, fit2) } # }"},{"path":"/reference/loo_moment_match.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"Moment matching efficient approximate leave-one-cross-validation (LOO-CV). See loo_moment_match details.","code":""},{"path":"/reference/loo_moment_match.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo_moment_match(   x,   loo = NULL,   k_threshold = 0.7,   newdata = NULL,   resp = NULL,   check = TRUE,   recompile = FALSE,   ... )  # S3 method for class 'loo' loo_moment_match(x, fit, ...)"},{"path":"/reference/loo_moment_match.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"x R object class brmsfit loo depending method. loo R object class loo. NULL, brms try extract precomputed loo object fitted model, added via add_criterion. k_threshold Pareto \\(k\\) threshold observations moment matching applied. Defaults 0.7. See pareto_k_ids details. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. resp Optional names response variables. specified, predictions performed specified response variables. check Logical; TRUE (default), checks check performed loo object generated brmsfit object passed argument fit. recompile Logical, indicating whether Stan model recompiled. may necessary running moment matching another machine one used fit model. recompilation done default. ... arguments passed underlying methods. Additional arguments initially passed loo, example, newdata resp need passed loo_moment_match order latter work correctly. fit R object class brmsfit.","code":""},{"path":"/reference/loo_moment_match.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"updated object class loo.","code":""},{"path":"/reference/loo_moment_match.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"moment matching algorithm requires draws variables   defined Stan's parameters block saved. Otherwise   loo_moment_match computed. Thus, please set   save_pars = save_pars(= TRUE) call brm,   planning apply loo_moment_match models.","code":""},{"path":"/reference/loo_moment_match.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"Paananen, T., Piironen, J., Buerkner, P.-C., Vehtari, . (2021).   Implicitly Adaptive Importance Sampling. Statistics Computing.","code":""},{"path":"/reference/loo_moment_match.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moment matching for efficient approximate leave-one-out cross-validation — loo_moment_match.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),             data = epilepsy, family = poisson(),             save_pars = save_pars(all = TRUE))  # throws warning about some pareto k estimates being too high (loo1 <- loo(fit1))  # no more warnings after moment matching (mmloo1 <- loo_moment_match(fit1, loo = loo1)) } # }"},{"path":"/reference/loo_predict.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Weighted Expectations Using LOO — loo_predict.brmsfit","title":"Compute Weighted Expectations Using LOO — loo_predict.brmsfit","text":"functions wrappers around E_loo function loo package.","code":""},{"path":"/reference/loo_predict.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Weighted Expectations Using LOO — loo_predict.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo_predict(   object,   type = c(\"mean\", \"var\", \"quantile\"),   probs = 0.5,   psis_object = NULL,   resp = NULL,   ... )  # S3 method for class 'brmsfit' loo_epred(   object,   type = c(\"mean\", \"var\", \"quantile\"),   probs = 0.5,   psis_object = NULL,   resp = NULL,   ... )  loo_epred(object, ...)  # S3 method for class 'brmsfit' loo_linpred(   object,   type = c(\"mean\", \"var\", \"quantile\"),   probs = 0.5,   psis_object = NULL,   resp = NULL,   ... )  # S3 method for class 'brmsfit' loo_predictive_interval(object, prob = 0.9, psis_object = NULL, ...)"},{"path":"/reference/loo_predict.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Weighted Expectations Using LOO — loo_predict.brmsfit","text":"object object class brmsfit. type statistic computed results. Can either \"mean\" (default), \"var\", \"quantile\". probs vector quantiles compute. used type = quantile. psis_object optional object returned psis. psis_object missing psis executed internally, may time consuming models fit large datasets. resp Optional names response variables. specified, predictions performed specified response variables. ... Optional arguments passed underlying methods log_lik, well posterior_predict, posterior_epred posterior_linpred. prob loo_predictive_interval, scalar \\((0,1)\\) indicating desired probability mass include intervals. default prob = 0.9 (\\(90\\)% intervals).","code":""},{"path":"/reference/loo_predict.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Weighted Expectations Using LOO — loo_predict.brmsfit","text":"loo_predict, loo_epred, loo_linpred,   loo_predictive_interval return matrix one row per   observation one column per summary statistic specified   arguments type probs. multivariate categorical models   third dimension added represent response variables categories,   respectively. loo_predictive_interval(..., prob = p) equivalent   loo_predict(..., type = \"quantile\", probs = c(, 1-))   = (1 - p)/2.","code":""},{"path":"/reference/loo_predict.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Weighted Expectations Using LOO — loo_predict.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## data from help(\"lm\") ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14) trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69) d <- data.frame(   weight = c(ctl, trt),   group = gl(2, 10, 20, labels = c(\"Ctl\", \"Trt\")) ) fit <- brm(weight ~ group, data = d) loo_predictive_interval(fit, prob = 0.8)  ## optionally log-weights can be pre-computed and reused psis <- loo::psis(-log_lik(fit), cores = 2) loo_predictive_interval(fit, prob = 0.8, psis_object = psis) loo_predict(fit, type = \"var\", psis_object = psis) loo_epred(fit, type = \"var\", psis_object = psis) } # }"},{"path":"/reference/loo_subsample.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient approximate leave-one-out cross-validation (LOO) using subsampling — loo_subsample.brmsfit","title":"Efficient approximate leave-one-out cross-validation (LOO) using subsampling — loo_subsample.brmsfit","text":"Efficient approximate leave-one-cross-validation (LOO) using subsampling","code":""},{"path":"/reference/loo_subsample.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient approximate leave-one-out cross-validation (LOO) using subsampling — loo_subsample.brmsfit","text":"","code":"# S3 method for class 'brmsfit' loo_subsample(x, ..., compare = TRUE, resp = NULL, model_names = NULL)"},{"path":"/reference/loo_subsample.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient approximate leave-one-out cross-validation (LOO) using subsampling — loo_subsample.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. compare flag indicating information criteria models compared via loo_compare. resp Optional names response variables. specified, predictions performed specified response variables. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/loo_subsample.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficient approximate leave-one-out cross-validation (LOO) using subsampling — loo_subsample.brmsfit","text":"details can found loo_subsample.","code":""},{"path":"/reference/loo_subsample.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficient approximate leave-one-out cross-validation (LOO) using subsampling — loo_subsample.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with population-level effects only fit1 <- brm(rating ~ treat + period + carry,             data = inhaler) (loo1 <- loo_subsample(fit1))  # model with an additional varying intercept for subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),             data = inhaler) (loo2 <- loo_subsample(fit2))  # compare both models loo_compare(loo1, loo2) } # }"},{"path":"/reference/loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Insurance Loss Payments — loss","title":"Cumulative Insurance Loss Payments — loss","text":"dataset, discussed Gesmann & Morris (2020), contains   cumulative insurance loss payments course ten years.","code":""},{"path":"/reference/loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Insurance Loss Payments — loss","text":"","code":"loss"},{"path":"/reference/loss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cumulative Insurance Loss Payments — loss","text":"data frame 55 observations containing information   following 4 variables. AY Origin year insurance (1991 2000) dev Deviation origin year months cum Cumulative loss payments premium Achieved premiums given origin year","code":""},{"path":"/reference/loss.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cumulative Insurance Loss Payments — loss","text":"Gesmann M. & Morris J. (2020). Hierarchical Compartmental Reserving   Models. CAS Research Papers.","code":""},{"path":"/reference/loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Insurance Loss Payments — loss","text":"","code":"if (FALSE) { # \\dontrun{ # non-linear model to predict cumulative loss payments fit_loss <- brm(   bf(cum ~ ult * (1 - exp(-(dev/theta)^omega)),      ult ~ 1 + (1|AY), omega ~ 1, theta ~ 1,      nl = TRUE),   data = loss, family = gaussian(),   prior = c(     prior(normal(5000, 1000), nlpar = \"ult\"),     prior(normal(1, 2), nlpar = \"omega\"),     prior(normal(45, 10), nlpar = \"theta\")   ),   control = list(adapt_delta = 0.9) )  # basic summaries summary(fit_loss) conditional_effects(fit_loss)  # plot predictions per origin year conditions <- data.frame(AY = unique(loss$AY)) rownames(conditions) <- unique(loss$AY) me_loss <- conditional_effects(   fit_loss, conditions = conditions,   re_formula = NULL, method = \"predict\" ) plot(me_loss, ncol = 5, points = TRUE) } # }"},{"path":"/reference/ma.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up MA(q) correlation structures — ma","title":"Set up MA(q) correlation structures — ma","text":"Set moving average (MA) term order q brms. function evaluate arguments – exists purely help set model MA terms.","code":""},{"path":"/reference/ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up MA(q) correlation structures — ma","text":"","code":"ma(time = NA, gr = NA, q = 1, cov = FALSE)"},{"path":"/reference/ma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up MA(q) correlation structures — ma","text":"time optional time variable specifying time ordering observations. default, existing order observations data used. gr optional grouping variable. specified, correlation structure assumed apply observations within grouping level. q non-negative integer specifying moving average (MA) order ARMA structure. Default 1. cov flag indicating whether ARMA effects estimated means residual covariance matrices. currently possible stationary ARMA effects order 1. model family natural residuals, latent residuals added automatically. FALSE (default), regression formulation used considerably faster allows ARMA effects order higher 1 available gaussian models generalizations.","code":""},{"path":"/reference/ma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up MA(q) correlation structures — ma","text":"object class 'arma_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":[]},{"path":"/reference/ma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up MA(q) correlation structures — ma","text":"","code":"if (FALSE) { # \\dontrun{ data(\"LakeHuron\") LakeHuron <- as.data.frame(LakeHuron) fit <- brm(x ~ ma(p = 2), data = LakeHuron) summary(fit) } # }"},{"path":"/reference/make_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Fully Crossed Conditions — make_conditions","title":"Prepare Fully Crossed Conditions — make_conditions","text":"helper function prepare fully crossed conditions primarily use conditions argument conditional_effects. Automatically creates labels row cond__ column.","code":""},{"path":"/reference/make_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Fully Crossed Conditions — make_conditions","text":"","code":"make_conditions(x, vars, ...)"},{"path":"/reference/make_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Fully Crossed Conditions — make_conditions","text":"x R object extract variables part conditions. vars Names variables part conditions. ... Arguments passed rows2labels.","code":""},{"path":"/reference/make_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Fully Crossed Conditions — make_conditions","text":"data.frame row indicates condition.","code":""},{"path":"/reference/make_conditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Fully Crossed Conditions — make_conditions","text":"factor like variables, levels used conditions.   numeric variables, mean + (-1:1) * SD used conditions.","code":""},{"path":[]},{"path":"/reference/make_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Fully Crossed Conditions — make_conditions","text":"","code":"df <- data.frame(x = c(\"a\", \"b\"), y = rnorm(10)) make_conditions(df, vars = c(\"x\", \"y\")) #>   x           y            cond__ #> 1 a -0.09077833 x = a & y = -0.09 #> 2 a  0.91229234  x = a & y = 0.91 #> 3 a  1.91536302  x = a & y = 1.92 #> 4 b -0.09077833 x = b & y = -0.09 #> 5 b  0.91229234  x = b & y = 0.91 #> 6 b  1.91536302  x = b & y = 1.92"},{"path":"/reference/mcmc_plot.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","text":"Convenient way call MCMC plotting functions implemented bayesplot package.","code":""},{"path":"/reference/mcmc_plot.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","text":"","code":"# S3 method for class 'brmsfit' mcmc_plot(   object,   pars = NA,   type = \"intervals\",   variable = NULL,   regex = FALSE,   fixed = FALSE,   ... )  mcmc_plot(object, ...)"},{"path":"/reference/mcmc_plot.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","text":"object R object typically class brmsfit pars Deprecated alias variable. Names parameters plot, given character vector regular expression. type type plot. Supported types (names) hist, dens, hist_by_chain, dens_overlay, violin, intervals, areas, acf, acf_bar,trace, trace_highlight, scatter, rhat, rhat_hist, neff, neff_hist nuts_acceptance, nuts_divergence, nuts_stepsize, nuts_treedepth, nuts_energy. overview various plot types see MCMC-overview. variable Names variables (parameters) plot, given character vector regular expression (regex = TRUE). default, hopefully large selection variables plotted. regex Logical; Indicates whether variable treated regular expressions. Defaults FALSE. fixed (Deprecated) Indicates whether parameter names matched exactly (TRUE) treated regular expressions (FALSE). Default FALSE works argument pars. ... Additional arguments passed plotting functions. See MCMC-overview details.","code":""},{"path":"/reference/mcmc_plot.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","text":"ggplot object   can customized using ggplot2 package.","code":""},{"path":"/reference/mcmc_plot.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","text":"Also consider using shinystan package available via   method launch_shinystan brms flexible   interactive visual analysis.","code":""},{"path":"/reference/mcmc_plot.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ model <- brm(count ~ zAge + zBase * Trt + (1|patient),              data = epilepsy, family = \"poisson\")  # plot posterior intervals mcmc_plot(model)  # only show population-level effects in the plots mcmc_plot(model, variable = \"^b_\", regex = TRUE)  # show histograms of the posterior distributions mcmc_plot(model, type = \"hist\")  # plot some diagnostics of the sampler mcmc_plot(model, type = \"neff\") mcmc_plot(model, type = \"rhat\")  # plot some diagnostics specific to the NUTS sampler mcmc_plot(model, type = \"nuts_acceptance\") mcmc_plot(model, type = \"nuts_divergence\") } # }"},{"path":"/reference/me.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictors with Measurement Error in brms Models — me","title":"Predictors with Measurement Error in brms Models — me","text":"(Soft deprecated) Specify predictors measurement error. function evaluate arguments – exists purely help set model.","code":""},{"path":"/reference/me.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictors with Measurement Error in brms Models — me","text":"","code":"me(x, sdx, gr = NULL)"},{"path":"/reference/me.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictors with Measurement Error in brms Models — me","text":"x variable measured error. sdx Known measurement error x treated standard deviation. gr Optional grouping factor specify values x correspond value latent variable. NULL (default) observation value latent variable.","code":""},{"path":"/reference/me.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictors with Measurement Error in brms Models — me","text":"detailed documentation see help(brmsformula). terms soft deprecated favor general consistent mi terms. default, latent noise-free variables assumed correlated. change , add set_mecor(FALSE) model formula object (see examples).","code":""},{"path":[]},{"path":"/reference/me.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictors with Measurement Error in brms Models — me","text":"","code":"if (FALSE) { # \\dontrun{ # sample some data N <- 100 dat <- data.frame(   y = rnorm(N), x1 = rnorm(N),   x2 = rnorm(N), sdx = abs(rnorm(N, 1))  ) # fit a simple error-in-variables model fit1 <- brm(y ~ me(x1, sdx) + me(x2, sdx), data = dat,             save_pars = save_pars(latent = TRUE)) summary(fit1)  # turn off modeling of correlations bform <- bf(y ~ me(x1, sdx) + me(x2, sdx)) + set_mecor(FALSE) fit2 <- brm(bform, data = dat, save_pars = save_pars(latent = TRUE)) summary(fit2) } # }"},{"path":"/reference/mi.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictors with Missing Values in brms Models — mi","title":"Predictors with Missing Values in brms Models — mi","text":"Specify predictor term missing values brms. function evaluate arguments – exists purely help set model. documentation specify missing values response variables, see resp_mi.","code":""},{"path":"/reference/mi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictors with Missing Values in brms Models — mi","text":"","code":"mi(x, idx = NA)"},{"path":"/reference/mi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictors with Missing Values in brms Models — mi","text":"x variable containing missing values. idx optional variable containing indices observations `x` used model. mostly relevant partially subsetted models (via resp_subset) may also applications thought .","code":""},{"path":"/reference/mi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictors with Missing Values in brms Models — mi","text":"detailed documentation see help(brmsformula).","code":""},{"path":[]},{"path":"/reference/mi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictors with Missing Values in brms Models — mi","text":"","code":"if (FALSE) { # \\dontrun{ data(\"nhanes\", package = \"mice\") N <- nrow(nhanes)  # simple model with missing data bform1 <- bf(bmi | mi() ~ age * mi(chl)) +   bf(chl | mi() ~ age) +   set_rescor(FALSE)  fit1 <- brm(bform1, data = nhanes)  summary(fit1) plot(conditional_effects(fit1, resp = \"bmi\"), ask = FALSE) loo(fit1, newdata = na.omit(fit1$data))  # simulate some measurement noise nhanes$se <- rexp(N, 2)  # measurement noise can be handled within 'mi' terms # with or without the presence of missing values bform2 <- bf(bmi | mi() ~ age * mi(chl)) +   bf(chl | mi(se) ~ age) +   set_rescor(FALSE)  fit2 <- brm(bform2, data = nhanes)  summary(fit2) plot(conditional_effects(fit2, resp = \"bmi\"), ask = FALSE)  # 'mi' terms can also be used when some responses are subsetted nhanes$sub <- TRUE nhanes$sub[1:2] <- FALSE nhanes$id <- 1:N nhanes$idx <- sample(3:N, N, TRUE)  # this requires the addition term 'index' being specified # in the subsetted part of the model bform3 <- bf(bmi | mi() ~ age * mi(chl, idx)) +   bf(chl | mi(se) + subset(sub) + index(id) ~ age) +   set_rescor(FALSE)  fit3 <- brm(bform3, data = nhanes)  summary(fit3) plot(conditional_effects(fit3, resp = \"bmi\"), ask = FALSE) } # }"},{"path":"/reference/mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Finite Mixture Families in brms — mixture","title":"Finite Mixture Families in brms — mixture","text":"Set finite mixture family use brms.","code":""},{"path":"/reference/mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finite Mixture Families in brms — mixture","text":"","code":"mixture(..., flist = NULL, nmix = 1, order = NULL)"},{"path":"/reference/mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finite Mixture Families in brms — mixture","text":"... One objects providing description response distributions combined mixture model. can family functions, calls family functions character strings naming families. details supported families see brmsfamily. flist Optional list objects, treated way objects passed via ... argument. nmix Optional numeric vector specifying number times family repeated. specified, must length number families passed via ... flist. order Ordering constraint identify mixture components. 'mu' TRUE, population-level intercepts mean parameters ordered non-ordinal models fixed value ordinal models (see details). 'none' FALSE, ordering constraint applied. NULL (default), order set 'mu' families 'none' otherwise. ordering constraints may implemented future.","code":""},{"path":"/reference/mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finite Mixture Families in brms — mixture","text":"object class mixfamily.","code":""},{"path":"/reference/mixture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finite Mixture Families in brms — mixture","text":"families supported brms can used form mixtures. response variable valid components mixture family. Currently, number mixture components specified user. yet possible estimate number mixture components data. Ordering intercepts mixtures ordinal families possible family set vector intercepts (.e. ordinal thresholds). Instead, brms fix vector intercepts across components ordinal mixtures, desired, users can try identify mixture model via selective inclusion predictors. mixture models, may want specify priors population-level intercepts via set_prior improve convergence. addition, sometimes necessary set init = 0 call brm allow chains initialize properly. details specification mixture models, see brmsformula.","code":""},{"path":"/reference/mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finite Mixture Families in brms — mixture","text":"","code":"if (FALSE) { # \\dontrun{ ## simulate some data set.seed(1234) dat <- data.frame(   y = c(rnorm(200), rnorm(100, 6)),   x = rnorm(300),   z = sample(0:1, 300, TRUE) )  ## fit a simple normal mixture model mix <- mixture(gaussian, gaussian) prior <- c(   prior(normal(0, 7), Intercept, dpar = mu1),   prior(normal(5, 7), Intercept, dpar = mu2) ) fit1 <- brm(bf(y ~ x + z), dat, family = mix,             prior = prior, chains = 2) summary(fit1) pp_check(fit1)  ## use different predictors for the components fit2 <- brm(bf(y ~ 1, mu1 ~ x, mu2 ~ z), dat, family = mix,             prior = prior, chains = 2) summary(fit2)  ## fix the mixing proportions fit3 <- brm(bf(y ~ x + z, theta1 = 1, theta2 = 2),             dat, family = mix, prior = prior,             init = 0, chains = 2) summary(fit3) pp_check(fit3)  ## predict the mixing proportions fit4 <- brm(bf(y ~ x + z, theta2 ~ x),             dat, family = mix, prior = prior,             init = 0, chains = 2) summary(fit4) pp_check(fit4)  ## compare model fit loo(fit1, fit2, fit3, fit4) } # }"},{"path":"/reference/mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up multi-membership grouping terms in brms — mm","title":"Set up multi-membership grouping terms in brms — mm","text":"Function set multi-membership grouping term brms. function evaluate arguments – exists purely help set model grouping terms.","code":""},{"path":"/reference/mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up multi-membership grouping terms in brms — mm","text":"","code":"mm(   ...,   weights = NULL,   scale = TRUE,   by = NULL,   cor = TRUE,   id = NA,   pw = NULL,   cov = NULL,   dist = \"gaussian\" )"},{"path":"/reference/mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up multi-membership grouping terms in brms — mm","text":"... One terms containing grouping factors. weights matrix specifying membership weights member. many columns grouping terms specified .... NULL (default), equally weights used. scale Logical; TRUE (default), membership weights standardized order sum one per row. negative weights specified, scale needs set FALSE. optional factor matrix, specifying sub-populations groups. many columns grouping terms specified .... level variable, separate variance-covariance matrix fitted. Levels grouping factor must nested levels variable matrix. cor Logical. TRUE (default), group-level terms modelled correlated. id Optional character string. group-level terms across model id modeled correlated (cor TRUE). See brmsformula details. pw Optional numeric matrix specifying prior weights. weight contribution group log-prior group-level coefficients. many columns grouping terms specified ... one distinct value group level. cov optional matrix proportional within-group covariance matrix group-level effects. levels grouping factor appear rownames corresponding matrix. argument can used, among others, model pedigrees phylogenetic effects. See vignette(\"brms_phylogenetics\") details. default, levels grouping factor modeled independent . dist Name distribution group-level effects. Currently \"gaussian\" option.","code":""},{"path":[]},{"path":"/reference/mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up multi-membership grouping terms in brms — mm","text":"","code":"if (FALSE) { # \\dontrun{ # simulate some data dat <- data.frame(  y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100),  g1 = sample(1:10, 100, TRUE), g2 = sample(1:10, 100, TRUE) )  # multi-membership model with two members per group and equal weights fit1 <- brm(y ~ x1 + (1|mm(g1, g2)), data = dat) summary(fit1)  # weight the first member two times for than the second member dat$w1 <- rep(2, 100) dat$w2 <- rep(1, 100) fit2 <- brm(y ~ x1 + (1|mm(g1, g2, weights = cbind(w1, w2))), data = dat) summary(fit2)  # multi-membership model with level specific covariate values dat$xc <- (dat$x1 + dat$x2) / 2 fit3 <- brm(y ~ xc + (1 + mmc(x1, x2) | mm(g1, g2)), data = dat) summary(fit3) } # }"},{"path":"/reference/mmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-Membership Covariates — mmc","title":"Multi-Membership Covariates — mmc","text":"Specify covariates vary different levels multi-membership grouping factors thus requiring special treatment. function almost solely useful, called combination mm. Outside multi-membership terms behave much like cbind.","code":""},{"path":"/reference/mmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-Membership Covariates — mmc","text":"","code":"mmc(...)"},{"path":"/reference/mmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-Membership Covariates — mmc","text":"... One terms containing covariates corresponding grouping levels specified mm.","code":""},{"path":"/reference/mmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-Membership Covariates — mmc","text":"matrix covariates columns.","code":""},{"path":[]},{"path":"/reference/mmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-Membership Covariates — mmc","text":"","code":"if (FALSE) { # \\dontrun{ # simulate some data dat <- data.frame(   y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100),   g1 = sample(1:10, 100, TRUE), g2 = sample(1:10, 100, TRUE) )  # multi-membership model with level specific covariate values dat$xc <- (dat$x1 + dat$x2) / 2 fit <- brm(y ~ xc + (1 + mmc(x1, x2) | mm(g1, g2)), data = dat) summary(fit) } # }"},{"path":"/reference/mo.html","id":null,"dir":"Reference","previous_headings":"","what":"Monotonic Predictors in brms Models — mo","title":"Monotonic Predictors in brms Models — mo","text":"Specify monotonic predictor term brms. function evaluate arguments – exists purely help set model.","code":""},{"path":"/reference/mo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monotonic Predictors in brms Models — mo","text":"","code":"mo(x, id = NA)"},{"path":"/reference/mo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monotonic Predictors in brms Models — mo","text":"x integer variable ordered factor modeled monotonic. id Optional character string. monotonic terms id within one formula modeled simplex (shape) parameter vector. monotonic terms predictor id, resulting predictions conditionally monotonic values interacting covariates (Bürkner & Charpentier, 2020).","code":""},{"path":"/reference/mo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monotonic Predictors in brms Models — mo","text":"See Bürkner Charpentier (2020) underlying theory.   detailed documentation formula syntax used monotonic terms,   see help(brmsformula) well vignette(\"brms_monotonic\").","code":""},{"path":"/reference/mo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monotonic Predictors in brms Models — mo","text":"Bürkner P. C. & Charpentier E. (2020). Modeling Monotonic Effects Ordinal Predictors Regression Models. British Journal Mathematical Statistical Psychology. doi:10.1111/bmsp.12195","code":""},{"path":[]},{"path":"/reference/mo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monotonic Predictors in brms Models — mo","text":"","code":"if (FALSE) { # \\dontrun{ # generate some data income_options <- c(\"below_20\", \"20_to_40\", \"40_to_100\", \"greater_100\") income <- factor(sample(income_options, 100, TRUE),                  levels = income_options, ordered = TRUE) mean_ls <- c(30, 60, 70, 75) ls <- mean_ls[income] + rnorm(100, sd = 7) dat <- data.frame(income, ls)  # fit a simple monotonic model fit1 <- brm(ls ~ mo(income), data = dat) summary(fit1) plot(fit1, N = 6) plot(conditional_effects(fit1), points = TRUE)  # model interaction with other variables dat$x <- sample(c(\"a\", \"b\", \"c\"), 100, TRUE) fit2 <- brm(ls ~ mo(income)*x, data = dat) summary(fit2) plot(conditional_effects(fit2), points = TRUE)  # ensure conditional monotonicity fit3 <- brm(ls ~ mo(income, id = \"i\")*x, data = dat) summary(fit3) plot(conditional_effects(fit3), points = TRUE) } # }"},{"path":"/reference/model_weights.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Weighting Methods — model_weights.brmsfit","title":"Model Weighting Methods — model_weights.brmsfit","text":"Compute model weights various ways, instance, via stacking posterior predictive distributions, Akaike weights, marginal likelihoods.","code":""},{"path":"/reference/model_weights.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Weighting Methods — model_weights.brmsfit","text":"","code":"# S3 method for class 'brmsfit' model_weights(x, ..., weights = \"stacking\", model_names = NULL)  model_weights(x, ...)"},{"path":"/reference/model_weights.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Weighting Methods — model_weights.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. weights Name criterion compute weights . one \"loo\", \"waic\", \"kfold\", \"stacking\" (current default), \"bma\", \"pseudobma\". former three options, Akaike weights computed based information criterion values returned respective methods. \"stacking\" \"pseudobma\", method loo_model_weights used obtain weights. \"bma\", method post_prob used compute Bayesian model averaging weights based log marginal likelihood values (make sure specify reasonable priors case). methods, weights may also numeric vector pre-specified weights. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/model_weights.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Weighting Methods — model_weights.brmsfit","text":"numeric vector weights models.","code":""},{"path":"/reference/model_weights.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Weighting Methods — model_weights.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with 'treat' as predictor fit1 <- brm(rating ~ treat + period + carry, data = inhaler) summary(fit1)  # model without 'treat' as predictor fit2 <- brm(rating ~ period + carry, data = inhaler) summary(fit2)  # obtain Akaike weights based on the WAIC model_weights(fit1, fit2, weights = \"waic\") } # }"},{"path":"/reference/mvbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind response variables in multivariate models — mvbind","title":"Bind response variables in multivariate models — mvbind","text":"Can used specify multivariate brms model within single formula. Outside brmsformula, just behaves like cbind.","code":""},{"path":"/reference/mvbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind response variables in multivariate models — mvbind","text":"","code":"mvbind(...)"},{"path":"/reference/mvbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind response variables in multivariate models — mvbind","text":"... cbind","code":""},{"path":[]},{"path":"/reference/mvbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind response variables in multivariate models — mvbind","text":"","code":"bf(mvbind(y1, y2) ~ x) #> y1 ~ x  #> y2 ~ x"},{"path":"/reference/mvbrmsformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a multivariate model formula for use in brms — mvbrmsformula","title":"Set up a multivariate model formula for use in brms — mvbrmsformula","text":"Set multivariate model formula use brms package allowing define (potentially non-linear) additive multilevel models parameters assumed response distributions.","code":""},{"path":"/reference/mvbrmsformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a multivariate model formula for use in brms — mvbrmsformula","text":"","code":"mvbrmsformula(..., flist = NULL, rescor = NULL)"},{"path":"/reference/mvbrmsformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a multivariate model formula for use in brms — mvbrmsformula","text":"... Objects class formula brmsformula, specifying univariate model. See brmsformula details specify univariate models. flist Optional list formulas, treated way formulas passed via ... argument. rescor Logical; Indicates residual correlation response variables modeled. Currently, possible multivariate gaussian student models. NULL (default), rescor internally set TRUE possible.","code":""},{"path":"/reference/mvbrmsformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a multivariate model formula for use in brms — mvbrmsformula","text":"object class mvbrmsformula,   essentially list containing model formulas   well additional information multivariate models.","code":""},{"path":"/reference/mvbrmsformula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up a multivariate model formula for use in brms — mvbrmsformula","text":"See vignette(\"brms_multivariate\") case study.","code":""},{"path":[]},{"path":"/reference/mvbrmsformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a multivariate model formula for use in brms — mvbrmsformula","text":"","code":"bf1 <- bf(y1 ~ x + (1|g)) bf2 <- bf(y2 ~ s(z)) mvbf(bf1, bf2) #> y1 ~ x + (1 | g)  #> y2 ~ s(z)"},{"path":"/reference/ngrps.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Grouping Factor Levels — ngrps.brmsfit","title":"Number of Grouping Factor Levels — ngrps.brmsfit","text":"Extract number levels one grouping factors.","code":""},{"path":"/reference/ngrps.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Grouping Factor Levels — ngrps.brmsfit","text":"","code":"# S3 method for class 'brmsfit' ngrps(object, ...)  ngrps(object, ...)"},{"path":"/reference/ngrps.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Grouping Factor Levels — ngrps.brmsfit","text":"object R object. ... Currently ignored.","code":""},{"path":"/reference/ngrps.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Grouping Factor Levels — ngrps.brmsfit","text":"named list containing number levels per   grouping factor.","code":""},{"path":"/reference/nsamples.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Number of Posterior Samples — nsamples.brmsfit","title":"(Deprecated) Number of Posterior Samples — nsamples.brmsfit","text":"Extract number posterior samples (draws) stored fitted Bayesian model. Method nsamples deprecated. Please use ndraws instead.","code":""},{"path":"/reference/nsamples.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Number of Posterior Samples — nsamples.brmsfit","text":"","code":"# S3 method for class 'brmsfit' nsamples(object, subset = NULL, incl_warmup = FALSE, ...)"},{"path":"/reference/nsamples.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Number of Posterior Samples — nsamples.brmsfit","text":"object object class brmsfit. subset optional integer vector defining subset samples considered. incl_warmup flag indicating whether also count warmup / burn-samples. ... Currently ignored.","code":""},{"path":"/reference/opencl.html","id":null,"dir":"Reference","previous_headings":"","what":"GPU support in Stan via OpenCL — opencl","title":"GPU support in Stan via OpenCL — opencl","text":"Use OpenCL GPU support Stan via brms interface. Stan functions can run GPU point lot brms models benefit OpenCL now.","code":""},{"path":"/reference/opencl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GPU support in Stan via OpenCL — opencl","text":"","code":"opencl(ids = NULL)"},{"path":"/reference/opencl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GPU support in Stan via OpenCL — opencl","text":"ids (integer vector length 2) platform device IDs OpenCL device use fitting. know IDs OpenCL device, c(0,0) likely need.","code":""},{"path":"/reference/opencl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GPU support in Stan via OpenCL — opencl","text":"brmsopencl object can passed   opencl argument brm related functions.","code":""},{"path":"/reference/opencl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GPU support in Stan via OpenCL — opencl","text":"details OpenCL Stan, check https://mc-stan.org/docs/2_26/cmdstan-guide/parallelization.html#opencl well https://mc-stan.org/docs/2_26/stan-users-guide/opencl.html.","code":""},{"path":"/reference/opencl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GPU support in Stan via OpenCL — opencl","text":"","code":"if (FALSE) { # \\dontrun{ # this model just serves as an illustration # OpenCL may not actually speed things up here fit <- brm(count ~ zAge + zBase * Trt + (1|patient),            data = epilepsy, family = poisson(),            chains = 2, cores = 2, opencl = opencl(c(0, 0)),            backend = \"cmdstanr\") summary(fit) } # }"},{"path":"/reference/pairs.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of output plots from a brmsfit object — pairs.brmsfit","title":"Create a matrix of output plots from a brmsfit object — pairs.brmsfit","text":"pairs method customized MCMC output.","code":""},{"path":"/reference/pairs.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of output plots from a brmsfit object — pairs.brmsfit","text":"","code":"# S3 method for class 'brmsfit' pairs(x, pars = NA, variable = NULL, regex = FALSE, fixed = FALSE, ...)"},{"path":"/reference/pairs.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of output plots from a brmsfit object — pairs.brmsfit","text":"x object class brmsfit pars Deprecated alias variable. Names parameters plot, given character vector regular expression. variable Names variables (parameters) plot, given character vector regular expression (regex = TRUE). default, hopefully large selection variables plotted. regex Logical; Indicates whether variable treated regular expressions. Defaults FALSE. fixed (Deprecated) Indicates whether parameter names matched exactly (TRUE) treated regular expressions (FALSE). Default FALSE works argument pars. ... arguments passed mcmc_pairs.","code":""},{"path":"/reference/pairs.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a matrix of output plots from a brmsfit object — pairs.brmsfit","text":"detailed description see   mcmc_pairs.","code":""},{"path":"/reference/pairs.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of output plots from a brmsfit object — pairs.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt            + (1|patient) + (1|visit),            data = epilepsy, family = \"poisson\") pairs(fit, variable = variables(fit)[1:3]) pairs(fit, variable = \"^sd_\", regex = TRUE) } # }"},{"path":"/reference/parnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameter Names — parnames","title":"Extract Parameter Names — parnames","text":"Extract parameter names given model.","code":""},{"path":"/reference/parnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameter Names — parnames","text":"","code":"parnames(x, ...)"},{"path":"/reference/parnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameter Names — parnames","text":"x R object ... arguments passed methods.","code":""},{"path":"/reference/parnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameter Names — parnames","text":"character vector containing parameter names model.","code":""},{"path":"/reference/plot.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace and Density Plots for MCMC Draws — plot.brmsfit","title":"Trace and Density Plots for MCMC Draws — plot.brmsfit","text":"Trace Density Plots MCMC Draws","code":""},{"path":"/reference/plot.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace and Density Plots for MCMC Draws — plot.brmsfit","text":"","code":"# S3 method for class 'brmsfit' plot(   x,   pars = NA,   combo = c(\"hist\", \"trace\"),   nvariables = 5,   N = NULL,   variable = NULL,   regex = FALSE,   fixed = FALSE,   bins = 30,   theme = NULL,   plot = TRUE,   ask = TRUE,   newpage = TRUE,   ... )"},{"path":"/reference/plot.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace and Density Plots for MCMC Draws — plot.brmsfit","text":"x object class brmsfit. pars Deprecated alias variable. Names parameters plot, given character vector regular expression. combo character vector least two elements. element combo corresponds column resulting graphic name one available MCMC functions (omitting mcmc_ prefix). nvariables number variables (parameters) plotted per page. N Deprecated alias nvariables. variable Names variables (parameters) plot, given character vector regular expression (regex = TRUE). default, hopefully large selection variables plotted. regex Logical; Indicates whether variable treated regular expressions. Defaults FALSE. fixed (Deprecated) Indicates whether parameter names matched exactly (TRUE) treated regular expressions (FALSE). Default FALSE works argument pars. bins Number bins used posterior histograms (defaults 30). theme theme object modifying appearance plots. basic themes see ggtheme theme_default. plot Logical; indicates plots plotted directly active graphic device. Defaults TRUE. ask Logical; indicates user prompted new page plotted. used plot TRUE. newpage Logical; indicates first set plots plotted new page. used plot TRUE. ... arguments passed mcmc_combo.","code":""},{"path":"/reference/plot.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace and Density Plots for MCMC Draws — plot.brmsfit","text":"invisible list   gtable objects.","code":""},{"path":"/reference/plot.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace and Density Plots for MCMC Draws — plot.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt            + (1|patient) + (1|visit),            data = epilepsy, family = \"poisson\") plot(fit) ## plot population-level effects only plot(fit, variable = \"^b_\", regex = TRUE) } # }"},{"path":"/reference/post_prob.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Model Probabilities from Marginal Likelihoods — post_prob.brmsfit","title":"Posterior Model Probabilities from Marginal Likelihoods — post_prob.brmsfit","text":"Compute posterior model probabilities marginal likelihoods. brmsfit method just thin wrapper around corresponding method bridge objects.","code":""},{"path":"/reference/post_prob.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Model Probabilities from Marginal Likelihoods — post_prob.brmsfit","text":"","code":"# S3 method for class 'brmsfit' post_prob(x, ..., prior_prob = NULL, model_names = NULL)"},{"path":"/reference/post_prob.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Model Probabilities from Marginal Likelihoods — post_prob.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. prior_prob Numeric vector prior model probabilities. omitted, uniform prior used (.e., models equally likely priori). default NULL corresponds equal prior model weights. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/post_prob.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Model Probabilities from Marginal Likelihoods — post_prob.brmsfit","text":"Computing marginal likelihood requires samples   variables defined Stan's parameters block   saved. Otherwise post_prob computed.   Thus, please set save_all_pars = TRUE call brm,   planning apply post_prob models. computation model probabilities based bridge sampling requires   lot posterior samples usual. good conservative   rule thump perhaps 10-fold samples (read: default 4000   samples may enough many cases). enough posterior   samples provided, bridge sampling algorithm tends   unstable leading considerably different results time run.   thus recommend running post_prob   multiple times check stability results. details provided   bridgesampling::post_prob.","code":""},{"path":[]},{"path":"/reference/post_prob.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Model Probabilities from Marginal Likelihoods — post_prob.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with the treatment effect fit1 <- brm(   count ~ zAge + zBase + Trt,   data = epilepsy, family = negbinomial(),   prior = prior(normal(0, 1), class = b),   save_all_pars = TRUE ) summary(fit1)  # model without the treatent effect fit2 <- brm(   count ~ zAge + zBase,   data = epilepsy, family = negbinomial(),   prior = prior(normal(0, 1), class = b),   save_all_pars = TRUE ) summary(fit2)  # compute the posterior model probabilities post_prob(fit1, fit2)  # specify prior model probabilities post_prob(fit1, fit2, prior_prob = c(0.8, 0.2)) } # }"},{"path":"/reference/posterior_average.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","title":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","text":"Extract posterior draws parameters averaged across models. Weighting can done various ways, instance using Akaike weights based information criteria marginal likelihoods.","code":""},{"path":"/reference/posterior_average.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_average(   x,   ...,   variable = NULL,   pars = NULL,   weights = \"stacking\",   ndraws = NULL,   nsamples = NULL,   missing = NULL,   model_names = NULL,   control = list(),   seed = NULL )  posterior_average(x, ...)"},{"path":"/reference/posterior_average.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. variable Names variables (parameters) average across models. variables can averaged appear every model. Defaults overlapping variables. pars Deprecated alias variable. weights Name criterion compute weights . one \"loo\", \"waic\", \"kfold\", \"stacking\" (current default), \"bma\", \"pseudobma\". former three options, Akaike weights computed based information criterion values returned respective methods. \"stacking\" \"pseudobma\", method loo_model_weights used obtain weights. \"bma\", method post_prob used compute Bayesian model averaging weights based log marginal likelihood values (make sure specify reasonable priors case). methods, weights may also numeric vector pre-specified weights. ndraws Total number posterior draws use. nsamples Deprecated alias ndraws. missing optional numeric value named list numeric values use model contain variable posterior draws averaged. Defaults NULL, case variables can averaged present models. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names. control Optional list arguments passed function specified weights. seed single numeric value passed set.seed make results reproducible.","code":""},{"path":"/reference/posterior_average.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","text":"data.frame posterior draws.","code":""},{"path":"/reference/posterior_average.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","text":"Weights computed model_weights method.","code":""},{"path":[]},{"path":"/reference/posterior_average.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior draws of parameters averaged across models — posterior_average.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with 'treat' as predictor fit1 <- brm(rating ~ treat + period + carry, data = inhaler) summary(fit1)  # model without 'treat' as predictor fit2 <- brm(rating ~ period + carry, data = inhaler) summary(fit2)  # compute model-averaged posteriors of overlapping parameters posterior_average(fit1, fit2, weights = \"waic\") } # }"},{"path":"/reference/posterior_epred.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","title":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","text":"Compute posterior draws expected value posterior predictive distribution. Can performed data used fit model (posterior predictive checks) new data. definition, predictions smaller variance posterior predictions performed posterior_predict.brmsfit method. uncertainty expected value posterior predictive distribution incorporated draws computed posterior_epred residual error ignored . However, estimated means methods averaged across draws similar.","code":""},{"path":"/reference/posterior_epred.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_epred(   object,   newdata = NULL,   re_formula = NULL,   re.form = NULL,   resp = NULL,   dpar = NULL,   nlpar = NULL,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   ... )"},{"path":"/reference/posterior_epred.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. re.form Alias re_formula. resp Optional names response variables. specified, predictions performed specified response variables. dpar Optional name predicted distributional parameter. specified, expected predictions parameters returned. nlpar Optional name predicted non-linear parameter. specified, expected predictions parameters returned. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/posterior_epred.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","text":"array draws.   categorical ordinal models, output S x N x C array.   Otherwise, output S x N matrix, S number   posterior draws, N number observations, C number   categories. multivariate models, additional dimension added   output indexes along different response variables.","code":""},{"path":"/reference/posterior_epred.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","text":"NA values within factors newdata,   interpreted dummy variables factor   zero. allows, instance, make predictions grand mean   using sum coding. multilevel models, possible allow new levels grouping factors used predictions. can controlled via argument allow_new_levels. New levels can sampled multiple ways, can controlled via argument sample_new_levels. arguments documented prepare_predictions along several useful arguments control specific aspects predictions.","code":""},{"path":"/reference/posterior_epred.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws from the Expected Value of the Posterior Predictive Distribution — posterior_epred.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler)  ## compute expected predictions ppe <- posterior_epred(fit) str(ppe) } # }"},{"path":"/reference/posterior_interval.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute posterior uncertainty intervals — posterior_interval.brmsfit","title":"Compute posterior uncertainty intervals — posterior_interval.brmsfit","text":"Compute posterior uncertainty intervals brmsfit objects.","code":""},{"path":"/reference/posterior_interval.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute posterior uncertainty intervals — posterior_interval.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_interval(object, pars = NA, variable = NULL, prob = 0.95, ...)"},{"path":"/reference/posterior_interval.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute posterior uncertainty intervals — posterior_interval.brmsfit","text":"object object class brmsfit. pars Deprecated alias variable. reasons backwards compatibility, pars interpreted vector regular expressions default unless fixed = TRUE specified. variable character vector providing variables extract. default, variables extracted. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. ... arguments passed .matrix.brmsfit.","code":""},{"path":"/reference/posterior_interval.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute posterior uncertainty intervals — posterior_interval.brmsfit","text":"matrix lower upper interval bounds   columns many rows selected variables.","code":""},{"path":"/reference/posterior_interval.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute posterior uncertainty intervals — posterior_interval.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt,            data = epilepsy, family = negbinomial()) posterior_interval(fit) } # }"},{"path":"/reference/posterior_linpred.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Draws of the Linear Predictor — posterior_linpred.brmsfit","title":"Posterior Draws of the Linear Predictor — posterior_linpred.brmsfit","text":"Compute posterior draws linear predictor, draws applying link functions transformations. Can performed data used fit model (posterior predictive checks) new data.","code":""},{"path":"/reference/posterior_linpred.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Draws of the Linear Predictor — posterior_linpred.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_linpred(   object,   transform = FALSE,   newdata = NULL,   re_formula = NULL,   re.form = NULL,   resp = NULL,   dpar = NULL,   nlpar = NULL,   incl_thres = NULL,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   ... )"},{"path":"/reference/posterior_linpred.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Draws of the Linear Predictor — posterior_linpred.brmsfit","text":"object object class brmsfit. transform Logical; FALSE (default), draws linear predictor returned. TRUE, draws transformed linear predictor, , applying inverse link function returned. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. re.form Alias re_formula. resp Optional names response variables. specified, predictions performed specified response variables. dpar Name predicted distributional parameter draws returned. default, draws main distributional parameter(s) \"mu\" returned. nlpar Optional name predicted non-linear parameter. specified, expected predictions parameters returned. incl_thres Logical; relevant ordinal models transform FALSE, ignored otherwise. Shall thresholds category-specific effects included linear predictor? backwards compatibility, default include . ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":[]},{"path":"/reference/posterior_linpred.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Draws of the Linear Predictor — posterior_linpred.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler)  ## extract linear predictor values pl <- posterior_linpred(fit) str(pl) } # }"},{"path":"/reference/posterior_predict.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","title":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","text":"Compute posterior draws posterior predictive distribution. Can performed data used fit model (posterior predictive checks) new data. definition, draws higher variance draws expected value posterior predictive distribution computed posterior_epred.brmsfit. residual error incorporated posterior_predict. However, estimated means methods averaged across draws similar.","code":""},{"path":"/reference/posterior_predict.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_predict(   object,   newdata = NULL,   re_formula = NULL,   re.form = NULL,   transform = NULL,   resp = NULL,   negative_rt = FALSE,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   ntrys = 5,   cores = NULL,   ... )"},{"path":"/reference/posterior_predict.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. re.form Alias re_formula. transform (Deprecated) function character string naming function applied predicted responses summary statistics computed. resp Optional names response variables. specified, predictions performed specified response variables. negative_rt relevant Wiener diffusion models. flag indicating whether response times responses lower boundary returned negative values. allows distinguish responses upper lower boundary. Defaults FALSE. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). ntrys Parameter used rejection sampling truncated discrete models (defaults 5). See Details information. cores Number cores (defaults 1). non-Windows systems, argument can set globally via mc.cores option. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/posterior_predict.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","text":"array draws. univariate models,   output S x N matrix, S number posterior   draws N number observations. multivariate models,   additional dimension added output indexes along   different response variables.","code":""},{"path":"/reference/posterior_predict.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","text":"NA values within factors newdata,   interpreted dummy variables factor   zero. allows, instance, make predictions grand mean   using sum coding. multilevel models, possible allow new levels grouping factors used predictions. can controlled via argument allow_new_levels. New levels can sampled multiple ways, can controlled via argument sample_new_levels. arguments documented prepare_predictions along several useful arguments control specific aspects predictions. truncated discrete models : absence general   algorithm sample truncated discrete distributions, rejection   sampling applied special case. means values   sampled value lies within defined truncation boundaries.   practice, procedure may rather slow (especially R). Thus,   try approximate rejection sampling sampling value   ntrys times select valid value. values   invalid, closest boundary used, instead.   pathological cases, warning occur suggesting   increase argument ntrys.","code":""},{"path":"/reference/posterior_predict.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws from the Posterior Predictive Distribution — posterior_predict.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(time | cens(censored) ~ age + sex + (1 + age || patient),            data = kidney, family = \"exponential\", init = \"0\")  ## predicted responses pp <- posterior_predict(fit) str(pp)  ## predicted responses excluding the group-level effect of age pp <- posterior_predict(fit, re_formula = ~ (1 | patient)) str(pp)  ## predicted responses of patient 1 for new data newdata <- data.frame(   sex = factor(c(\"male\", \"female\")),   age = c(20, 50),   patient = c(1, 1) ) pp <- posterior_predict(fit, newdata = newdata) str(pp) } # }"},{"path":"/reference/posterior_samples.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Extract Posterior Samples — posterior_samples.brmsfit","title":"(Deprecated) Extract Posterior Samples — posterior_samples.brmsfit","text":"Extract posterior samples specified parameters. posterior_samples method deprecated. recommend using modern consistent as_draws_* extractor functions posterior package instead.","code":""},{"path":"/reference/posterior_samples.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Extract Posterior Samples — posterior_samples.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_samples(   x,   pars = NA,   fixed = FALSE,   add_chain = FALSE,   subset = NULL,   as.matrix = FALSE,   as.array = FALSE,   ... )  posterior_samples(x, pars = NA, ...)"},{"path":"/reference/posterior_samples.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Extract Posterior Samples — posterior_samples.brmsfit","text":"x R object typically class brmsfit pars Names parameters posterior samples returned, given character vector regular expressions. default, posterior samples parameters extracted. fixed Indicates whether parameter names matched exactly (TRUE) treated regular expressions (FALSE). Default FALSE. add_chain flag indicating returned data.frame contain two additional columns. chain column indicates chain sample generated, iter column indicates iteration number within chain. subset numeric vector indicating rows (.e., posterior samples) returned. NULL (default),  posterior samples returned. .matrix output matrix instead data.frame? Defaults FALSE. .array output array instead data.frame? Defaults FALSE. ... Arguments passed individual methods (applicable).","code":""},{"path":"/reference/posterior_samples.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Extract Posterior Samples — posterior_samples.brmsfit","text":"data.frame (matrix array) containing posterior samples.","code":""},{"path":[]},{"path":"/reference/posterior_samples.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Extract Posterior Samples — posterior_samples.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler, family = \"cumulative\")  # extract posterior samples of population-level effects samples1 <- posterior_samples(fit, pars = \"^b\") head(samples1)  # extract posterior samples of group-level standard deviations samples2 <- posterior_samples(fit, pars = \"^sd_\") head(samples2) } # }"},{"path":"/reference/posterior_smooths.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Predictions of Smooth Terms — posterior_smooths.brmsfit","title":"Posterior Predictions of Smooth Terms — posterior_smooths.brmsfit","text":"Compute posterior predictions smooth s t2 terms models fitted brms.","code":""},{"path":"/reference/posterior_smooths.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Predictions of Smooth Terms — posterior_smooths.brmsfit","text":"","code":"# S3 method for class 'brmsfit' posterior_smooths(   object,   smooth,   newdata = NULL,   resp = NULL,   dpar = NULL,   nlpar = NULL,   ndraws = NULL,   draw_ids = NULL,   ... )  posterior_smooths(object, ...)"},{"path":"/reference/posterior_smooths.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Predictions of Smooth Terms — posterior_smooths.brmsfit","text":"object object class brmsfit. smooth Name single smooth term predictions computed. newdata optional data.frame evaluate predictions. NULL (default), original data model used. variables appearing chosen smooth term required. resp Optional names response variables. specified, predictions performed specified response variables. dpar Optional name predicted distributional parameter. specified, expected predictions parameters returned. nlpar Optional name predicted non-linear parameter. specified, expected predictions parameters returned. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. ... Currently ignored.","code":""},{"path":"/reference/posterior_smooths.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Predictions of Smooth Terms — posterior_smooths.brmsfit","text":"S x N matrix, S number   posterior draws N number observations.","code":""},{"path":"/reference/posterior_smooths.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Predictions of Smooth Terms — posterior_smooths.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(0) dat <- mgcv::gamSim(1, n = 200, scale = 2) fit <- brm(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat) summary(fit)  newdata <- data.frame(x2 = seq(0, 1, 10)) str(posterior_smooths(fit, smooth = \"s(x2)\", newdata = newdata)) } # }"},{"path":"/reference/posterior_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Posterior draws — posterior_summary","title":"Summarize Posterior draws — posterior_summary","text":"Summarizes posterior draws based point estimates (mean median), estimation errors (SD MAD) quantiles. function mainly exists retain backwards compatibility. eventually replaced functions posterior package (see examples ).","code":""},{"path":"/reference/posterior_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Posterior draws — posterior_summary","text":"","code":"posterior_summary(x, ...)  # Default S3 method posterior_summary(x, probs = c(0.025, 0.975), robust = FALSE, ...)  # S3 method for class 'brmsfit' posterior_summary(   x,   pars = NA,   variable = NULL,   probs = c(0.025, 0.975),   robust = FALSE,   ... )"},{"path":"/reference/posterior_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Posterior draws — posterior_summary","text":"x R object. ... arguments passed methods. probs percentiles computed quantile function. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. pars Deprecated alias variable. reasons backwards compatibility, pars interpreted vector regular expressions default unless fixed = TRUE specified. variable character vector providing variables extract. default, variables extracted.","code":""},{"path":"/reference/posterior_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Posterior draws — posterior_summary","text":"matrix rows indicate variables columns indicate summary estimates.","code":""},{"path":[]},{"path":"/reference/posterior_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Posterior draws — posterior_summary","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(time ~ age * sex, data = kidney) posterior_summary(fit)  # recommended workflow using posterior library(posterior) draws <- as_draws_array(fit) summarise_draws(draws, default_summary_measures()) } # }"},{"path":"/reference/posterior_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Creation for Posterior Draws — posterior_table","title":"Table Creation for Posterior Draws — posterior_table","text":"Create table unique values posterior draws. usually useful summarizing predictions ordinal models.","code":""},{"path":"/reference/posterior_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Creation for Posterior Draws — posterior_table","text":"","code":"posterior_table(x, levels = NULL)"},{"path":"/reference/posterior_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Creation for Posterior Draws — posterior_table","text":"x matrix posterior draws rows indicate draws columns indicate parameters. levels Optional values possible posterior values. Defaults unique values x.","code":""},{"path":"/reference/posterior_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Creation for Posterior Draws — posterior_table","text":"matrix rows indicate parameters  columns indicate unique values  posterior draws.","code":""},{"path":"/reference/posterior_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Creation for Posterior Draws — posterior_table","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(rating ~ period + carry + treat,            data = inhaler, family = cumulative()) pr <- predict(fit, summary = FALSE) posterior_table(pr) } # }"},{"path":"/reference/pp_average.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior predictive draws averaged across models — pp_average.brmsfit","title":"Posterior predictive draws averaged across models — pp_average.brmsfit","text":"Compute posterior predictive draws averaged across models. Weighting can done various ways, instance using Akaike weights based information criteria marginal likelihoods.","code":""},{"path":"/reference/pp_average.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior predictive draws averaged across models — pp_average.brmsfit","text":"","code":"# S3 method for class 'brmsfit' pp_average(   x,   ...,   weights = \"stacking\",   method = \"posterior_predict\",   ndraws = NULL,   nsamples = NULL,   summary = TRUE,   probs = c(0.025, 0.975),   robust = FALSE,   model_names = NULL,   control = list(),   seed = NULL )  pp_average(x, ...)"},{"path":"/reference/pp_average.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior predictive draws averaged across models — pp_average.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. weights Name criterion compute weights . one \"loo\", \"waic\", \"kfold\", \"stacking\" (current default), \"bma\", \"pseudobma\". former three options, Akaike weights computed based information criterion values returned respective methods. \"stacking\" \"pseudobma\", method loo_model_weights used obtain weights. \"bma\", method post_prob used compute Bayesian model averaging weights based log marginal likelihood values (make sure specify reasonable priors case). methods, weights may also numeric vector pre-specified weights. method Method used obtain predictions average . one \"posterior_predict\" (default), \"posterior_epred\", \"posterior_linpred\" \"predictive_error\". ndraws Total number posterior draws use. nsamples Deprecated alias ndraws. summary summary statistics  (.e. means, sds, 95% intervals) returned instead raw values? Default TRUE. probs percentiles computed quantile function. used summary TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names. control Optional list arguments passed function specified weights. seed single numeric value passed set.seed make results reproducible.","code":""},{"path":"/reference/pp_average.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior predictive draws averaged across models — pp_average.brmsfit","text":"output method specified   argument method.","code":""},{"path":"/reference/pp_average.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior predictive draws averaged across models — pp_average.brmsfit","text":"Weights computed model_weights method.","code":""},{"path":[]},{"path":"/reference/pp_average.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior predictive draws averaged across models — pp_average.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with 'treat' as predictor fit1 <- brm(rating ~ treat + period + carry, data = inhaler) summary(fit1)  # model without 'treat' as predictor fit2 <- brm(rating ~ period + carry, data = inhaler) summary(fit2)  # compute model-averaged predicted values (df <- unique(inhaler[, c(\"treat\", \"period\", \"carry\")])) pp_average(fit1, fit2, newdata = df)  # compute model-averaged fitted values pp_average(fit1, fit2, method = \"fitted\", newdata = df) } # }"},{"path":"/reference/pp_check.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","title":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","text":"Perform posterior predictive checks help bayesplot package.","code":""},{"path":"/reference/pp_check.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","text":"","code":"# S3 method for class 'brmsfit' pp_check(   object,   type,   ndraws = NULL,   prefix = c(\"ppc\", \"ppd\"),   group = NULL,   x = NULL,   newdata = NULL,   resp = NULL,   draw_ids = NULL,   nsamples = NULL,   subset = NULL,   ... )"},{"path":"/reference/pp_check.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","text":"object object class brmsfit. type Type ppc plot given character string. See PPC overview currently supported types. may also use invalid type (e.g. type = \"xyz\") get list supported types resulting error message. ndraws Positive integer indicating many posterior draws used. NULL draws used. specified, number posterior draws chosen automatically. Ignored draw_ids NULL. prefix prefix bayesplot function applied. Either `\"ppc\"` (posterior predictive check; default) `\"ppd\"` (posterior predictive distribution), latter former except observed data shown `\"ppd\"`. group Optional name factor variable model stratify ppc plot. argument required ppc *_grouped types ignored otherwise. x Optional name variable model. used ppc types x argument ignored otherwise. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. resp Optional names response variables. specified, predictions performed specified response variables. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. nsamples Deprecated alias ndraws. subset Deprecated alias draw_ids. ... arguments passed predict.brmsfit well PPC function specified type.","code":""},{"path":"/reference/pp_check.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","text":"ggplot object can  customized using ggplot2 package.","code":""},{"path":"/reference/pp_check.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","text":"detailed explanation ppc functions, see PPC documentation bayesplot package.","code":""},{"path":"/reference/pp_check.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Predictive Checks for brmsfit Objects — pp_check.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <-  brm(count ~ zAge + zBase * Trt             + (1|patient) + (1|obs),             data = epilepsy, family = poisson())  pp_check(fit)  # shows dens_overlay plot by default pp_check(fit, type = \"error_hist\", ndraws = 11) pp_check(fit, type = \"scatter_avg\", ndraws = 100) pp_check(fit, type = \"stat_2d\") pp_check(fit, type = \"rootogram\") pp_check(fit, type = \"loo_pit\")  ## get an overview of all valid types pp_check(fit, type = \"xyz\")  ## get a plot without the observed data pp_check(fit, prefix = \"ppd\") } # }"},{"path":"/reference/pp_mixture.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","title":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","text":"Compute posterior probabilities mixture component memberships observation including uncertainty estimates.","code":""},{"path":"/reference/pp_mixture.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","text":"","code":"# S3 method for class 'brmsfit' pp_mixture(   x,   newdata = NULL,   re_formula = NULL,   resp = NULL,   ndraws = NULL,   draw_ids = NULL,   log = FALSE,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   ... )  pp_mixture(x, ...)"},{"path":"/reference/pp_mixture.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","text":"x R object usually class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. resp Optional names response variables. specified, predictions performed specified response variables. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. log Logical; Indicates whether return probabilities log-scale. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/pp_mixture.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","text":"summary = TRUE, N x E x K array, N number observations, K number mixture components, E equal length(probs) + 2. summary = FALSE, S x N x K array, S number posterior draws.","code":""},{"path":"/reference/pp_mixture.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","text":"returned probabilities can written \\(P(K_n = k | Y_n)\\), posterior probability observation n originates component k. computed using Bayes' Theorem $$P(K_n = k | Y_n) = P(Y_n | K_n = k) P(K_n = k) / P(Y_n),$$ \\(P(Y_n | K_n = k)\\) (posterior) likelihood observation n component k, \\(P(K_n = k)\\) (posterior) mixing probability component k (.e. parameter theta<k>), $$P(Y_n) = \\sum_{k=1,...,K} P(Y_n | K_n = k) P(K_n = k)$$ normalizing constant.","code":""},{"path":"/reference/pp_mixture.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Probabilities of Mixture Component Memberships — pp_mixture.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## simulate some data set.seed(1234) dat <- data.frame(   y = c(rnorm(100), rnorm(50, 2)),   x = rnorm(150) ) ## fit a simple normal mixture model mix <- mixture(gaussian, nmix = 2) prior <- c(   prior(normal(0, 5), Intercept, nlpar = mu1),   prior(normal(0, 5), Intercept, nlpar = mu2),   prior(dirichlet(2, 2), theta) ) fit1 <- brm(bf(y ~ x), dat, family = mix,             prior = prior, chains = 2, init = 0) summary(fit1)  ## compute the membership probabilities ppm <- pp_mixture(fit1) str(ppm)  ## extract point estimates for each observation head(ppm[, 1, ])  ## classify every observation according to ## the most likely component apply(ppm[, 1, ], 1, which.max) } # }"},{"path":"/reference/predict.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws from the Posterior Predictive Distribution — predict.brmsfit","title":"Draws from the Posterior Predictive Distribution — predict.brmsfit","text":"method alias posterior_predict.brmsfit additional arguments obtaining summaries computed draws.","code":""},{"path":"/reference/predict.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws from the Posterior Predictive Distribution — predict.brmsfit","text":"","code":"# S3 method for class 'brmsfit' predict(   object,   newdata = NULL,   re_formula = NULL,   transform = NULL,   resp = NULL,   negative_rt = FALSE,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   ntrys = 5,   cores = NULL,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   ... )"},{"path":"/reference/predict.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws from the Posterior Predictive Distribution — predict.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. transform (Deprecated) function character string naming function applied predicted responses summary statistics computed. resp Optional names response variables. specified, predictions performed specified response variables. negative_rt relevant Wiener diffusion models. flag indicating whether response times responses lower boundary returned negative values. allows distinguish responses upper lower boundary. Defaults FALSE. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). ntrys Parameter used rejection sampling truncated discrete models (defaults 5). See Details information. cores Number cores (defaults 1). non-Windows systems, argument can set globally via mc.cores option. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/predict.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws from the Posterior Predictive Distribution — predict.brmsfit","text":"array predicted response values.   summary = FALSE output resembles   posterior_predict.brmsfit. summary = TRUE output depends family: categorical   ordinal families, output N x C matrix, N number   observations, C number categories, values   predicted category probabilities. families, output N   x E matrix E = 2 + length(probs) number summary   statistics: Estimate column contains point estimates (either   mean median depending argument robust),   Est.Error column contains uncertainty estimates (either standard   deviation median absolute deviation depending argument   robust). remaining columns starting Q contain   quantile estimates specified via argument probs.","code":""},{"path":[]},{"path":"/reference/predict.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws from the Posterior Predictive Distribution — predict.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(time | cens(censored) ~ age + sex + (1 + age || patient),            data = kidney, family = \"exponential\", init = \"0\")  ## predicted responses pp <- predict(fit) head(pp)  ## predicted responses excluding the group-level effect of age pp <- predict(fit, re_formula = ~ (1 | patient)) head(pp)  ## predicted responses of patient 1 for new data newdata <- data.frame(   sex = factor(c(\"male\", \"female\")),   age = c(20, 50),   patient = c(1, 1) ) predict(fit, newdata = newdata) } # }"},{"path":"/reference/predictive_error.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Draws of Predictive Errors — predictive_error.brmsfit","title":"Posterior Draws of Predictive Errors — predictive_error.brmsfit","text":"Compute posterior draws predictive errors, , observed minus predicted responses. Can performed data used fit model (posterior predictive checks) new data.","code":""},{"path":"/reference/predictive_error.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Draws of Predictive Errors — predictive_error.brmsfit","text":"","code":"# S3 method for class 'brmsfit' predictive_error(   object,   newdata = NULL,   re_formula = NULL,   re.form = NULL,   method = \"posterior_predict\",   resp = NULL,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   ... )"},{"path":"/reference/predictive_error.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Draws of Predictive Errors — predictive_error.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. re.form Alias re_formula. method Method used obtain predictions. Can set \"posterior_predict\" (default), \"posterior_epred\", \"posterior_linpred\". details, see respective function documentations. resp Optional names response variables. specified, predictions performed specified response variables. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/predictive_error.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Draws of Predictive Errors — predictive_error.brmsfit","text":"S x N array predictive error draws, S   number posterior draws N number observations.","code":""},{"path":"/reference/predictive_error.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Draws of Predictive Errors — predictive_error.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler, cores = 2)  ## extract predictive errors pe <- predictive_error(fit) str(pe) } # }"},{"path":"/reference/predictive_interval.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictive Intervals — predictive_interval.brmsfit","title":"Predictive Intervals — predictive_interval.brmsfit","text":"Compute intervals posterior predictive distribution.","code":""},{"path":"/reference/predictive_interval.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive Intervals — predictive_interval.brmsfit","text":"","code":"# S3 method for class 'brmsfit' predictive_interval(object, prob = 0.9, ...)"},{"path":"/reference/predictive_interval.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive Intervals — predictive_interval.brmsfit","text":"object R object class brmsfit. prob number p (0 < p < 1) indicating desired probability mass include intervals. Defaults 0.9. ... arguments passed posterior_predict.","code":""},{"path":"/reference/predictive_interval.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictive Intervals — predictive_interval.brmsfit","text":"matrix 2 columns lower upper bounds   intervals, respectively, many rows observations predicted.","code":""},{"path":"/reference/predictive_interval.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictive Intervals — predictive_interval.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zBase, data = epilepsy, family = poisson()) predictive_interval(fit) } # }"},{"path":"/reference/prepare_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Predictions — prepare_predictions.brmsfit","title":"Prepare Predictions — prepare_predictions.brmsfit","text":"method helps preparing brms models certain post-processing tasks notably various forms predictions. Unless package developer, rarely need call prepare_predictions directly.","code":""},{"path":"/reference/prepare_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Predictions — prepare_predictions.brmsfit","text":"","code":"# S3 method for class 'brmsfit' prepare_predictions(   x,   newdata = NULL,   re_formula = NULL,   allow_new_levels = FALSE,   sample_new_levels = \"uncertainty\",   incl_autocor = TRUE,   oos = NULL,   resp = NULL,   ndraws = NULL,   draw_ids = NULL,   nsamples = NULL,   subset = NULL,   nug = NULL,   smooths_only = FALSE,   offset = TRUE,   newdata2 = NULL,   new_objects = NULL,   point_estimate = NULL,   ndraws_point_estimate = 1,   ... )  prepare_predictions(x, ...)"},{"path":"/reference/prepare_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Predictions — prepare_predictions.brmsfit","text":"x R object typically class 'brmsfit'. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. allow_new_levels flag indicating new levels group-level effects allowed (defaults FALSE). relevant newdata provided. sample_new_levels Indicates sample new levels grouping factors specified re_formula. argument relevant newdata provided allow_new_levels set TRUE. \"uncertainty\" (default), posterior sample new level drawn posterior draws randomly chosen existing level. posterior sample new level may drawn different existing level resulting set new posterior draws represents variation across existing levels. \"gaussian\", sample new levels (multivariate) normal distribution implied group-level standard deviations correlations. options may useful conducting Bayesian power analysis predicting new levels situations relatively levels observed old_data. \"old_levels\", directly sample new levels existing levels, new level assigned posterior draws (randomly chosen) existing level. incl_autocor flag indicating correlation structures originally specified via autocor included predictions. Defaults TRUE. oos Optional indices observations compute --sample rather -sample predictions. required models make use response values make predictions, , currently ARMA models. resp Optional names response variables. specified, predictions performed specified response variables. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. nsamples Deprecated alias ndraws. subset Deprecated alias draw_ids. nug Small positive number Gaussian process terms . numerical reasons, covariance matrix Gaussian process might positive definite. Adding small number matrix's diagonal often solves problem. NULL (default), nug chosen internally. smooths_only Logical; TRUE predictions related smoothing splines (.e., s t2) computed. Defaults FALSE. offset Logical; Indicates offsets included predictions. Defaults TRUE. newdata2 named list objects containing new data, passed via argument newdata. Required objects used autocorrelation structures, stanvars. new_objects Deprecated alias newdata2. point_estimate Shall returned object contain point estimates parameters instead posterior draws? Defaults NULL case point estimate computed. Alternatively, may set \"mean\" \"median\". argument primarily implemented ensure compatibility loo_subsample method. ndraws_point_estimate used point_estimate NULL. often shall point estimate's value repeated? Defaults 1. ... arguments passed validate_newdata.","code":""},{"path":"/reference/prepare_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Predictions — prepare_predictions.brmsfit","text":"object class 'brmsprep' 'mvbrmsprep',   depending whether univariate multivariate model passed.","code":""},{"path":"/reference/print.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary for a fitted model represented by a brmsfit object — print.brmsfit","title":"Print a summary for a fitted model represented by a brmsfit object — print.brmsfit","text":"Print summary fitted model represented brmsfit object","code":""},{"path":"/reference/print.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary for a fitted model represented by a brmsfit object — print.brmsfit","text":"","code":"# S3 method for class 'brmsfit' print(x, digits = 2, short = getOption(\"brms.short_summary\", FALSE), ...)"},{"path":"/reference/print.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary for a fitted model represented by a brmsfit object — print.brmsfit","text":"x object class brmsfit digits number significant digits printing summary; defaults 2. effective sample size always rounded integers. short flag indicating whether provide shorter summary less informational text. Defaults FALSE. Can set globally current session via brms.short_summary option. ... Additional arguments passed method summary brmsfit.","code":""},{"path":[]},{"path":"/reference/print.brmsprior.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for brmsprior objects — print.brmsprior","title":"Print method for brmsprior objects — print.brmsprior","text":"Print method brmsprior objects","code":""},{"path":"/reference/print.brmsprior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for brmsprior objects — print.brmsprior","text":"","code":"# S3 method for class 'brmsprior' print(x, show_df = NULL, ...)"},{"path":"/reference/print.brmsprior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for brmsprior objects — print.brmsprior","text":"x object class brmsprior. show_df Logical; Print priors single data.frame (TRUE) sequence sampling statements (FALSE)? ... Currently ignored.","code":""},{"path":"/reference/prior_draws.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Prior Draws — prior_draws.brmsfit","title":"Extract Prior Draws — prior_draws.brmsfit","text":"Extract prior draws specified parameters","code":""},{"path":"/reference/prior_draws.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Prior Draws — prior_draws.brmsfit","text":"","code":"# S3 method for class 'brmsfit' prior_draws(x, variable = NULL, pars = NULL, ...)  prior_draws(x, ...)  prior_samples(x, ...)"},{"path":"/reference/prior_draws.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Prior Draws — prior_draws.brmsfit","text":"x R object typically class brmsfit. variable character vector providing variables extract. default, variables extracted. pars Deprecated alias variable. reasons backwards compatibility, pars interpreted vector regular expressions default unless fixed = TRUE specified. ... Arguments passed individual methods (applicable).","code":""},{"path":"/reference/prior_draws.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Prior Draws — prior_draws.brmsfit","text":"data.frame containing prior draws.","code":""},{"path":"/reference/prior_draws.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Prior Draws — prior_draws.brmsfit","text":"make use function, model must contain draws   prior distributions. can ensured setting sample_prior =   TRUE function brm. Priors certain parameters saved   technical reasons. instance, case   population-level intercept, computed fitting model   default. want treat intercept part   regression coefficients, sampling prior becomes possible,   use ... ~ 0 + Intercept + ... formulas.","code":""},{"path":"/reference/prior_draws.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Prior Draws — prior_draws.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler, family = \"cumulative\",            prior = set_prior(\"normal(0,2)\", class = \"b\"),            sample_prior = TRUE)  # extract all prior draws draws1 <- prior_draws(fit) head(draws1)  # extract prior draws for the coefficient of 'treat' draws2 <- prior_draws(fit, \"b_treat\") head(draws2) } # }"},{"path":"/reference/prior_summary.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of brms models — prior_summary.brmsfit","title":"Priors of brms models — prior_summary.brmsfit","text":"Extract priors models fitted brms.","code":""},{"path":"/reference/prior_summary.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of brms models — prior_summary.brmsfit","text":"","code":"# S3 method for class 'brmsfit' prior_summary(object, all = TRUE, ...)"},{"path":"/reference/prior_summary.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Priors of brms models — prior_summary.brmsfit","text":"object object class brmsfit. Logical; Show parameters model may priors (TRUE) proper priors (FALSE)? ... arguments passed methods.","code":""},{"path":"/reference/prior_summary.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Priors of brms models — prior_summary.brmsfit","text":"brmsprior object.","code":""},{"path":"/reference/prior_summary.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Priors of brms models — prior_summary.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(   count ~ zAge + zBase * Trt + (1|patient) + (1|obs),   data = epilepsy, family = poisson(),   prior = prior(student_t(5,0,10), class = b) +     prior(cauchy(0,2), class = sd) )  prior_summary(fit) prior_summary(fit, all = FALSE) print(prior_summary(fit, all = FALSE), show_df = FALSE) } # }"},{"path":"/reference/psis.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","title":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","text":"Implementation Pareto smoothed importance sampling (PSIS), method stabilizing importance ratios. version PSIS implemented corresponds algorithm presented Vehtari, Simpson, Gelman, Yao, Gabry (2024). PSIS diagnostics see pareto-k-diagnostic page.","code":""},{"path":"/reference/psis.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","text":"","code":"# S3 method for class 'brmsfit' psis(log_ratios, newdata = NULL, resp = NULL, model_name = NULL, ...)"},{"path":"/reference/psis.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","text":"log_ratios fitted model object class brmsfit. Argument named \"log_ratios\" match argument name loo::psis generic function. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. resp Optional names response variables. specified, predictions performed specified response variables. model_name Currently ignored. ... arguments passed log_lik loo::psis.","code":""},{"path":"/reference/psis.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","text":"psis() methods return object class \"psis\", named list following components: log_weights Vector matrix smoothed (truncated) unnormalized log weights. get normalized weights use weights() method provided objects class \"psis\". diagnostics named list containing two vectors: pareto_k: Estimates shape parameter \\(k\\) generalized Pareto distribution. See pareto-k-diagnostic page details. n_eff: PSIS effective sample size estimates. Objects class \"psis\" also following attributes: norm_const_log Vector precomputed values colLogSumExps(log_weights) used internally weights method normalize log weights. tail_len Vector tail lengths used fitting generalized Pareto distribution. r_eff specified, user's r_eff argument. dims Integer vector length 2 containing S (posterior sample size) N (number observations). method Method used importance sampling, psis.","code":""},{"path":"/reference/psis.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","text":"Vehtari, ., Gelman, ., Gabry, J. (2017). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing. 27(5), 1413–1432. doi:10.1007/s11222-016-9696-4 (journal version, preprint arXiv:1507.04544). Vehtari, ., Simpson, D., Gelman, ., Yao, Y., Gabry, J. (2024). Pareto smoothed importance sampling. Journal Machine Learning Research, 25(72):1-58. PDF","code":""},{"path":"/reference/psis.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pareto smoothed importance sampling (PSIS) — psis.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(rating ~ treat + period + carry, data = inhaler) psis(fit) } # }"},{"path":"/reference/ranef.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Group-Level Estimates — ranef.brmsfit","title":"Extract Group-Level Estimates — ranef.brmsfit","text":"Extract group-level ('random') effects level brmsfit object.","code":""},{"path":"/reference/ranef.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Group-Level Estimates — ranef.brmsfit","text":"","code":"# S3 method for class 'brmsfit' ranef(   object,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   pars = NULL,   groups = NULL,   ... )"},{"path":"/reference/ranef.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Group-Level Estimates — ranef.brmsfit","text":"object object class brmsfit. summary summary statistics returned instead raw values? Default TRUE. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. pars Optional names coefficients extract. default, coefficients extracted. groups Optional names grouping variables extract effects. ... Currently ignored.","code":""},{"path":"/reference/ranef.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Group-Level Estimates — ranef.brmsfit","text":"list 3D arrays (one per grouping factor).  summary TRUE,  1st dimension contains factor levels,  2nd dimension contains summary statistics  (see posterior_summary),  3rd dimension contains group-level effects.  summary FALSE, 1st dimension contains  posterior draws, 2nd dimension contains factor levels,  3rd dimension contains group-level effects.","code":""},{"path":"/reference/ranef.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Group-Level Estimates — ranef.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt + (1+Trt|visit),            data = epilepsy, family = gaussian(), chains = 2) ranef(fit) } # }"},{"path":"/reference/read_csv_as_stanfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CmdStan CSV files as a brms-formatted stanfit object — read_csv_as_stanfit","title":"Read CmdStan CSV files as a brms-formatted stanfit object — read_csv_as_stanfit","text":"read_csv_as_stanfit used internally read CmdStan CSV files stanfit object consistent structure fit slot brmsfit object.","code":""},{"path":"/reference/read_csv_as_stanfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CmdStan CSV files as a brms-formatted stanfit object — read_csv_as_stanfit","text":"","code":"read_csv_as_stanfit(   files,   variables = NULL,   sampler_diagnostics = NULL,   model = NULL,   exclude = \"\",   algorithm = \"sampling\" )"},{"path":"/reference/read_csv_as_stanfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CmdStan CSV files as a brms-formatted stanfit object — read_csv_as_stanfit","text":"files Character vector CSV files names draws stored. variables Character vector variables extract CSV files. sampler_diagnostics Character vector sampler diagnostics extract. model compiled cmdstanr model object (optional). Provide argument want allow updating model without recompilation. exclude Character vector variables exclude stanfit. used variables also specified. algorithm algorithm model fitted. See brm details.","code":""},{"path":"/reference/read_csv_as_stanfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CmdStan CSV files as a brms-formatted stanfit object — read_csv_as_stanfit","text":"stanfit object consistent structure fit  slot brmsfit object.","code":""},{"path":"/reference/read_csv_as_stanfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read CmdStan CSV files as a brms-formatted stanfit object — read_csv_as_stanfit","text":"","code":"if (FALSE) { # \\dontrun{ # fit a model manually via cmdstanr scode <- stancode(count ~ Trt, data = epilepsy) sdata <- standata(count ~ Trt, data = epilepsy) mod <- cmdstanr::cmdstan_model(cmdstanr::write_stan_file(scode)) stanfit <- mod$sample(data = sdata)  # feed the Stan model back into brms fit <- brm(count ~ Trt, data = epilepsy, empty = TRUE, backend = 'cmdstanr') fit$fit <- read_csv_as_stanfit(stanfit$output_files(), model = mod) fit <- rename_pars(fit) summary(fit) } # }"},{"path":"/reference/recompile_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompile Stan models in brmsfit objects — recompile_model","title":"Recompile Stan models in brmsfit objects — recompile_model","text":"Recompile Stan model inside brmsfit object, necessary. change model, simply recreates executable sampling possible .","code":""},{"path":"/reference/recompile_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompile Stan models in brmsfit objects — recompile_model","text":"","code":"recompile_model(x, recompile = NULL)"},{"path":"/reference/recompile_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompile Stan models in brmsfit objects — recompile_model","text":"x object class brmsfit. recompile Logical, indicating whether Stan model recompiled. NULL (default), recompile_model tries figure internally, recompilation necessary. Setting FALSE cause recompile_model always return brmsfit object unchanged.","code":""},{"path":"/reference/recompile_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recompile Stan models in brmsfit objects — recompile_model","text":"(possibly updated) brmsfit object.","code":""},{"path":"/reference/reloo.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute exact cross-validation for problematic observations — reloo.brmsfit","title":"Compute exact cross-validation for problematic observations — reloo.brmsfit","text":"Compute exact cross-validation problematic observations approximate leave-one-cross-validation may return incorrect results. Models problematic observations can run parallel using future package.","code":""},{"path":"/reference/reloo.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute exact cross-validation for problematic observations — reloo.brmsfit","text":"","code":"# S3 method for class 'brmsfit' reloo(   x,   loo = NULL,   k_threshold = 0.7,   newdata = NULL,   resp = NULL,   check = TRUE,   recompile = NULL,   future_args = list(),   ... )  # S3 method for class 'loo' reloo(x, fit, ...)  reloo(x, ...)"},{"path":"/reference/reloo.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute exact cross-validation for problematic observations — reloo.brmsfit","text":"x R object class brmsfit loo depending method. loo R object class loo. NULL, brms try extract precomputed loo object fitted model, added via add_criterion. k_threshold threshold Pareto \\(k\\) estimates treated problematic. Defaults 0.7. See pareto_k_ids details. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. resp Optional names response variables. specified, predictions performed specified response variables. check Logical; TRUE (default), checks check performed loo object generated brmsfit object passed argument fit. recompile Logical, indicating whether Stan model recompiled. may necessary running reloo another machine one used fit model. future_args list arguments passed future additional control parallel execution activated. ... arguments passed update.brmsfit log_lik.brmsfit. fit R object class brmsfit.","code":""},{"path":"/reference/reloo.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute exact cross-validation for problematic observations — reloo.brmsfit","text":"object class loo.","code":""},{"path":"/reference/reloo.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute exact cross-validation for problematic observations — reloo.brmsfit","text":"Warnings Pareto \\(k\\) estimates indicate observations approximation LOO problematic (described detail Vehtari, Gelman, Gabry (2017) loo package documentation). \\(J\\) observations \\(k\\) estimates k_threshold, reloo refit original model \\(J\\) times, time leaving one \\(J\\) problematic observations. pointwise contributions observations total ELPD computed directly substituted previous estimates \\(J\\) observations stored original loo object.","code":""},{"path":[]},{"path":"/reference/reloo.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute exact cross-validation for problematic observations — reloo.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),             data = epilepsy, family = poisson())  # throws warning about some pareto k estimates being too high (loo1 <- loo(fit1))  # no more warnings after reloo (reloo1 <- reloo(fit1, loo = loo1, chains = 1)) } # }"},{"path":"/reference/rename_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename parameters in brmsfit objects — rename_pars","title":"Rename parameters in brmsfit objects — rename_pars","text":"Rename parameters within stanfit object model fitting ensure reasonable parameter names. function usually called automatically brm users rarely required call .","code":""},{"path":"/reference/rename_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename parameters in brmsfit objects — rename_pars","text":"","code":"rename_pars(x)"},{"path":"/reference/rename_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename parameters in brmsfit objects — rename_pars","text":"x brmsfit object.","code":""},{"path":"/reference/rename_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename parameters in brmsfit objects — rename_pars","text":"brmsfit object adjusted parameter names.","code":""},{"path":"/reference/rename_pars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename parameters in brmsfit objects — rename_pars","text":"Function rename_pars deprecated alias rename_pars.","code":""},{"path":"/reference/rename_pars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename parameters in brmsfit objects — rename_pars","text":"","code":"if (FALSE) { # \\dontrun{ # fit a model manually via rstan scode <- stancode(count ~ Trt, data = epilepsy) sdata <- standata(count ~ Trt, data = epilepsy) stanfit <- rstan::stan(model_code = scode, data = sdata)  # feed the Stan model back into brms fit <- brm(count ~ Trt, data = epilepsy, empty = TRUE) fit$fit <- stanfit fit <- rename_pars(fit) summary(fit) } # }"},{"path":"/reference/residuals.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","text":"method alias predictive_error.brmsfit additional arguments obtaining summaries computed draws.","code":""},{"path":"/reference/residuals.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","text":"","code":"# S3 method for class 'brmsfit' residuals(   object,   newdata = NULL,   re_formula = NULL,   method = \"posterior_predict\",   type = c(\"ordinary\", \"pearson\"),   resp = NULL,   ndraws = NULL,   draw_ids = NULL,   sort = FALSE,   summary = TRUE,   robust = FALSE,   probs = c(0.025, 0.975),   ... )"},{"path":"/reference/residuals.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. method Method used obtain predictions. Can set \"posterior_predict\" (default), \"posterior_epred\", \"posterior_linpred\". details, see respective function documentations. type type residuals, either \"ordinary\" \"pearson\". information provided 'Details'. resp Optional names response variables. specified, predictions performed specified response variables. ndraws Positive integer indicating many posterior draws used. NULL (default) draws used. Ignored draw_ids NULL. draw_ids integer vector specifying posterior draws used. NULL (default), draws used. sort Logical. relevant time series models. Indicating whether return predicted values original order (FALSE; default) order time series (TRUE). summary summary statistics returned instead raw values? Default TRUE.. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. used summary TRUE. probs percentiles computed quantile function. used summary TRUE. ... arguments passed prepare_predictions control several aspects data validation prediction.","code":""},{"path":"/reference/residuals.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","text":"array predictive error/residual draws.   summary = FALSE output resembles   predictive_error.brmsfit. summary = TRUE output   N x E matrix, N number observations E denotes   summary statistics computed draws.","code":""},{"path":"/reference/residuals.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","text":"Residuals type 'ordinary' form \\(R = Y -   Yrep\\), \\(Y\\) observed \\(Yrep\\) predicted response.   Residuals type pearson form \\(R = (Y - Yrep) /   SD(Yrep)\\), \\(SD(Yrep)\\) estimate standard deviation   \\(Yrep\\).","code":""},{"path":"/reference/residuals.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ ## fit a model fit <- brm(rating ~ treat + period + carry + (1|subject),            data = inhaler, cores = 2)  ## extract residuals/predictive errors res <- residuals(fit) head(res) } # }"},{"path":"/reference/restructure.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructure Old brmsfit Objects — restructure.brmsfit","title":"Restructure Old brmsfit Objects — restructure.brmsfit","text":"Restructure old brmsfit objects work latest brms version. function called internally applying post-processing methods. However, order avoid unnecessary run time caused restructuring, recommend explicitly calling restructure per model updating brms.","code":""},{"path":"/reference/restructure.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructure Old brmsfit Objects — restructure.brmsfit","text":"","code":"# S3 method for class 'brmsfit' restructure(x, ...)"},{"path":"/reference/restructure.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructure Old brmsfit Objects — restructure.brmsfit","text":"x object class brmsfit. ... Currently ignored.","code":""},{"path":"/reference/restructure.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructure Old brmsfit Objects — restructure.brmsfit","text":"brmsfit object compatible latest version   brms.","code":""},{"path":"/reference/restructure.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Restructure Old brmsfit Objects — restructure.brmsfit","text":"restructuring old spline model (fitted brms < 2.19.3) avoid prediction inconsistencies machines (see GitHub issue #1465), please make sure restructure model machine originally fitted.","code":""},{"path":"/reference/restructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructure Old R Objects — restructure","title":"Restructure Old R Objects — restructure","text":"restructure generic function used restructure old R objects work newer versions package generated . original use within brms package, new methods use objects packages can registered generic.","code":""},{"path":"/reference/restructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructure Old R Objects — restructure","text":"","code":"restructure(x, ...)"},{"path":"/reference/restructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructure Old R Objects — restructure","text":"x object restructured. object's class determine method apply ... Additional arguments pass specific methods","code":""},{"path":"/reference/restructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructure Old R Objects — restructure","text":"object class x compatible latest  version package generated .","code":""},{"path":"/reference/restructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Restructure Old R Objects — restructure","text":"Usually version package generated object   stored somewhere object information used   specific method determine transformations apply. See   restructure.brmsfit default   method applied brms models. can view available methods   typing: methods(restructure)","code":""},{"path":[]},{"path":"/reference/rows2labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Rows to Labels — rows2labels","title":"Convert Rows to Labels — rows2labels","text":"Convert information rows labels row.","code":""},{"path":"/reference/rows2labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Rows to Labels — rows2labels","text":"","code":"rows2labels(x, digits = 2, sep = \" & \", incl_vars = TRUE, ...)"},{"path":"/reference/rows2labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Rows to Labels — rows2labels","text":"x data.frame extract labels. digits Minimal number decimal places shown labels numeric variables. sep single character string defining separator variables used labels. incl_vars Indicates variable names part labels. Defaults TRUE. ... Currently unused.","code":""},{"path":"/reference/rows2labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Rows to Labels — rows2labels","text":"character vector length number   rows x.","code":""},{"path":[]},{"path":"/reference/s.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining smooths in brms formulas — s","title":"Defining smooths in brms formulas — s","text":"Functions used definition smooth terms within model formulas. function evaluate (spline) smooth - exists purely help set model using spline based smooths.","code":""},{"path":"/reference/s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining smooths in brms formulas — s","text":"","code":"s(...)  t2(...)"},{"path":"/reference/s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining smooths in brms formulas — s","text":"... Arguments passed mgcv::s mgcv::t2.","code":""},{"path":"/reference/s.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defining smooths in brms formulas — s","text":"function defined just simple wrappers respective   functions mgcv package. using , please cite   appropriate references obtained via citation(\"mgcv\"). brms uses \"random effects\" parameterization smoothing splines  explained mgcv::gamm. nice tutorial  topic can found Pedersen et al. (2019). answers provided  Stan discourse post  may also helpful.","code":""},{"path":"/reference/s.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Defining smooths in brms formulas — s","text":"Pedersen, E. J., Miller, D. L., Simpson, G. L., & Ross, N. (2019). Hierarchical generalized additive models ecology: introduction mgcv. PeerJ.","code":""},{"path":[]},{"path":"/reference/s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defining smooths in brms formulas — s","text":"","code":"if (FALSE) { # \\dontrun{ # simulate some data dat <- mgcv::gamSim(1, n = 200, scale = 2)  # fit univariate smooths for all predictors fit1 <- brm(y ~ s(x0) + s(x1) + s(x2) + s(x3),             data = dat, chains = 2) summary(fit1) plot(conditional_smooths(fit1), ask = FALSE)  # fit a more complicated smooth model fit2 <- brm(y ~ t2(x0, x1) + s(x2, by = x3),             data = dat, chains = 2) summary(fit2) plot(conditional_smooths(fit2), ask = FALSE) } # }"},{"path":"/reference/sar.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial simultaneous autoregressive (SAR) structures — sar","title":"Spatial simultaneous autoregressive (SAR) structures — sar","text":"Set spatial simultaneous autoregressive (SAR) term brms. function evaluate arguments – exists purely help set model SAR terms.","code":""},{"path":"/reference/sar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial simultaneous autoregressive (SAR) structures — sar","text":"","code":"sar(M, type = \"lag\")"},{"path":"/reference/sar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial simultaneous autoregressive (SAR) structures — sar","text":"M object specifying spatial weighting matrix. Can either spatial weight matrix object class listw nb, spatial weighting matrix can computed. type Type SAR structure. Either \"lag\" (SAR response values) \"error\" (SAR residuals). information provided 'Details' section.","code":""},{"path":"/reference/sar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial simultaneous autoregressive (SAR) structures — sar","text":"object class 'sar_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":"/reference/sar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial simultaneous autoregressive (SAR) structures — sar","text":"lagsar structure implements SAR response values:   $$y = \\rho W y + \\eta + e$$   errorsar structure implements SAR residuals:   $$y = \\eta + u, u = \\rho W u + e$$   equations, \\(\\eta\\) predictor term \\(e\\)   independent normally t-distributed residuals. Currently, families   gaussian student support SAR structures.","code":""},{"path":[]},{"path":"/reference/sar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial simultaneous autoregressive (SAR) structures — sar","text":"","code":"if (FALSE) { # \\dontrun{ data(oldcol, package = \"spdep\") fit1 <- brm(CRIME ~ INC + HOVAL + sar(COL.nb, type = \"lag\"),             data = COL.OLD, data2 = list(COL.nb = COL.nb),             chains = 2, cores = 2) summary(fit1) plot(fit1)  fit2 <- brm(CRIME ~ INC + HOVAL + sar(COL.nb, type = \"error\"),             data = COL.OLD, data2 = list(COL.nb = COL.nb),             chains = 2, cores = 2) summary(fit2) plot(fit2) } # }"},{"path":"/reference/save_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Saving of Parameter Draws — save_pars","title":"Control Saving of Parameter Draws — save_pars","text":"Control (draws ) parameters saved brms model. output function meant usage save_pars argument brm.","code":""},{"path":"/reference/save_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Saving of Parameter Draws — save_pars","text":"","code":"save_pars(group = TRUE, latent = FALSE, all = FALSE, manual = NULL)"},{"path":"/reference/save_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Saving of Parameter Draws — save_pars","text":"group flag indicate group-level coefficients level grouping factors saved (default TRUE). Set FALSE save memory. Alternatively, group may also character vector naming grouping factors save draws coefficients. latent flag indicate draws latent variables obtained using mi terms saved (default FALSE). Saving draws allows better use methods posterior_predict latent variables leads large R objects even models moderate size complexity. Alternatively, latent may also character vector naming latent variables save draws. flag indicate draws variables defined Stan's parameters block saved (default FALSE). Saving draws required order apply certain methods bridge_sampler bayes_factor. manual character vector naming Stan variable names saved. names match variable names inside Stan code renaming. feature meant power users rarely useful outside special cases.","code":""},{"path":"/reference/save_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Saving of Parameter Draws — save_pars","text":"list class \"save_pars\".","code":""},{"path":"/reference/save_pars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Saving of Parameter Draws — save_pars","text":"","code":"if (FALSE) { # \\dontrun{ # don't store group-level coefficients fit <- brm(count ~ zAge + zBase * Trt + (1|patient),            data = epilepsy, family = poisson(),            save_pars = save_pars(group = FALSE)) variables(fit) } # }"},{"path":"/reference/set_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Definitions for brms Models — set_prior","title":"Prior Definitions for brms Models — set_prior","text":"Define priors specific parameters classes parameters.","code":""},{"path":"/reference/set_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Definitions for brms Models — set_prior","text":"","code":"set_prior(   prior,   class = \"b\",   coef = \"\",   group = \"\",   resp = \"\",   dpar = \"\",   nlpar = \"\",   lb = NA,   ub = NA,   tag = \"\",   check = TRUE )  prior(prior, ...)  prior_(prior, ...)  prior_string(prior, ...)  empty_prior()"},{"path":"/reference/set_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior Definitions for brms Models — set_prior","text":"prior character string defining distribution Stan language class parameter class. Defaults \"b\" (.e. population-level effects). See 'Details' valid parameter classes. coef Name coefficient within parameter class. group Grouping factor group-level parameters. resp Name response variable. used multivariate models. dpar Name distributional parameter. used distributional models. nlpar Name non-linear parameter. used non-linear models. lb Lower bound parameter restriction. Currently allowed classes \"b\". Defaults NULL, restriction. ub Upper bound parameter restriction. Currently allowed classes \"b\". Defaults NULL, restriction. tag Character append lprior variable Stan code. Used selectively checking sensitivity priors priorsense. check Logical; Indicates whether priors checked validity (far possible). Defaults TRUE. FALSE, prior passed Stan code , arguments ignored. ... Arguments passed set_prior.","code":""},{"path":"/reference/set_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Definitions for brms Models — set_prior","text":"object class brmsprior used prior   argument brm.","code":""},{"path":"/reference/set_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior Definitions for brms Models — set_prior","text":"set_prior used define prior distributions parameters   brms models. functions prior, prior_,   prior_string aliases set_prior allowing   different kind argument specification.   prior allows specifying arguments expression without   quotation marks using non-standard evaluation.   prior_ allows specifying arguments one-sided formulas   wrapped quote.   prior_string allows specifying arguments strings just   set_prior . , explain usage list common   prior distributions parameters.   complete overview possible prior distributions given   Stan Reference Manual available https://mc-stan.org/. combine multiple priors, use c(...) + operator   (see 'Examples'). brms check priors written   correct Stan language. Instead, Stan check   syntactical correctness model parsed C++   returns error .   , however, imply priors always meaningful   accepted Stan. Although brms trys find common problems   (e.g., setting bounded priors unbounded parameters), guarantee   defined priors reasonable model.   , list types parameters brms models,   user can specify prior distributions. , provide details individual parameter classes can   set priors . Often, may immediately clear, parameters   present model. get full list parameters parameter   classes priors can specified (depending model) use   function default_prior. 1. Population-level ('fixed') effects Every Population-level effect regression parameter   represents name corresponding population-level effect.   Suppose, instance, y predicted x1 x2   (.e., y ~ x1 + x2 formula syntax).   , x1 x2 regression parameters   b_x1 b_x2 respectively.   default prior population-level effects (including monotonic   category specific effects) improper flat prior reals.   common options normal priors student-t priors.   want normal prior mean 0   standard deviation 5 x1, unit student-t prior 10   degrees freedom x2, can specify via   set_prior(\"normal(0,5)\", class = \"b\", coef = \"x1\") set_prior(\"student_t(10, 0, 1)\", class = \"b\", coef = \"x2\").   put prior population-level effects ,   may write shortcut set_prior(\"<prior>\", class = \"b\").   also leads faster sampling, priors can vectorized case.   ways defining priors can combined using instance   set_prior(\"normal(0, 2)\", class = \"b\") set_prior(\"normal(0, 10)\", class = \"b\", coef = \"x1\")   time. set normal(0, 10) prior   effect x1 normal(0, 2) prior   population-level effects.   However, break vectorization   may slow sampling procedure bit. case default intercept parameterization   (discussed 'Details' section brmsformula),   general priors class \"b\" affect   intercept. Instead, intercept parameter class   named \"Intercept\" priors can thus   specified via set_prior(\"<prior>\", class = \"Intercept\").   Setting prior intercept break vectorization   population-level effects.   Note technically, prior set intercept   results internally centering population-level predictors   around zero improve sampling efficiency. centered   intercept, specifying prior actually much easier   intuitive original intercept, since former   represents expected response value predictors   means. treat intercept ordinary   population-level effect avoid centering parameterization,   use 0 + Intercept right-hand side model formula. non-linear models, population-level effects defined separately   non-linear parameter. Accordingly, necessary specify   non-linear parameter set_prior priors   can assigned correctly.   , instance, alpha parameter x predictor   want define prior, can write   set_prior(\"<prior>\", coef = \"x\", nlpar = \"alpha\").   shortcut can use set_prior(\"<prior>\", nlpar = \"alpha\")   set prior population-level effects alpha . goes specifying priors specific distributional   parameters context distributional regression, example,   set_prior(\"<prior>\", coef = \"x\", dpar = \"sigma\").   parameter classes (see ), need indicate   non-linear distributional parameters way shown . desired, population-level effects can restricted fall   within certain interval using lb ub arguments   set_prior. often required defining priors   defined everywhere real line, uniform   gamma priors. defining uniform(2,4) prior,   write set_prior(\"uniform(2,4)\", lb = 2, ub = 4).   using prior defined positive reals   (gamma prior) set lb = 0.   situations, useful restrict population-level   parameters bounded priors   (non-linear models important exception),   really want way go. 2. Group-level ('random') effects group-level effect grouping factor standard deviation named   sd_<group>_<coef>. Consider, instance, formula   y ~ x1 + x2 + (1 + x1 | g).   see intercept well x1 group-level effects   nested grouping factor g.   corresponding standard deviation parameters named   sd_g_Intercept sd_g_x1 respectively.   parameters restricted non-negative , default,   half student-t prior 3 degrees freedom   scale parameter depends standard deviation response   applying link function. Minimally, scale parameter 2.5.   prior used () weakly informative order influence   results possible, (b) providing least regularization   considerably improve convergence sampling efficiency.   define prior distribution standard deviations   specific grouping factor,   use set_prior(\"<prior>\", class = \"sd\", group = \"<group>\").   define prior distribution specific standard deviation   specific grouping factor, may write set_prior(\"<prior>\", class = \"sd\", group = \"<group>\", coef = \"<coef>\"). one group-level effect per grouping factor,   correlations effects estimated.   prior lkj_corr_cholesky(eta) short   lkj(eta) eta > 0   essentially prior (Cholesky factors) correlation matrices.   eta = 1 (default) correlations matrices   equally likely priori. eta > 1, extreme correlations   become less likely, whereas 0 < eta < 1 results   higher probabilities extreme correlations.   Correlation matrix parameters brms models named   cor_<group>, (e.g., cor_g g grouping factor).   set prior every correlation matrix,   use instance set_prior(\"lkj(2)\", class = \"cor\").   Internally, priors transformed put Cholesky factors   correlation matrices improve efficiency numerical stability.   corresponding parameter class Cholesky factors L,   recommended specify priors parameter class directly. 4. Smoothing Splines Smoothing splines implemented brms using 'random effects'   formulation explained gamm). Thus,   spline corresponding standard deviations modeling variability   within term. brms, parameter class called sds   priors can specified via   set_prior(\"<prior>\", class = \"sds\", coef = \"<term label>\").   default prior standard deviations group-level effects. 5. Gaussian processes Gaussian processes currently implemented brms two   parameters, standard deviation parameter sdgp,   characteristic length-scale parameter lscale (see gp   details). default prior sdgp   standard deviations group-level effects. default prior   lscale informative inverse-gamma prior specifically tuned   covariates Gaussian process (details see   https://betanalpha.github.io/assets/case_studies/gp_part3/part3.html).   tuned prior may overly informative cases, please   consider priors well make sure inference robust prior   specification. tuning fails, half-normal prior used instead. 6. Autocorrelation parameters autocorrelation parameters currently implemented named ar   (autoregression), ma (moving average), sderr (standard   deviation latent residuals latent ARMA models), cosy (compound   symmetry correlation), car (spatial conditional autoregression),   well lagsar errorsar (spatial simultaneous   autoregression). Priors can defined set_prior(\"<prior>\", class = \"ar\")   ar similar autocorrelation parameters. default,   ar ma bounded -1 1;   cosy, car, lagsar, errorsar bounded   0 1. default priors flat   respective definition areas. 7. Parameters measurement error terms Latent variables induced via measurement error terms   require mean standard deviation parameters, whose prior classes   named \"meanme\" \"sdme\", respectively. multiple   latent variables induced way, correlation matrix   modeled well corresponding priors can specified via   \"corme\" class. parameters flat priors   respective definition spaces default. 8. Distance parameters monotonic effects explained details section brm,   monotonic effects make use special parameter vector   estimate 'normalized distances' consecutive predictor   categories. realized Stan using simplex   parameter type. class named \"simo\" (short   simplex monotonic) brms.   valid prior simplex parameters   dirichlet prior, accepts vector length K - 1   (K = number predictor categories) input defining   'concentration' distribution. Explaining dirichlet prior   beyond scope documentation, want describe   define prior syntactically correct.   predictor x K categories modeled monotonic,   can define prior corresponding simplex via prior(dirichlet(<vector>), class = simo, coef = mox1).   1 end coef indicates first   simplex term. interactions multiple monotonic   variables modeled, multiple simplexes per term required.   <vector>, can put R expression   defining vector length K - 1. default uniform   prior (.e. <vector> = rep(1, K-1)) simplexes   respective dimension. 9. Parameters specific families families need additional parameters estimated.   Families gaussian, student, skew_normal,   lognormal, gen_extreme_value need parameter   sigma account residual standard deviation.   default, sigma half student-t prior scales   way group-level standard deviations.   , family student needs parameter   nu representing degrees freedom Student-t distribution.   default, nu prior gamma(2, 0.1),   close penalized complexity prior (see Stan prior choice Wiki),   fixed lower bound 1.   Family negbinomial needs shape parameter   default inv_gamma(0.4, 0.3) prior close   penalized complexity prior (see Stan prior choice Wiki).   Families gamma, weibull, inverse.gaussian,   need shape parameter gamma(0.01, 0.01)   prior default.   families cumulative, cratio, sratio,   acat, threshold = \"equidistant\",   parameter delta used model distance   two adjacent thresholds.   default, delta improper flat prior reals.   von_mises family needs parameter kappa, representing   concentration parameter. default, kappa prior   gamma(2, 0.01). Every family specific parameter prior class,   set_prior(\"<prior>\", class = \"<parameter>\") right way go.   priors chosen weakly informative,   minimal influence estimations,   improving convergence sampling efficiency. 10. Shrinkage priors reduce danger overfitting models many predictor terms fit   comparably sparse data, brms supports special shrinkage priors, namely   (regularized) horseshoe R2D2 prior.   priors can applied many parameter classes, either directly   coefficient classes (e.g., class b), directly setting priors   supported, corresponding standard deviation   hyperparameters (e.g., class sd) otherwise. Currently, following   classes support shrinkage priors: b (overall regression   coefficients), sds (SDs smoothing splines), sdgp (SDs   Gaussian processes), ar (autoregressive coefficients), ma   (moving average coefficients), sderr (SD latent residuals),   sdcar (SD spatial CAR structures), sd (SD varying   coefficients). 11. Fixing parameters constants Fixing parameters constants possible using constant   function, example, constant(1) fix parameter 1.   Broadcasting vectors matrices done automatically.","code":""},{"path":"/reference/set_prior.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Prior Definitions for brms Models — set_prior","text":"prior(): Alias set_prior allowing specify arguments expressions without quotation marks. prior_(): Alias set_prior allowing specify arguments one-sided formulas wrapped quote. prior_string(): Alias set_prior allowing specify arguments strings. empty_prior(): Create empty brmsprior object.","code":""},{"path":[]},{"path":"/reference/set_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior Definitions for brms Models — set_prior","text":"","code":"## use alias functions (prior1 <- prior(cauchy(0, 1), class = sd)) #> sd ~ cauchy(0, 1) (prior2 <- prior_(~cauchy(0, 1), class = ~sd)) #> sd ~ cauchy(0, 1) (prior3 <- prior_string(\"cauchy(0, 1)\", class = \"sd\")) #> sd ~ cauchy(0, 1) identical(prior1, prior2) #> [1] TRUE identical(prior1, prior3) #> [1] TRUE  # check which parameters can have priors default_prior(rating ~ treat + period + carry + (1|subject),              data = inhaler, family = cumulative()) #>                 prior     class      coef   group resp dpar nlpar lb ub tag #>  student_t(3, 0, 2.5) Intercept                                             #>  student_t(3, 0, 2.5) Intercept         1                                   #>  student_t(3, 0, 2.5) Intercept         2                                   #>  student_t(3, 0, 2.5) Intercept         3                                   #>                (flat)         b                                             #>                (flat)         b     carry                                   #>                (flat)         b    period                                   #>                (flat)         b     treat                                   #>  student_t(3, 0, 2.5)        sd                                    0        #>  student_t(3, 0, 2.5)        sd           subject                  0        #>  student_t(3, 0, 2.5)        sd Intercept subject                  0        #>        source #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized)  # define some priors bprior <- c(prior_string(\"normal(0,10)\", class = \"b\"),             prior(normal(1,2), class = b, coef = treat),             prior_(~cauchy(0,2), class = ~sd,                    group = ~subject, coef = ~Intercept))  # verify that the priors indeed found their way into Stan's model code stancode(rating ~ treat + period + carry + (1|subject),          data = inhaler, family = cumulative(),          prior = bprior) #> // generated with brms 2.22.12 #> functions { #>   /* cumulative-logit log-PDF for a single response #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   disc: discrimination parameter #>    *   thres: ordinal thresholds #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real cumulative_logit_lpmf(int y, real mu, real disc, vector thres) { #>      int nthres = num_elements(thres); #>      if (y == 1) { #>        return log_inv_logit(disc * (thres[1] - mu)); #>      } else if (y == nthres + 1) { #>        return log1m_inv_logit(disc * (thres[nthres] - mu)); #>      } else { #>        return log_inv_logit_diff(disc * (thres[y] - mu), disc * (thres[y - 1] - mu)); #>      } #>    } #>   /* cumulative-logit log-PDF for a single response and merged thresholds #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   disc: discrimination parameter #>    *   thres: vector of merged ordinal thresholds #>    *   j: start and end index for the applid threshold within 'thres' #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real cumulative_logit_merged_lpmf(int y, real mu, real disc, vector thres, array[] int j) { #>      return cumulative_logit_lpmf(y | mu, disc, thres[j[1]:j[2]]); #>    } #>   /* ordered-logistic log-PDF for a single response and merged thresholds #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   thres: vector of merged ordinal thresholds #>    *   j: start and end index for the applid threshold within 'thres' #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real ordered_logistic_merged_lpmf(int y, real mu, vector thres, array[] int j) { #>      return ordered_logistic_lpmf(y | mu, thres[j[1]:j[2]]); #>    } #>  #> } #> data { #>   int<lower=1> N;  // total number of observations #>   array[N] int Y;  // response variable #>   int<lower=2> nthres;  // number of thresholds #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 1:K) { #>     means_X[i] = mean(X[, i]); #>     Xc[, i] = X[, i] - means_X[i]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   ordered[nthres] Intercept;  // temporary thresholds for centered predictors #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #> } #> transformed parameters { #>   real disc = 1;  // discrimination parameters #>   vector[N_1] r_1_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior += normal_lpdf(b[1] | 1, 2); #>   lprior += normal_lpdf(b[2] | 0,10); #>   lprior += normal_lpdf(b[3] | 0,10); #>   lprior += student_t_lpdf(Intercept | 3, 0, 2.5); #>   lprior += cauchy_lpdf(sd_1[1] | 0, 2) #>     - 1 * cauchy_lccdf(0 | 0, 2); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Xc * b; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     for (n in 1:N) { #>       target += ordered_logistic_lpmf(Y[n] | mu[n], Intercept); #>     } #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // compute actual thresholds #>   vector[nthres] b_Intercept = Intercept + dot_product(means_X, b); #> }  # use the horseshoe prior to model sparsity in regression coefficients stancode(count ~ zAge + zBase * Trt,          data = epilepsy, family = poisson(),          prior = set_prior(\"horseshoe(3)\")) #> // generated with brms 2.22.12 #> functions { #>   /* Efficient computation of the horseshoe scale parameters #>    * see Appendix C.1 in https://projecteuclid.org/euclid.ejs/1513306866 #>    * Args: #>    *   lambda: local shrinkage parameters #>    *   tau: global shrinkage parameter #>    *   c2: slap regularization parameter #>    * Returns: #>    *   scale parameter vector of the horseshoe prior #>    */ #>   vector scales_horseshoe(vector lambda, real tau, real c2) { #>     int K = rows(lambda); #>     vector[K] lambda2 = square(lambda); #>     vector[K] lambda_tilde = sqrt(c2 * lambda2 ./ (c2 + tau^2 * lambda2)); #>     return lambda_tilde * tau; #>   } #> } #> data { #>   int<lower=1> N;  // total number of observations #>   array[N] int Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int<lower=1> Kscales;  // number of local scale parameters #>   // data for the horseshoe prior #>   real<lower=0> hs_df;  // local degrees of freedom #>   real<lower=0> hs_df_global;  // global degrees of freedom #>   real<lower=0> hs_df_slab;  // slab degrees of freedom #>   real<lower=0> hs_scale_global;  // global prior scale #>   real<lower=0> hs_scale_slab;  // slab prior scale #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] zb;  // unscaled coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   // horseshoe shrinkage parameters #>   real<lower=0> hs_global;  // global shrinkage parameter #>   real<lower=0> hs_slab;  // slab regularization parameter #>   vector<lower=0>[Kscales] hs_local;  // local parameters for the horseshoe prior #> } #> transformed parameters { #>   vector[Kc] b;  // scaled coefficients #>   vector<lower=0>[Kc] sdb;  // SDs of the coefficients #>   vector<lower=0>[Kscales] scales;  // local horseshoe scale parameters #>   // prior contributions to the log posterior #>   real lprior = 0; #>   // compute horseshoe scale parameters #>   scales = scales_horseshoe(hs_local, hs_global, hs_scale_slab^2 * hs_slab); #>   sdb = scales[(1):(Kc)]; #>   b = zb .* sdb;  // scale coefficients #>   lprior += student_t_lpdf(Intercept | 3, 1.4, 2.5); #>   lprior += student_t_lpdf(hs_global | hs_df_global, 0, hs_scale_global) #>     - 1 * log(0.5); #>   lprior += inv_gamma_lpdf(hs_slab | 0.5 * hs_df_slab, 0.5 * hs_df_slab); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += poisson_log_glm_lpmf(Y | Xc, Intercept, b); #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(zb); #>   target += student_t_lpdf(hs_local | hs_df, 0, 1) #>     - rows(hs_local) * log(0.5); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # fix certain priors to constants bprior <- prior(constant(1), class = \"b\") +   prior(constant(2), class = \"b\", coef = \"zBase\") +   prior(constant(0.5), class = \"sd\") stancode(count ~ zAge + zBase + (1 | patient),               data = epilepsy, prior = bprior) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #> } #> transformed parameters { #>   vector[Kc] b;  // regression coefficients #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   vector[N_1] r_1_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   b[1] = 1; #>   b[2] = 2; #>   sd_1 = rep_vector(0.5, rows(sd_1)); #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Intercept; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     target += normal_id_glm_lpdf(Y | Xc, mu, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # pass priors to Stan without checking prior <- prior_string(\"target += normal_lpdf(b[1] | 0, 1)\", check = FALSE) stancode(count ~ Trt, data = epilepsy, prior = prior) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #> } #> transformed parameters { #>   // prior contributions to the log posterior #>   real lprior = 0; #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #>   target += normal_lpdf(b[1] | 0, 1); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # define priors in a vectorized manner # useful in particular for categorical or multivariate models set_prior(\"normal(0, 2)\", dpar = c(\"muX\", \"muY\", \"muZ\")) #>         prior class coef group resp dpar nlpar   lb   ub tag source #>  normal(0, 2)     b                  muX       <NA> <NA>       user #>  normal(0, 2)     b                  muY       <NA> <NA>       user #>  normal(0, 2)     b                  muZ       <NA> <NA>       user  # specify tags for different priors for sensitivity analysis using priorsense # It is then possible to check the sensitivity when changing the priors with # the same tag while leaving others the same prior_cov <- prior(normal(0, 10), class = \"b\", tag = \"covariates\") prior_trt <- prior(normal(0, 1), class = \"b\", coef = \"Trt1\", tag = \"treatment\") stancode(count ~ Trt + zAge + zBase + (1 | patient),          data = epilepsy, prior = c(prior_cov, prior_trt)) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #> } #> transformed parameters { #>   vector[N_1] r_1_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   real lprior_covariates = 0; #>   real lprior_treatment = 0; #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior_treatment += normal_lpdf(b[1] | 0, 1); #>   lprior_covariates += normal_lpdf(b[2] | 0, 10); #>   lprior_covariates += normal_lpdf(b[3] | 0, 10); #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #>   lprior += student_t_lpdf(sd_1 | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #>   lprior += lprior_covariates; #>   lprior += lprior_treatment; #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Intercept; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     target += normal_id_glm_lpdf(Y | Xc, mu, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }"},{"path":"/reference/stancode.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Stan code from brmsfit objects — stancode.brmsfit","title":"Extract Stan code from brmsfit objects — stancode.brmsfit","text":"Extract Stan code fitted brms model.","code":""},{"path":"/reference/stancode.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Stan code from brmsfit objects — stancode.brmsfit","text":"","code":"# S3 method for class 'brmsfit' stancode(   object,   version = TRUE,   regenerate = NULL,   threads = NULL,   backend = NULL,   ... )"},{"path":"/reference/stancode.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Stan code from brmsfit objects — stancode.brmsfit","text":"object object class brmsfit. version Logical; indicates first line containing brms version number included. Defaults TRUE. regenerate Logical; indicates Stan code regenerated current brms version. default, regenerate FALSE unless required TRUE arguments. threads Controls whether Stan code threaded. See threading details. backend Controls Stan backend. See brm details. ... arguments passed stancode Stan code regenerated.","code":""},{"path":"/reference/stancode.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Stan code from brmsfit objects — stancode.brmsfit","text":"Stan code processing.","code":""},{"path":"/reference/stancode.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for brms Models — stancode.default","title":"Stan Code for brms Models — stancode.default","text":"Generate Stan code brms models","code":""},{"path":"/reference/stancode.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for brms Models — stancode.default","text":"","code":"# Default S3 method stancode(   object,   data,   family = gaussian(),   prior = NULL,   autocor = NULL,   data2 = NULL,   cov_ranef = NULL,   sparse = NULL,   sample_prior = \"no\",   stanvars = NULL,   stan_funs = NULL,   knots = NULL,   drop_unused_levels = TRUE,   threads = getOption(\"brms.threads\", NULL),   normalize = getOption(\"brms.normalize\", TRUE),   save_model = NULL,   ... )"},{"path":"/reference/stancode.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stan Code for brms Models — stancode.default","text":"object object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data object class data.frame (one can coerced class) containing data variables used model. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. prior One brmsprior objects created set_prior related functions combined using c method + operator. See also default_prior help. autocor (Deprecated) optional cor_brms object describing correlation structure within response variable (.e., 'autocorrelation'). See documentation cor_brms description available correlation structures. Defaults NULL, corresponding correlations. multivariate models, autocor might also list autocorrelation structures. now recommend specify autocorrelation terms directly within formula. See brmsformula details. data2 named list objects containing data, passed via argument data. Required objects used autocorrelation structures specify dependency structures well within-group covariance matrices. cov_ranef (Deprecated) list matrices proportional (within) covariance structure group-level effects. names matrices correspond columns data used grouping factors. levels grouping factor appear rownames corresponding matrix. argument can used, among others model pedigrees phylogenetic effects. now recommended specify matrices formula interface using gr related functions. See vignette(\"brms_phylogenetics\") details. sparse (Deprecated) Logical; indicates whether population-level design matrices treated sparse (defaults FALSE). design matrices many zeros, can considerably reduce required memory. Sampling speed currently improved even slightly decreased. now recommended use sparse argument brmsformula related functions. sample_prior Indicate draws priors drawn additionally posterior draws. Options \"\" (default), \"yes\", \"\". Among others, draws can used calculate Bayes factors point hypotheses via hypothesis. Please note improper priors sampled, including default improper priors used brm. See set_prior set (proper) priors. Please also note prior draws overall intercept obtained default technical reasons. See brmsformula obtain prior draws intercept. sample_prior set \"\", draws drawn solely priors ignoring likelihood, allows among others generate draws prior predictive distribution. case, parameters must proper priors. stanvars optional stanvars object generated function stanvar define additional variables use Stan's program blocks. stan_funs (Deprecated) optional character string containing self-defined  Stan functions, included functions block generated Stan code. now recommended use stanvars argument purpose instead. knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. drop_unused_levels unused factors levels data dropped? Defaults TRUE. threads Number threads use within-chain parallelization. control threading process, threads may also brmsthreads object created threading. Within-chain parallelization experimental! recommend use experienced Stan's reduce_sum function slow running model sped means. Can set globally current R session via \"brms.threads\" option (see options). normalize Logical. Indicates whether normalization constants included Stan code (defaults TRUE). Setting FALSE requires Stan version >= 2.25 work. FALSE, sampling efficiency may increased post processing functions bridge_sampler available. Can controlled globally current R session via `brms.normalize` option. save_model Either NULL character string. latter case, model's Stan code saved via cat text file named string supplied save_model. ... arguments internal usage .","code":""},{"path":"/reference/stancode.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stan Code for brms Models — stancode.default","text":"character string containing fully commented Stan code   fit brms model. class c(\"character\", \"brmsmodel\")   facilitate pretty printing.","code":""},{"path":"/reference/stancode.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan Code for brms Models — stancode.default","text":"","code":"stancode(rating ~ treat + period + carry + (1|subject),          data = inhaler, family = \"cumulative\") #> // generated with brms 2.22.12 #> functions { #>   /* cumulative-logit log-PDF for a single response #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   disc: discrimination parameter #>    *   thres: ordinal thresholds #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real cumulative_logit_lpmf(int y, real mu, real disc, vector thres) { #>      int nthres = num_elements(thres); #>      if (y == 1) { #>        return log_inv_logit(disc * (thres[1] - mu)); #>      } else if (y == nthres + 1) { #>        return log1m_inv_logit(disc * (thres[nthres] - mu)); #>      } else { #>        return log_inv_logit_diff(disc * (thres[y] - mu), disc * (thres[y - 1] - mu)); #>      } #>    } #>   /* cumulative-logit log-PDF for a single response and merged thresholds #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   disc: discrimination parameter #>    *   thres: vector of merged ordinal thresholds #>    *   j: start and end index for the applid threshold within 'thres' #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real cumulative_logit_merged_lpmf(int y, real mu, real disc, vector thres, array[] int j) { #>      return cumulative_logit_lpmf(y | mu, disc, thres[j[1]:j[2]]); #>    } #>   /* ordered-logistic log-PDF for a single response and merged thresholds #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   thres: vector of merged ordinal thresholds #>    *   j: start and end index for the applid threshold within 'thres' #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real ordered_logistic_merged_lpmf(int y, real mu, vector thres, array[] int j) { #>      return ordered_logistic_lpmf(y | mu, thres[j[1]:j[2]]); #>    } #>  #> } #> data { #>   int<lower=1> N;  // total number of observations #>   array[N] int Y;  // response variable #>   int<lower=2> nthres;  // number of thresholds #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 1:K) { #>     means_X[i] = mean(X[, i]); #>     Xc[, i] = X[, i] - means_X[i]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   ordered[nthres] Intercept;  // temporary thresholds for centered predictors #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #> } #> transformed parameters { #>   real disc = 1;  // discrimination parameters #>   vector[N_1] r_1_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior += student_t_lpdf(Intercept | 3, 0, 2.5); #>   lprior += student_t_lpdf(sd_1 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Xc * b; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     for (n in 1:N) { #>       target += ordered_logistic_lpmf(Y[n] | mu[n], Intercept); #>     } #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // compute actual thresholds #>   vector[nthres] b_Intercept = Intercept + dot_product(means_X, b); #> }  stancode(count ~ zAge + zBase * Trt + (1|patient),          data = epilepsy, family = \"poisson\") #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   array[N] int Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #> } #> transformed parameters { #>   vector[N_1] r_1_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior += student_t_lpdf(Intercept | 3, 1.4, 2.5); #>   lprior += student_t_lpdf(sd_1 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Intercept; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     target += poisson_log_glm_lpmf(Y | Xc, mu, b); #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }"},{"path":"/reference/stancode.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for Bayesian models — stancode","title":"Stan Code for Bayesian models — stancode","text":"stancode generic function can used   generate Stan code Bayesian models. original use   within brms package, new methods use   objects packages can registered generic.","code":""},{"path":"/reference/stancode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for Bayesian models — stancode","text":"","code":"stancode(object, ...)  make_stancode(formula, ...)"},{"path":"/reference/stancode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stan Code for Bayesian models — stancode","text":"object object whose class determine method apply. Usually, kind symbolic description model form Stan code generated. ... arguments passed specific method. formula Synonym object use make_stancode.","code":""},{"path":"/reference/stancode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stan Code for Bayesian models — stancode","text":"Usually, character string containing generated Stan code.   pretty printing, recommend returned object class   c(\"character\", \"brmsmodel\").","code":""},{"path":"/reference/stancode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stan Code for Bayesian models — stancode","text":"See stancode.default default   method applied brms models.   can view available methods typing: methods(stancode)   make_stancode function alias stancode.","code":""},{"path":[]},{"path":"/reference/stancode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan Code for Bayesian models — stancode","text":"","code":"stancode(rating ~ treat + period + carry + (1|subject),          data = inhaler, family = \"cumulative\") #> // generated with brms 2.22.12 #> functions { #>   /* cumulative-logit log-PDF for a single response #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   disc: discrimination parameter #>    *   thres: ordinal thresholds #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real cumulative_logit_lpmf(int y, real mu, real disc, vector thres) { #>      int nthres = num_elements(thres); #>      if (y == 1) { #>        return log_inv_logit(disc * (thres[1] - mu)); #>      } else if (y == nthres + 1) { #>        return log1m_inv_logit(disc * (thres[nthres] - mu)); #>      } else { #>        return log_inv_logit_diff(disc * (thres[y] - mu), disc * (thres[y - 1] - mu)); #>      } #>    } #>   /* cumulative-logit log-PDF for a single response and merged thresholds #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   disc: discrimination parameter #>    *   thres: vector of merged ordinal thresholds #>    *   j: start and end index for the applid threshold within 'thres' #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real cumulative_logit_merged_lpmf(int y, real mu, real disc, vector thres, array[] int j) { #>      return cumulative_logit_lpmf(y | mu, disc, thres[j[1]:j[2]]); #>    } #>   /* ordered-logistic log-PDF for a single response and merged thresholds #>    * Args: #>    *   y: response category #>    *   mu: latent mean parameter #>    *   thres: vector of merged ordinal thresholds #>    *   j: start and end index for the applid threshold within 'thres' #>    * Returns: #>    *   a scalar to be added to the log posterior #>    */ #>    real ordered_logistic_merged_lpmf(int y, real mu, vector thres, array[] int j) { #>      return ordered_logistic_lpmf(y | mu, thres[j[1]:j[2]]); #>    } #>  #> } #> data { #>   int<lower=1> N;  // total number of observations #>   array[N] int Y;  // response variable #>   int<lower=2> nthres;  // number of thresholds #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   array[N] int<lower=1> J_1;  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 1:K) { #>     means_X[i] = mean(X[, i]); #>     Xc[, i] = X[, i] - means_X[i]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   ordered[nthres] Intercept;  // temporary thresholds for centered predictors #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   array[M_1] vector[N_1] z_1;  // standardized group-level effects #> } #> transformed parameters { #>   real disc = 1;  // discrimination parameters #>   vector[N_1] r_1_1;  // actual group-level effects #>   // prior contributions to the log posterior #>   real lprior = 0; #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior += student_t_lpdf(Intercept | 3, 0, 2.5); #>   lprior += student_t_lpdf(sd_1 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Xc * b; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     for (n in 1:N) { #>       target += ordered_logistic_lpmf(Y[n] | mu[n], Intercept); #>     } #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // compute actual thresholds #>   vector[nthres] b_Intercept = Intercept + dot_product(means_X, b); #> }"},{"path":"/reference/standata.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data passed to Stan from brmsfit objects — standata.brmsfit","title":"Extract data passed to Stan from brmsfit objects — standata.brmsfit","text":"Extract data used Stan fit brms model.","code":""},{"path":"/reference/standata.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data passed to Stan from brmsfit objects — standata.brmsfit","text":"","code":"# S3 method for class 'brmsfit' standata(   object,   newdata = NULL,   re_formula = NULL,   newdata2 = NULL,   new_objects = NULL,   incl_autocor = TRUE,   ... )"},{"path":"/reference/standata.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data passed to Stan from brmsfit objects — standata.brmsfit","text":"object object class brmsfit. newdata optional data.frame evaluate predictions. NULL (default), original data model used. NA values within factors (excluding grouping variables) interpreted dummy variables factor zero. allows, instance, make predictions grand mean using sum coding. NA values within grouping variables treated new level. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. newdata2 named list objects containing new data, passed via argument newdata. Required objects used autocorrelation structures, stanvars. new_objects Deprecated alias newdata2. incl_autocor flag indicating correlation structures originally specified via autocor included predictions. Defaults TRUE. ... arguments passed standata.default. validate_newdata.","code":""},{"path":"/reference/standata.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data passed to Stan from brmsfit objects — standata.brmsfit","text":"named list containing data passed Stan.","code":""},{"path":"/reference/standata.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for brms Models — standata.default","title":"Data for brms Models — standata.default","text":"Generate data brms models passed Stan.","code":""},{"path":"/reference/standata.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for brms Models — standata.default","text":"","code":"# Default S3 method standata(   object,   data,   family = gaussian(),   prior = NULL,   autocor = NULL,   data2 = NULL,   cov_ranef = NULL,   sample_prior = \"no\",   stanvars = NULL,   threads = getOption(\"brms.threads\", NULL),   knots = NULL,   drop_unused_levels = TRUE,   ... )"},{"path":"/reference/standata.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data for brms Models — standata.default","text":"object object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data object class data.frame (one can coerced class) containing data variables used model. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. prior One brmsprior objects created set_prior related functions combined using c method + operator. See also default_prior help. autocor (Deprecated) optional cor_brms object describing correlation structure within response variable (.e., 'autocorrelation'). See documentation cor_brms description available correlation structures. Defaults NULL, corresponding correlations. multivariate models, autocor might also list autocorrelation structures. now recommend specify autocorrelation terms directly within formula. See brmsformula details. data2 named list objects containing data, passed via argument data. Required objects used autocorrelation structures specify dependency structures well within-group covariance matrices. cov_ranef (Deprecated) list matrices proportional (within) covariance structure group-level effects. names matrices correspond columns data used grouping factors. levels grouping factor appear rownames corresponding matrix. argument can used, among others model pedigrees phylogenetic effects. now recommended specify matrices formula interface using gr related functions. See vignette(\"brms_phylogenetics\") details. sample_prior Indicate draws priors drawn additionally posterior draws. Options \"\" (default), \"yes\", \"\". Among others, draws can used calculate Bayes factors point hypotheses via hypothesis. Please note improper priors sampled, including default improper priors used brm. See set_prior set (proper) priors. Please also note prior draws overall intercept obtained default technical reasons. See brmsformula obtain prior draws intercept. sample_prior set \"\", draws drawn solely priors ignoring likelihood, allows among others generate draws prior predictive distribution. case, parameters must proper priors. stanvars optional stanvars object generated function stanvar define additional variables use Stan's program blocks. threads Number threads use within-chain parallelization. control threading process, threads may also brmsthreads object created threading. Within-chain parallelization experimental! recommend use experienced Stan's reduce_sum function slow running model sped means. Can set globally current R session via \"brms.threads\" option (see options). knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. drop_unused_levels unused factors levels data dropped? Defaults TRUE. ... arguments internal use.","code":""},{"path":"/reference/standata.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data for brms Models — standata.default","text":"named list objects containing required data   fit brms model Stan.","code":""},{"path":"/reference/standata.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for brms Models — standata.default","text":"","code":"sdata1 <- standata(rating ~ treat + period + carry + (1|subject),                    data = inhaler, family = \"cumulative\") str(sdata1) #> List of 13 #>  $ N         : int 572 #>  $ Y         : num [1:572(1d)] 1 1 1 1 1 1 1 1 1 1 ... #>  $ nthres    : int 3 #>  $ K         : int 3 #>  $ Kc        : num 3 #>  $ X         : num [1:572, 1:3] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:572] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:3] \"treat\" \"period\" \"carry\" #>  $ Z_1_1     : num [1:572(1d)] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 1 #>   .. ..$ : chr [1:572] \"1\" \"2\" \"3\" \"4\" ... #>  $ disc      : num 1 #>  $ J_1       : int [1:572(1d)] 1 2 3 4 5 6 7 8 9 10 ... #>  $ N_1       : int 286 #>  $ M_1       : int 1 #>  $ NC_1      : int 0 #>  $ prior_only: int 0 #>  - attr(*, \"class\")= chr [1:2] \"standata\" \"list\"  sdata2 <- standata(count ~ zAge + zBase * Trt + (1|patient),                    data = epilepsy, family = \"poisson\") str(sdata2) #> List of 11 #>  $ N         : int 236 #>  $ Y         : num [1:236(1d)] 5 3 2 4 7 5 6 40 5 14 ... #>  $ K         : int 5 #>  $ Kc        : num 4 #>  $ X         : num [1:236, 1:5] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:236] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:5] \"Intercept\" \"zAge\" \"zBase\" \"Trt1\" ... #>   ..- attr(*, \"assign\")= int [1:5] 0 1 2 3 4 #>   ..- attr(*, \"contrasts\")=List of 1 #>   .. ..$ Trt: num [1:2, 1] 0 1 #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : chr [1:2] \"0\" \"1\" #>   .. .. .. ..$ : chr \"1\" #>  $ Z_1_1     : num [1:236(1d)] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 1 #>   .. ..$ : chr [1:236] \"1\" \"2\" \"3\" \"4\" ... #>  $ J_1       : int [1:236(1d)] 1 2 3 4 5 6 7 8 9 10 ... #>  $ N_1       : int 59 #>  $ M_1       : int 1 #>  $ NC_1      : int 0 #>  $ prior_only: int 0 #>  - attr(*, \"class\")= chr [1:2] \"standata\" \"list\""},{"path":"/reference/standata.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan data for Bayesian models — standata","title":"Stan data for Bayesian models — standata","text":"standata generic function can used   generate data Bayesian models passed Stan. original use   within brms package, new methods use   objects packages can registered generic.","code":""},{"path":"/reference/standata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan data for Bayesian models — standata","text":"","code":"standata(object, ...)  make_standata(formula, ...)"},{"path":"/reference/standata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stan data for Bayesian models — standata","text":"object formula object whose class determine method used. symbolic description model fitted. ... arguments passed specific method. formula Synonym object use make_standata.","code":""},{"path":"/reference/standata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stan data for Bayesian models — standata","text":"named list objects containing required data fit   Bayesian model Stan.","code":""},{"path":"/reference/standata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stan data for Bayesian models — standata","text":"See standata.default default method applied brms models. can view available methods typing methods(standata). make_standata function alias standata.","code":""},{"path":[]},{"path":"/reference/standata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan data for Bayesian models — standata","text":"","code":"sdata1 <- standata(rating ~ treat + period + carry + (1|subject),                    data = inhaler, family = \"cumulative\") str(sdata1) #> List of 13 #>  $ N         : int 572 #>  $ Y         : num [1:572(1d)] 1 1 1 1 1 1 1 1 1 1 ... #>  $ nthres    : int 3 #>  $ K         : int 3 #>  $ Kc        : num 3 #>  $ X         : num [1:572, 1:3] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:572] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:3] \"treat\" \"period\" \"carry\" #>  $ Z_1_1     : num [1:572(1d)] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 1 #>   .. ..$ : chr [1:572] \"1\" \"2\" \"3\" \"4\" ... #>  $ disc      : num 1 #>  $ J_1       : int [1:572(1d)] 1 2 3 4 5 6 7 8 9 10 ... #>  $ N_1       : int 286 #>  $ M_1       : int 1 #>  $ NC_1      : int 0 #>  $ prior_only: int 0 #>  - attr(*, \"class\")= chr [1:2] \"standata\" \"list\""},{"path":"/reference/stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"User-defined variables passed to Stan — stanvar","title":"User-defined variables passed to Stan — stanvar","text":"Prepare user-defined variables passed one Stan's program blocks. primarily useful defining complex priors, refitting models without recompilation despite changing priors, defining custom Stan functions.","code":""},{"path":"/reference/stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User-defined variables passed to Stan — stanvar","text":"","code":"stanvar(   x = NULL,   name = NULL,   scode = NULL,   block = \"data\",   position = \"start\",   pll_args = NULL )"},{"path":"/reference/stanvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User-defined variables passed to Stan — stanvar","text":"x R object containing data passed Stan. required block = 'data' ignored otherwise. name Optional character string providing desired variable name object x. NULL (default) variable name directly inferred x. scode Line Stan code define variable Stan language. block = 'data', Stan code inferred based class x default. block Name one Stan's program blocks variable defined. Can 'data', 'tdata' (transformed data), 'parameters', 'tparameters' (transformed parameters), 'model', 'likelihood' (part model block likelihood given), 'genquant' (generated quantities) 'functions'. position Name position within block Stan code placed. Currently allowed 'start' (default) 'end' block. pll_args Optional Stan code put header partial_log_lik functions. ensures variables specified scode can used likelihood even within-chain parallelization activated via threading.","code":""},{"path":"/reference/stanvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User-defined variables passed to Stan — stanvar","text":"object class stanvars.","code":""},{"path":"/reference/stanvar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"User-defined variables passed to Stan — stanvar","text":"stanvar function vectorized. Instead, multiple stanvars objects can added together via + (see Examples). Special attention necessary using stanvars inject code 'likelihood' block threading activated. case, custom Stan code may need adjustments ensure correct observation indexing. Please investigate generated Stan code via stancode see adjustments necessary case.","code":""},{"path":"/reference/stanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"User-defined variables passed to Stan — stanvar","text":"","code":"bprior <- prior(normal(mean_intercept, 10), class = \"Intercept\") stanvars <- stanvar(5, name = \"mean_intercept\") stancode(count ~ Trt, epilepsy, prior = bprior,          stanvars = stanvars) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #>   real mean_intercept; #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #> } #> transformed parameters { #>   // prior contributions to the log posterior #>   real lprior = 0; #>   lprior += normal_lpdf(Intercept | mean_intercept, 10); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # define a multi-normal prior with known covariance matrix bprior <- prior(multi_normal(M, V), class = \"b\") stanvars <- stanvar(rep(0, 2), \"M\", scode = \"  vector[K] M;\") +   stanvar(diag(2), \"V\", scode = \"  matrix[K, K] V;\") stancode(count ~ Trt + zBase, epilepsy,          prior = bprior, stanvars = stanvars) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #>     vector[K] M; #>     matrix[K, K] V; #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #> } #> transformed parameters { #>   // prior contributions to the log posterior #>   real lprior = 0; #>   lprior += multi_normal_lpdf(b | M, V); #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # define a hierachical prior on the regression coefficients bprior <- set_prior(\"normal(0, tau)\", class = \"b\") +   set_prior(\"target += normal_lpdf(tau | 0, 10)\", check = FALSE) stanvars <- stanvar(scode = \"real<lower=0> tau;\",                     block = \"parameters\") stancode(count ~ Trt + zBase, epilepsy,          prior = bprior, stanvars = stanvars) #> // generated with brms 2.22.12 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #>   real<lower=0> tau; #> } #> transformed parameters { #>   // prior contributions to the log posterior #>   real lprior = 0; #>   lprior += normal_lpdf(b | 0, tau); #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #>   target += normal_lpdf(tau | 0, 10); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }  # ensure that 'tau' is passed to the likelihood of a threaded model # not necessary for this example but may be necessary in other cases stanvars <- stanvar(scode = \"real<lower=0> tau;\",                     block = \"parameters\", pll_args = \"real tau\") stancode(count ~ Trt + zBase, epilepsy,          stanvars = stanvars, threads = threading(2)) #> // generated with brms 2.22.12 #> functions { #>   /* integer sequence of values #>    * Args: #>    *   start: starting integer #>    *   end: ending integer #>    * Returns: #>    *   an integer sequence from start to end #>    */ #>   array[] int sequence(int start, int end) { #>     array[end - start + 1] int seq; #>     for (n in 1:num_elements(seq)) { #>       seq[n] = n + start - 1; #>     } #>     return seq; #>   } #>   // compute partial sums of the log-likelihood #>   real partial_log_lik_lpmf(array[] int seq, int start, int end, data vector Y, data matrix Xc, vector b, real Intercept, real sigma, real tau) { #>     real ptarget = 0; #>     int N = end - start + 1; #>     ptarget += normal_id_glm_lpdf(Y[start:end] | Xc[start:end], Intercept, b, sigma); #>     return ptarget; #>   } #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   int<lower=1> Kc;  // number of population-level effects after centering #>   int grainsize;  // grainsize for threading #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   array[N] int seq = sequence(1, N); #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // regression coefficients #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #>   real<lower=0> tau; #> } #> transformed parameters { #>   // prior contributions to the log posterior #>   real lprior = 0; #>   lprior += student_t_lpdf(Intercept | 3, 4, 4.4); #>   lprior += student_t_lpdf(sigma | 3, 0, 4.4) #>     - 1 * student_t_lccdf(0 | 3, 0, 4.4); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     target += reduce_sum(partial_log_lik_lpmf, seq, grainsize, Y, Xc, b, Intercept, sigma, tau); #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> }"},{"path":"/reference/summary.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary of a fitted model represented by a brmsfit object — summary.brmsfit","title":"Create a summary of a fitted model represented by a brmsfit object — summary.brmsfit","text":"Create summary fitted model represented brmsfit object","code":""},{"path":"/reference/summary.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary of a fitted model represented by a brmsfit object — summary.brmsfit","text":"","code":"# S3 method for class 'brmsfit' summary(   object,   priors = FALSE,   prob = 0.95,   robust = FALSE,   mc_se = FALSE,   ... )"},{"path":"/reference/summary.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary of a fitted model represented by a brmsfit object — summary.brmsfit","text":"object object class brmsfit. priors Logical; Indicating priors included summary. Default FALSE. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. mc_se Logical; Indicating uncertainty Estimate caused MCMC sampling shown summary. Defaults FALSE. ... potential arguments","code":""},{"path":"/reference/summary.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a summary of a fitted model represented by a brmsfit object — summary.brmsfit","text":"convergence diagnostics Rhat, Bulk_ESS, Tail_ESS described detail Vehtari et al. (2020).","code":""},{"path":"/reference/summary.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a summary of a fitted model represented by a brmsfit object — summary.brmsfit","text":"Aki Vehtari, Andrew Gelman, Daniel Simpson, Bob Carpenter, Paul-Christian Bürkner (2020). Rank-normalization, folding, localization: improved R-hat assessing convergence MCMC. *Bayesian Analysis*. 1–28. dpi:10.1214/20-BA1221","code":""},{"path":"/reference/theme_black.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","title":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","text":"black theme ggplot graphics inspired blog post Jon Lefcheck (https://jonlefcheck.net/2013/03/11/black-theme--ggplot2-2/).","code":""},{"path":"/reference/theme_black.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","text":"","code":"theme_black(base_size = 12, base_family = \"\")"},{"path":"/reference/theme_black.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","text":"base_size base font size base_family base font family","code":""},{"path":"/reference/theme_black.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","text":"theme object used ggplot2 graphics.","code":""},{"path":"/reference/theme_black.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","text":"using theme_black plots powered bayesplot package pp_check stanplot, recommend using \"viridisC\" color scheme (see examples).","code":""},{"path":"/reference/theme_black.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Black Theme for ggplot2 Graphics — theme_black","text":"","code":"if (FALSE) { # \\dontrun{ # change default ggplot theme ggplot2::theme_set(theme_black())  # change default bayesplot color scheme bayesplot::color_scheme_set(\"viridisC\")  # fit a simple model fit <- brm(count ~ zAge + zBase * Trt + (1|patient),            data = epilepsy, family = poisson(), chains = 2) summary(fit)  # create various plots plot(marginal_effects(fit), ask = FALSE) pp_check(fit) mcmc_plot(fit, type = \"hex\", variable = c(\"b_Intercept\", \"b_Trt1\")) } # }"},{"path":"/reference/theme_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default bayesplot Theme for ggplot2 Graphics — theme_default","title":"Default bayesplot Theme for ggplot2 Graphics — theme_default","text":"theme imported bayesplot package. See theme_default complete documentation.","code":""},{"path":"/reference/theme_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default bayesplot Theme for ggplot2 Graphics — theme_default","text":"base_size base font size base_family base font family","code":""},{"path":"/reference/theme_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default bayesplot Theme for ggplot2 Graphics — theme_default","text":"theme object used ggplot2 graphics.","code":""},{"path":"/reference/threading.html","id":null,"dir":"Reference","previous_headings":"","what":"Threading in Stan — threading","title":"Threading in Stan — threading","text":"Use threads within-chain parallelization Stan via brms interface. Within-chain parallelization experimental! recommend use experienced Stan's reduce_sum function slow running model sped means.","code":""},{"path":"/reference/threading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Threading in Stan — threading","text":"","code":"threading(threads = NULL, grainsize = NULL, static = FALSE, force = FALSE)"},{"path":"/reference/threading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Threading in Stan — threading","text":"threads Number threads use within-chain parallelization. grainsize Number observations evaluated together one chunk one CPUs used threading. NULL (default), grainsize currently chosen max(100, N / (2 * threads)), N number observations data. default experimental may change future without prior notice. static Logical. Apply static (non-adaptive) version reduce_sum? Defaults FALSE. Setting TRUE required achieve exact reproducibility model results (random seed set well). force Logical. Defaults FALSE. TRUE, force Stan model compile threading enabled without altering Stan code generated brms. can useful custom Stan functions use threading internally.","code":""},{"path":"/reference/threading.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Threading in Stan — threading","text":"brmsthreads object can passed   threads argument brm related functions.","code":""},{"path":"/reference/threading.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Threading in Stan — threading","text":"adaptive scheduling procedure used reduce_sum   prevent results exactly reproducible even set random   seed. need exact reproducibility, set argument   static = TRUE may reduce efficiency bit. ensure chunks (whose size defined grainsize) require   roughly amount computing time, recommend storing   observations random order data. least, please avoid sorting   observations response values. latter often   cause variations computing time pointwise log-likelihood,   makes big part parallelized code.","code":""},{"path":"/reference/threading.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Threading in Stan — threading","text":"","code":"if (FALSE) { # \\dontrun{ # this model just serves as an illustration # threading may not actually speed things up here fit <- brm(count ~ zAge + zBase * Trt + (1|patient),            data = epilepsy, family = negbinomial(),            chains = 1, threads = threading(2, grainsize = 100),            backend = \"cmdstanr\") summary(fit) } # }"},{"path":"/reference/unstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up UNSTR correlation structures — unstr","title":"Set up UNSTR correlation structures — unstr","text":"Set unstructured (UNSTR) correlation term brms. function evaluate arguments – exists purely help set model UNSTR terms.","code":""},{"path":"/reference/unstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up UNSTR correlation structures — unstr","text":"","code":"unstr(time, gr)"},{"path":"/reference/unstr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up UNSTR correlation structures — unstr","text":"time optional time variable specifying time ordering observations. default, existing order observations data used. gr optional grouping variable. specified, correlation structure assumed apply observations within grouping level.","code":""},{"path":"/reference/unstr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up UNSTR correlation structures — unstr","text":"object class 'unstr_term', list   arguments interpreted formula   parsing functions brms.","code":""},{"path":[]},{"path":"/reference/unstr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up UNSTR correlation structures — unstr","text":"","code":"if (FALSE) { # \\dontrun{ # add an unstructured correlation matrix for visits within the same patient fit <- brm(count ~ Trt + unstr(visit, patient), data = epilepsy) summary(fit) } # }"},{"path":"/reference/update.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update brms models — update.brmsfit","title":"Update brms models — update.brmsfit","text":"method allows update existing brmsfit object.","code":""},{"path":"/reference/update.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update brms models — update.brmsfit","text":"","code":"# S3 method for class 'brmsfit' update(object, formula., newdata = NULL, recompile = NULL, ...)"},{"path":"/reference/update.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update brms models — update.brmsfit","text":"object object class brmsfit. formula. Changes formula; details see update.formula brmsformula. newdata Optional data.frame update model new data. Data-dependent default priors updated automatically. recompile Logical, indicating whether Stan model recompiled. NULL (default), update tries figure internally, recompilation necessary. Setting FALSE cause Stan code changing arguments ignored. ... arguments passed brm.","code":""},{"path":"/reference/update.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update brms models — update.brmsfit","text":"updating brmsfit created cmdstanr   backend different R session, recompilation triggered   default, cmdstanr writes model executable   temporary directory. avoid , set option   \"cmdstanr_write_stan_file_dir\" nontemporary path choice   creating original brmsfit (see section 'Examples' ).","code":""},{"path":"/reference/update.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update brms models — update.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit1 <- brm(time | cens(censored) ~ age * sex + disease + (1|patient),             data = kidney, family = gaussian(\"log\")) summary(fit1)  ## remove effects of 'disease' fit2 <- update(fit1, formula. = ~ . - disease) summary(fit2)  ## remove the group specific term of 'patient' and ## change the data (just take a subset in this example) fit3 <- update(fit1, formula. = ~ . - (1|patient),                newdata = kidney[1:38, ]) summary(fit3)  ## use another family and add population-level priors fit4 <- update(fit1, family = weibull(), init = \"0\",                prior = set_prior(\"normal(0,5)\")) summary(fit4)  ## to avoid a recompilation when updating a 'cmdstanr'-backend fit in a fresh ## R session, set option 'cmdstanr_write_stan_file_dir' before creating the ## initial 'brmsfit' ## CAUTION: the following code creates some files in the current working ## directory: two 'model_<hash>.stan' files, one 'model_<hash>(.exe)' ## executable, and one 'fit_cmdstanr_<some_number>.rds' file set.seed(7) fname <- paste0(\"fit_cmdstanr_\", sample.int(.Machine$integer.max, 1)) options(cmdstanr_write_stan_file_dir = getwd()) fit_cmdstanr <- brm(rate ~ conc + state,                     data = Puromycin,                     backend = \"cmdstanr\",                     file = fname) # now restart the R session and run the following (after attaching 'brms') set.seed(7) fname <- paste0(\"fit_cmdstanr_\", sample.int(.Machine$integer.max, 1)) fit_cmdstanr <- brm(rate ~ conc + state,                     data = Puromycin,                     backend = \"cmdstanr\",                     file = fname) upd_cmdstanr <- update(fit_cmdstanr,                        formula. = rate ~ conc) } # }"},{"path":"/reference/update.brmsfit_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Update brms models based on multiple data sets — update.brmsfit_multiple","title":"Update brms models based on multiple data sets — update.brmsfit_multiple","text":"method allows update existing brmsfit_multiple object.","code":""},{"path":"/reference/update.brmsfit_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update brms models based on multiple data sets — update.brmsfit_multiple","text":"","code":"# S3 method for class 'brmsfit_multiple' update(object, formula., newdata = NULL, ...)"},{"path":"/reference/update.brmsfit_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update brms models based on multiple data sets — update.brmsfit_multiple","text":"object object class brmsfit_multiple. formula. Changes formula; details see update.formula brmsformula. newdata List data.frames update model new data. Currently required even original data used. ... arguments passed update.brmsfit brm_multiple.","code":""},{"path":"/reference/update.brmsfit_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update brms models based on multiple data sets — update.brmsfit_multiple","text":"","code":"if (FALSE) { # \\dontrun{ library(mice) imp <- mice(nhanes2)  # initially fit the model fit_imp1 <- brm_multiple(bmi ~ age + hyp + chl, data = imp, chains = 1) summary(fit_imp1)  # update the model using fewer predictors fit_imp2 <- update(fit_imp1, formula. = . ~ hyp + chl, newdata = imp) summary(fit_imp2) } # }"},{"path":"/reference/update_adterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Formula Addition Terms — update_adterms","title":"Update Formula Addition Terms — update_adterms","text":"Update additions terms used formulas brms. See addition-terms details.","code":""},{"path":"/reference/update_adterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Formula Addition Terms — update_adterms","text":"","code":"update_adterms(formula, adform, action = c(\"update\", \"replace\"))"},{"path":"/reference/update_adterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Formula Addition Terms — update_adterms","text":"formula Two-sided formula updated. adform One-sided formula containing addition terms update formula . action Indicates happen existing addition terms formula. \"update\" (default), old addition terms corresponding term adform kept. \"replace\", old addition terms removed.","code":""},{"path":"/reference/update_adterms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Formula Addition Terms — update_adterms","text":"object class formula.","code":""},{"path":"/reference/update_adterms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Formula Addition Terms — update_adterms","text":"","code":"form <- y | trials(size) ~ x update_adterms(form, ~ trials(10)) #> y | trials(10) ~ x #> <environment: 0x12395e548> update_adterms(form, ~ weights(w)) #> y | trials(size) + weights(w) ~ x #> <environment: 0x12395e548> update_adterms(form, ~ weights(w), action = \"replace\") #> y | weights(w) ~ x #> <environment: 0x12395e548> update_adterms(y ~ x, ~ trials(10)) #> y | trials(10) ~ x #> <environment: 0x12395e548>"},{"path":"/reference/validate_newdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate New Data — validate_newdata","title":"Validate New Data — validate_newdata","text":"Validate new data passed post-processing methods brms. Unless package developer, rarely need call validate_newdata directly.","code":""},{"path":"/reference/validate_newdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate New Data — validate_newdata","text":"","code":"validate_newdata(   newdata,   object,   re_formula = NULL,   allow_new_levels = FALSE,   newdata2 = NULL,   resp = NULL,   check_response = TRUE,   incl_autocor = TRUE,   group_vars = NULL,   req_vars = NULL,   ... )"},{"path":"/reference/validate_newdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate New Data — validate_newdata","text":"newdata data.frame containing new data validated. object brmsfit object. re_formula formula containing group-level effects considered prediction. NULL (default), include group-level effects; NA ~0, include group-level effects. allow_new_levels flag indicating new levels group-level effects allowed (defaults FALSE). relevant newdata provided. newdata2 named list objects containing new data, passed via argument newdata. Required objects used autocorrelation structures, stanvars. resp Optional names response variables. specified, predictions performed specified response variables. check_response Logical; Indicates response variables checked well. Defaults TRUE. incl_autocor flag indicating correlation structures originally specified via autocor included predictions. Defaults TRUE. group_vars Optional names grouping variables validated. Defaults grouping variables model. req_vars Optional names variables required newdata. NULL (default), variables original data required (unless ignored reason). ... Currently ignored.","code":""},{"path":"/reference/validate_newdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate New Data — validate_newdata","text":"validated 'data.frame' based newdata.","code":""},{"path":"/reference/validate_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Prior for brms Models — validate_prior","title":"Validate Prior for brms Models — validate_prior","text":"Validate priors supplied user. Return complete set priors given model, including default priors.","code":""},{"path":"/reference/validate_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Prior for brms Models — validate_prior","text":"","code":"validate_prior(   prior,   formula,   data,   family = gaussian(),   sample_prior = \"no\",   data2 = NULL,   knots = NULL,   drop_unused_levels = TRUE,   ... )"},{"path":"/reference/validate_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Prior for brms Models — validate_prior","text":"prior One brmsprior objects created set_prior related functions combined using c method + operator. See also default_prior help. formula object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data object class data.frame (one can coerced class) containing data variables used model. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. sample_prior Indicate draws priors drawn additionally posterior draws. Options \"\" (default), \"yes\", \"\". Among others, draws can used calculate Bayes factors point hypotheses via hypothesis. Please note improper priors sampled, including default improper priors used brm. See set_prior set (proper) priors. Please also note prior draws overall intercept obtained default technical reasons. See brmsformula obtain prior draws intercept. sample_prior set \"\", draws drawn solely priors ignoring likelihood, allows among others generate draws prior predictive distribution. case, parameters must proper priors. data2 named list objects containing data, passed via argument data. Required objects used autocorrelation structures specify dependency structures well within-group covariance matrices. knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. drop_unused_levels unused factors levels data dropped? Defaults TRUE. ... arguments internal usage .","code":""},{"path":"/reference/validate_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Prior for brms Models — validate_prior","text":"object class brmsprior.","code":""},{"path":[]},{"path":"/reference/validate_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Prior for brms Models — validate_prior","text":"","code":"prior1 <- prior(normal(0,10), class = b) +   prior(cauchy(0,2), class = sd) validate_prior(prior1, count ~ zAge + zBase * Trt + (1|patient),                data = epilepsy, family = poisson()) #>                   prior     class       coef   group resp dpar nlpar lb ub tag #>  student_t(3, 1.4, 2.5) Intercept                                              #>           normal(0, 10)         b                                              #>           normal(0, 10)         b       Trt1                                   #>           normal(0, 10)         b       zAge                                   #>           normal(0, 10)         b      zBase                                   #>           normal(0, 10)         b zBase:Trt1                                   #>            cauchy(0, 2)        sd                                     0        #>            cauchy(0, 2)        sd            patient                  0        #>            cauchy(0, 2)        sd  Intercept patient                  0        #>        source #>       default #>          user #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized) #>          user #>  (vectorized) #>  (vectorized)"},{"path":"/reference/vcov.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","text":"Get point estimate covariance correlation matrix population-level parameters","code":""},{"path":"/reference/vcov.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","text":"","code":"# S3 method for class 'brmsfit' vcov(object, correlation = FALSE, pars = NULL, ...)"},{"path":"/reference/vcov.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","text":"object object class brmsfit. correlation Logical; FALSE (default), compute covariance matrix, TRUE, compute correlation matrix. pars Optional names coefficients extract. default, coefficients extracted. ... Currently ignored.","code":""},{"path":"/reference/vcov.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","text":"covariance correlation matrix population-level parameters","code":""},{"path":"/reference/vcov.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","text":"Estimates obtained calculating maximum likelihood   covariances (correlations) posterior draws.","code":""},{"path":"/reference/vcov.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ fit <- brm(count ~ zAge + zBase * Trt + (1+Trt|visit),            data = epilepsy, family = gaussian(), chains = 2) vcov(fit) } # }"},{"path":"/reference/waic.brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"Compute widely applicable information criterion (WAIC) based posterior likelihood using loo package. details see waic.","code":""},{"path":"/reference/waic.brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"","code":"# S3 method for class 'brmsfit' waic(   x,   ...,   compare = TRUE,   resp = NULL,   pointwise = FALSE,   model_names = NULL )"},{"path":"/reference/waic.brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"x brmsfit object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments. compare flag indicating information criteria models compared via loo_compare. resp Optional names response variables. specified, predictions performed specified response variables. pointwise flag indicating whether compute full log-likelihood matrix separately observation. latter approach usually considerably slower requires much less working memory. Accordingly, one runs memory issues, pointwise = TRUE way go. model_names NULL (default) use model names derived deparsing call. Otherwise use passed values model names.","code":""},{"path":"/reference/waic.brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"just one object provided, object class loo.  multiple objects provided, object class loolist.","code":""},{"path":"/reference/waic.brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"See loo_compare details model comparisons.  brmsfit objects, WAIC alias waic.  Use method add_criterion store  information criteria fitted model object later usage.","code":""},{"path":"/reference/waic.brmsfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"Vehtari, ., Gelman, ., & Gabry J. (2016). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing, doi:10.1007/s11222-016-9696-4. arXiv preprint arXiv:1507.04544. Gelman, ., Hwang, J., & Vehtari, . (2014). Understanding predictive information criteria Bayesian models. Statistics Computing, 24, 997-1016. Watanabe, S. (2010). Asymptotic equivalence Bayes cross validation widely applicable information criterion singular learning theory. Journal Machine Learning Research, 11, 3571-3594.","code":""},{"path":"/reference/waic.brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widely Applicable Information Criterion (WAIC) — waic.brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # model with population-level effects only fit1 <- brm(rating ~ treat + period + carry,             data = inhaler) (waic1 <- waic(fit1))  # model with an additional varying intercept for subjects fit2 <- brm(rating ~ treat + period + carry + (1|subject),             data = inhaler) (waic2 <- waic(fit2))  # compare both models loo_compare(waic1, waic2) } # }"},{"path":[]},{"path":"/news/index.html","id":"new-features-2-23","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.23","text":"Specify prior tag use prior sensitivity analysis via priorsense thanks Kallioinen. (#1585) Specify group-level prior weights via argument pw multilevel gr mm terms thanks Ben Schneider. (#1719) Fit extended-support Beta models via family xbeta thanks Ioannis Kosmidis. (#1698) Add seed argument loo_R2 thanks Marco Colombo. (#1713) Add family dirichlet_multinomial fit overdispersed multinomial data thanks Tom Peatman. (#1729) Add int_step R function match corresponding Stan function thanks Daniel Sabanes Bove. (#1734)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-23","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.23","text":"Avoid creation zombie workers executing log_lik parallel thanks Aki Vehtari Noa Kallioinen. now, log_lik use PSOCK clusters run parallel even Unix systems. avoid potential speed loss small models, log_lik use option(mc.cores) anymore. changes may reverted underlying causes issue fixed. (#1658) Align definition R function step() definition Stan, step(0) == 1 thanks Daniel Sabanes Bov. (#1734) Make read_csv_as_stanfit() store adapt_delta max_treedepth values $control rstan can find values. Thanks Tristan Mahr (#1767).","code":""},{"path":"/news/index.html","id":"other-changes-2-23","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.23","text":"Improve sampling efficiency beta_binomial models. (#1703)","code":""},{"path":"/news/index.html","id":"brms-2220","dir":"Changelog","previous_headings":"","what":"brms 2.22.0","title":"brms 2.22.0","text":"CRAN release: 2024-09-23","code":""},{"path":"/news/index.html","id":"new-features-2-22-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.22.0","text":"Support different Gaussian process kernels gp terms. (#234) Support stratified cox models via new addition term bhaz. (#1489) Support futures parallelization cmdstanr backend. (#1684) Add method loo_epred thanks Aki Vehtari. (#1641) Add priorsense support via create_priorsense_data.brmsfit thanks Noa Kallioinen. (#1354) Vectorize censored log likelihoods Stan code possible. (#1657) Force Stan activate threading without altering Stan code via argument force function threading. (#1549) Support moment matching loo prediction methods. (#1674)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-22-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.22.0","text":"Fix bug led partially duplicated Stan code multilevel terms thanks Henrik Singmann. (#1651) Fix problems parallel executions post-processing functions sometimes leaving unused R instances behind. Thanks Andrew Johnson, Aki Vehtari, Noa Kallioinen. (#1658) Fix several minor bugs. (#1648, #1644, #1672, #1642, #1634, #1666, #1664)","code":""},{"path":"/news/index.html","id":"other-changes-2-22-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.22.0","text":"Refactor internal code base avoid evaluating many data-dependent quantities several times. (#1653) Smartly access internal functions evaluating non-linear formulas. (#1635) Improve documentation several places. Make argument loo optional loo_moment_match. Change output format loo_predict loo_linpred consistent post-processing functions.","code":""},{"path":"/news/index.html","id":"brms-2210","dir":"Changelog","previous_headings":"","what":"brms 2.21.0","title":"brms 2.21.0","text":"CRAN release: 2024-03-20","code":""},{"path":"/news/index.html","id":"new-features-2-21-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.21.0","text":"Add experimental support pathfinder laplace algorithms cmdstanr backend. (#1591) Automatically recompute fit criteria previously stored model potentially results-changing arguments provided criterion method. Allow turn automatic broadcasting constant priors. Allow joint likelihood evaluation kfold via argument joint. Use several Stan built-functions implemented since version 2.26 improve efficiency multiple model classes. (#1077)","code":""},{"path":"/news/index.html","id":"other-changes-2-21-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.21.0","text":"Change make_stancode make_standata aliases stancode standata, respectively. Change get_prior alias new generic method default_prior. enable packages define new stancode, standata default_prior methods generate Stan code data, extract default priors, objects building brms. Thanks Ven Popov helping . (#1604) Change default prior shape parameter negbinomial models inv_gamma(0.4, 0.3) thanks Aki Vehtari. (#1614) longer automatically canonicalize Stan code cmdstanr used backend. (#1544) Export read_csv_as_stanfit thanks Ven Popov. (#1619) Make installation shinystan optional. means package loaded, via library(shinystan), launch_shinystan can used. (#1595) Improve parameter class names summary output. Show histograms rather densities plot method default. Deprecate argument N plot method favor argument nvariables. Remove deprecated argument exact_loo method kfold.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-21-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.21.0","text":"Remove remaining uses Stan’s old array syntax. Fix bug formula parsing missing values terms interactions thank Guido Biele. (#1608) Ensure compatibility combine_models moment matching. (#1603) Ensure compatibility latest splines2 package version. (#1580) Fix output rmulti_normal thanks Ven Popov. (#1588) Prevent memory leaks executing kfold reloo parallel.","code":""},{"path":"/news/index.html","id":"brms-2203","dir":"Changelog","previous_headings":"","what":"brms 2.20.3","title":"brms 2.20.3","text":"CRAN release: 2023-09-15","code":""},{"path":"/news/index.html","id":"other-changes-2-20-3","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.20.3","text":"Switch new array syntax Stan. increases version requirements Stan >= 2.26.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-20-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.20.0","text":"Apply horseshoe R2D2 priors globally, , additive predictor terms specified formula. (#1492) Use .brmsprior transform objects brmsprior. (#1491) Use matrix data non-linear covariates. (#1488)","code":""},{"path":"/news/index.html","id":"other-changes-2-20-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.20.0","text":"longer support lasso prior good shrinkage prior incompatible newly implemented global shrinkage prior framework. longer support multiple deprecated prior options categorical multivariate models around 3 years deprecation. (#1420) Deprecate argument newdata get_refmodel.brmsfit(). (#1502) Disallow binomial models without trials argument several years deprecation. (#1501)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-20-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.20.0","text":"Fix long-standing bug post-processing spline models lead non-sensible results predictions performed different machine model originally fitted. Old spline models can repaired via restructure. Special thanks Simon Wood, Ruben Arslan, Marta Kołczyńska, Patrick Hogan, Urs Kalbitzer. (#1465) Fix bunch minor issues occurring rare feature combinations.","code":""},{"path":"/news/index.html","id":"brms-2190","dir":"Changelog","previous_headings":"","what":"brms 2.19.0","title":"brms 2.19.0","text":"CRAN release: 2023-03-14","code":""},{"path":"/news/index.html","id":"new-features-2-19-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.19.0","text":"Model unstructured autocorrelation matrices via unstr term thanks help Sebastian Weber. (#1435) Model ordinal data extra category (non-response similar) via hurdle_cumulative family thanks Stephen Wild. (#1448) Improve user control model recompilation via argument recompile post-processing methods require compiled Stan model. Extend control point_estimate feature prepare_predictions via new argument ndraws_point_estimate. Add support latent projection available projpred versions >= 2.4.0. (#1451)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-19-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.19.0","text":"Fix Stan syntax error threaded models lasso priors. (#1427) Fix Stan compilation issues special link functions cauchit softplus. Fix bug predictions projpred, previously requiring variables newdata necessary. (#1457, #1459, #1460)","code":""},{"path":"/news/index.html","id":"brms-2180","dir":"Changelog","previous_headings":"","what":"brms 2.18.0","title":"brms 2.18.0","text":"CRAN release: 2022-09-19","code":""},{"path":"/news/index.html","id":"new-features-2-18-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.18.0","text":"Support regression splines fixed degrees freedom specified via s(..., fx = TRUE). Reuse user-specified control arguments originally passed Stan backend update related methods. (#1373, #1378) Allow retain unused factors levels via drop_unused_levels = FALSE brm related functions. (#1346) Automatically update old default priors based new input updating models via update.brmsfit. (#1380) Allow use dirichlet priors parameter types. (#1165)","code":""},{"path":"/news/index.html","id":"other-changes-2-18-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.18.0","text":"Improve efficiency converting models fitted backend = \"cmdstanr\" stanfit objects thanks Simon Mills Jacob Socolar. (#1331) Allow O1 optimization brms-generated Stan models thanks Aki Vehtari. (#1382)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-18-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.18.0","text":"Fix problems missing boundaries sdme parameters models known response standard errors thanks Solomon Kurz. (#1348) Fix Stan code gamma models softplus link. Allow flexible data inputs brm_multiple. (#1383) Ensure control_params returns right values models fitted cmdstanr backend. (#1390) Fix problems multivariate spline models using subset addition term. (#1385)","code":""},{"path":"/news/index.html","id":"brms-2170","dir":"Changelog","previous_headings":"","what":"brms 2.17.0","title":"brms 2.17.0","text":"CRAN release: 2022-04-13","code":""},{"path":"/news/index.html","id":"new-features-2-17-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.17.0","text":"Add full user control boundaries parameters via lb ub arguments set_prior related functions. (#878, #1094) Add family logistic_normal simplex responses. (#1274) Add argument future_args kfold reloo additional control parallel execution via futures. Add families beta_binomial & zero_inflated_beta_binomial potentially -dispersed zero-inflated binomial response models thanks Hayden Rabel. (#1319 & #1311) Display ppd_* plots pp_check via argument prefix. (#1313) Support log link binomial beta type families. (#1316) Support projpred’s augmented-data projection. (#1292, #1294)","code":""},{"path":"/news/index.html","id":"other-changes-2-17-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.17.0","text":"Argument brms_seed added get_refmodel.brmsfit(). (#1287) Deprecate argument inits favor init consistency Stan backends. Improve speed summary method high-dimensional models. (#1330)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-17-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.17.0","text":"Fix Stan code threaded multivariate models thanks Anirban Mukherjee. (#1277) Fix usage int_conditions conditional_smooths thanks Urs Kalbitzer. (#1280) Fix error sometimes occurring multilevel (reference) models projpred’s K-fold CV. (#1286) Fix response values make_standata bernoulli families 1s present thanks Facundo Munoz. (#1298) Fix pp_check censored responses work plot types thanks Hayden Rabel. (#1327) Ensure argument overwrite add_criterion works expected criteria thanks Andrew Milne. (#1323) Fix problem launch_shinystan occurring warmup draws saved thanks Frank Weber. (#1257, #1329) Fix numerical stability problems log_lik ordinal models. (#1192)","code":""},{"path":"/news/index.html","id":"brms-2163","dir":"Changelog","previous_headings":"","what":"brms 2.16.3","title":"brms 2.16.3","text":"CRAN release: 2021-11-22","code":""},{"path":"/news/index.html","id":"other-changes-2-16-3","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.16.3","text":"Move projpred Imports: Suggests:. important implication users need load attach projpred want use (common case probably attaching, achieved library(projpred)). (#1222)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-16-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.16.3","text":"Ensure argument overwrite add_criterion working intended thanks Ruben Arslan. (#1219) Fix bug get_refmodel.brmsfit() (.e., using projpred \"brmsfit\") causing offsets recognized. (#1220) Several minor bug fixes.","code":""},{"path":"/news/index.html","id":"brms-2161","dir":"Changelog","previous_headings":"","what":"brms 2.16.1","title":"brms 2.16.1","text":"CRAN release: 2021-08-23","code":""},{"path":"/news/index.html","id":"bug-fixes-2-16-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.16.1","text":"Fix bug causing problems post-processing models fitted older versions brms cmdstanr backend thanks Riccardo Fusaroli. (#1218)","code":""},{"path":"/news/index.html","id":"brms-2160","dir":"Changelog","previous_headings":"","what":"brms 2.16.0","title":"brms 2.16.0","text":"CRAN release: 2021-08-18","code":""},{"path":"/news/index.html","id":"new-features-2-16-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.16.0","text":"Support several methods posterior package. (#1204) Substantially extend compatibility brms models emmeans thanks Mattan S. Ben-Shachar. (#907, #1134) Combine missing value (mi) terms subset addition terms. (#1063) Expose function get_dpar use post-processing custom families thank Martin Modrak. (#1131) Support squareplus link function families distributional parameters also allow log link function. Add argument incl_thres posterior_linpred.brmsfit() allowing subtract threshold-excluding linear predictor thresholds case ordinal family. (#1137) Add \"mock\" backend option facilitate testing thanks Martin Modrak. (#1116) Add option file_refit = \"always\" always overwrite models stored via file argument. (#1151) Initial GPU support via OpenCL thanks help Rok Češnovar. (#1166) Support argument robust method hypothesis. (#1170) Vectorize Stan code custom likelihoods via argument loop custom_family. (#1084) Experimentally allow category specific effects ordinal cumulative models. (#1060) Regenerate Stan code existing model via argument regenerate method stancode. Support expose_functions models fitted cmdstanr backend thanks Sebastian Weber. (#1176) Support log_prob related functionality models fitted cmdstanr backend via function add_rstan_model. (#1184)","code":""},{"path":"/news/index.html","id":"other-changes-2-16-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.16.0","text":"Remove use cbind express multivariate models two years deprecation (please use mvbind instead). Method posterior_linpred(transform = TRUE) now equal posterior_epred(dpar = \"mu\") longer deprecated. Refactor extend internal post-processing functions ordinal categorical models thanks Frank Weber. (#1159) Ignore NA values interval censored boundaries long unused. (#1070) Take offsets account deriving default priors overall intercept parameters. (#923) Soft deprecate measurement error () terms favor general consistent missing value (mi) terms. (#698)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-16-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.16.0","text":"Fix issue post-processing non-normal ARMA models thanks Thomas Buehrens. (#1149) Fix issue default baseline hazard knots cox models thanks Malcolm Gillies. (#1143) Fix bug non-linear models caused accidental merging operators non-linear formula thanks Fernando Miguez. (#1142) Correctly trigger refit file_refit = \"on_change\" factor level names changed thanks Martin Modrak. (#1128) Validate factors validate_newdata even simultaneously used predictors grouping variables thanks Martin Modrak. (#1141) Fix bug Stan code generation threaded mixture models predicted mixture probabilities thanks Riccardo Fusaroli. (#1150) Remove duplicated Stan code related horseshoe prior thanks Max Joseph. (#1167) Fix issue post-processing non-looped non-linear parameters thanks Sebastian Weber. Fix issue Stan code threaded non-looped non-linear models thanks Sebastian Weber. (#1175) Fix problems post-processing multivariate meta-analytic models lead incorrect handling known standard errors.","code":""},{"path":"/news/index.html","id":"brms-2150","dir":"Changelog","previous_headings":"","what":"brms 2.15.0","title":"brms 2.15.0","text":"CRAN release: 2021-03-14","code":""},{"path":"/news/index.html","id":"new-features-2-15-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.15.0","text":"Turn normalization Stan model via argument normalize. increase sampling efficiency thanks Andrew Johnson. (#1017, #1053) Enable posterior_predict truncated continuous models even required CDF quantile functions unavailable. Update export validate_prior validate priors supplied user. Add support within-chain threading rstan (Stan >= 2.25) backend. Apply R2-D2 shrinkage prior population-level coefficients via function R2D2 used set_prior. Extend support arma correlation structures non-normal families. Extend scope variables passed via data2 use evaluation model terms. Refit models previously stored disc necessary thanks Martin Modrak. behavior can controlled via file_refit. (#1058) Allow finer tuning informational messages printed brm via silent argument. (#1076) Allow stanvars alter distributional parameters. (#1061) Allow stanvars used inside threaded likelihoods. (#1111)","code":""},{"path":"/news/index.html","id":"other-changes-2-15-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.15.0","text":"Improve numerical stability ordinal sequential models (families sratio cratio) thanks Andrew Johnson. (#1087)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-15-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.15.0","text":"Allow fitting multinomial models cmdstanr backend thanks Andrew Johnson. (#1033) Allow user-defined Stan functions threaded models. (#1034) Allow usage : operator autocorrelation terms. Fix Stan code generation specifying coefficient-level priors spline terms. Fix numerical issues occurring edge cases post-processing Gaussian processes thanks Marta Kołczyńska. Fix error post-processing new levels multi-membership terms thanks Guilherme Mohor. Fix bug Stan code threaded wiener drift diffusion models thanks GitHub user yanivabir. (#1085) Fix bug threaded Stan code GPs categorical variables thanks Reece Willoughby. (#1081) Fix bug threaded Stan code using QR decomposition thanks Steve Bronder. (#1086) Include offsets emmeans related methods thanks Russell V. Lenth. (#1096)","code":""},{"path":"/news/index.html","id":"brms-2144","dir":"Changelog","previous_headings":"","what":"brms 2.14.4","title":"brms 2.14.4","text":"CRAN release: 2020-11-03","code":""},{"path":"/news/index.html","id":"new-features-2-14-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.14.4","text":"Support projpred version 2.0 variable selection generalized linear additive multilevel models thanks Alejandro Catalina. Support variables multi-membership terms. Use Bayesian bootstrap loo_R2.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-14-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.14.4","text":"Allow non-linear terms threaded models. Allow multi-membership terms threaded models. Allow se addition terms threaded models. Allow categorical families threaded models. Fix updating parameters loo_moment_match. Fix facet labels conditional_effects thanks Isaac Petersen. (#1014)","code":""},{"path":"/news/index.html","id":"brms-2140","dir":"Changelog","previous_headings":"","what":"brms 2.14.0","title":"brms 2.14.0","text":"CRAN release: 2020-10-08","code":""},{"path":"/news/index.html","id":"new-features-2-14-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.14.0","text":"Experimentally support within-chain parallelization via reduce_sum using argument threads brm thanks Sebastian Weber. (#892) Add algorithm fixed_param sample fixed parameter values. (#973) longer remove NA values data unused subset addition argument. (#895) Combine variables within-group correlation matrices group-level terms. (#674) Add argument robust summary method. (#976) Parallelize evaluation posterior_predict log_lik methods via argument cores. (#819) Compute effective number parameters kfold. Show prior sources vectorization print output brmsprior objects. (#761) Store unused variables model’s data frame via argument unused function brmsformula. Support posterior mean predictions emmeans via dpar = \"mean\" thanks Russell V. Lenth. (#993) Improve control parameters saved via function save_pars corresponding argument brm. (#746) Add method posterior_smooths computing predictions individual smooth terms. (#738) Allow display grouping variables conditional_effects using effects argument. (#1012)","code":""},{"path":"/news/index.html","id":"other-changes-2-14-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.14.0","text":"Improve sampling efficiency lot models using Stan’s GLM-primitives even non-GLM cases. (#984) Improve sampling efficiency multilevel models within-group covariances thanks David Westergaard. (#977) Deprecate argument probs conditional_effects method favor argument prob.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-14-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.14.0","text":"Fix problem pp_check inducing wronger observation orders time series models thanks Fiona Seaton. (#1007) Fix multiple problems loo_moment_match prevented working complex models.","code":""},{"path":"/news/index.html","id":"brms-2135","dir":"Changelog","previous_headings":"","what":"brms 2.13.5","title":"brms 2.13.5","text":"CRAN release: 2020-07-31","code":""},{"path":"/news/index.html","id":"new-features-2-13-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.13.5","text":"Support Cox proportional hazards model time--event data via family cox. (#230, #962) Support method loo_moment_match, can used update loo object Pareto k estimates large.","code":""},{"path":"/news/index.html","id":"other-changes-2-13-5","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.13.5","text":"Improve prediction behavior post-processing methods sampling new levels grouping factors via sample_new_levels = \"uncertainty\". (#956)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-13-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.13.5","text":"Fix minor problems MKL CRAN.","code":""},{"path":"/news/index.html","id":"brms-2133","dir":"Changelog","previous_headings":"","what":"brms 2.13.3","title":"brms 2.13.3","text":"CRAN release: 2020-07-13","code":""},{"path":"/news/index.html","id":"new-features-2-13-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.13.3","text":"Fix shape parameters across multiple monotonic terms via argument id function mo ensure conditionally monotonic effects. (#924) Support package rtdists additional backend wiener distribution functions thanks help Henrik Singmann. (#385)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-13-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.13.3","text":"Fix generated Stan Code models improper global priors constant priors coefficients thanks Frank Weber. (#919) Fix bug conditional_effects occurring categorical models matrix predictors thanks Jamie Cranston. (#933)","code":""},{"path":"/news/index.html","id":"other-changes-2-13-3","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.13.3","text":"Adjust behavior rate addition term also affects shape parameter negbinomial models thanks Edward Abraham. (#915) Adjust default inverse-gamma prior length-scale parameters Gaussian processes less extreme edge cases thanks Topi Paananen.","code":""},{"path":"/news/index.html","id":"brms-2130","dir":"Changelog","previous_headings":"","what":"brms 2.13.0","title":"brms 2.13.0","text":"CRAN release: 2020-05-27","code":""},{"path":"/news/index.html","id":"new-features-2-13-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.13.0","text":"Constrain ordinal thresholds sum zero via argument threshold ordinal family functions thanks help Marta Kołczyńska. Support posterior_linpred method conditional_effects. Use std_normal Stan code improved efficiency. Add arguments cor, id, cov functions gr mm easy specification group-level correlation structures. Improve workflow feed back brms-created models fitted somewhere else back brms. (#745) Improve argument int_conditions conditional_effects work predictors just interactions. Support multiple imputation data passed via data2 brm_multiple. (#886) Fully support emmeans package thanks help Russell V. Lenth. (#418) Control within-block position Stan code added via stanvar using position argument.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-13-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.13.0","text":"Fix issue Stan code models multiple terms thanks Chris Chatham. (#855, #856) Fix scaling problems estimation ordinal models multiple threshold vectors thanks Marta Kołczyńska Rok Češnovar. Allow usage std_normal set_prior thanks Ben Goodrich. (#867) Fix Stan code distributional models weibull, frechet, inverse.gaussian families thanks Brian Huey Jack Caster. (#879) Fix Stan code models truncated weighted time thanks Michael Thompson. (#884) Fix Stan code multivariate models custom families data variables passed likelihood thanks Raoul Wolf. (#906)","code":""},{"path":"/news/index.html","id":"other-changes-2-13-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.13.0","text":"Reduce minimal scale several default priors 10 2.5. resulting priors remain weakly informative. Automatically group observations gp increased efficiency. Rename parse_bf brmsterms deprecate former function. Rename extract_draws prepare_predictions deprecate former function. Deprecate using model-dependent rescor default. Deprecate argument cov_ranef brm related functions. Improve several internal interfaces. user-visible changes. Simplify parameterization horseshoe prior thanks Aki Vehtari. (#873) Store fixed distributional parameters regular draws behave estimated post-processing methods.","code":""},{"path":"/news/index.html","id":"brms-2120","dir":"Changelog","previous_headings":"","what":"brms 2.12.0","title":"brms 2.12.0","text":"CRAN release: 2020-02-23","code":""},{"path":"/news/index.html","id":"new-features-2-12-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.12.0","text":"Fix parameters constants via prior argument. (#783) Specify autocorrelation terms directly model formula. (#708) Translate integer covariates non-linear formulas integer arrays Stan. Estimate sigma combination fixed correlation matrices via autocorrelation term fcor. Use argument data2 brm related functions pass data objects passed via data. usage data2 extended future versions. Compute pointwise log-likelihood values via log_lik non-factorizable Student-t models. (#705)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-12-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.12.0","text":"Fix output posterior_predict multinomial models thanks Ivan Ukhov. Fix selection group-level terms via re_formula multivariate models thanks Maxime Dahirel. (#834) Enforce correct ordering terms re_formula thanks @ferberkl. (#844) Fix post-processing multivariate multilevel models multiple IDs used grouping factor thanks @lott999. (#835) Store response category names ordinal models output posterior_predict thanks Mattew Kay. (#838) Handle NA values consistently posterior_table thanks Anna Hake. (#845) Fix bug Stan code models multiple monotonic varying effects across different groups thanks Julian Quandt.","code":""},{"path":"/news/index.html","id":"other-changes-2-12-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.12.0","text":"Rename offset variables offsets generated Stan code former reserved new stanc3 compiler.","code":""},{"path":"/news/index.html","id":"brms-2111","dir":"Changelog","previous_headings":"","what":"brms 2.11.1","title":"brms 2.11.1","text":"CRAN release: 2020-01-19","code":""},{"path":"/news/index.html","id":"bug-fixes-2-11-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.11.1","text":"Fix version requirement loo package. Fix effective sample size note summary output. (#824) Fix edge case handling covariates special terms thanks Andrew Milne. (#823) Allow restructuring objects multiple times different brms versions thanks Jonathan . Nations. (#828) Fix validation ordered factors newdata thanks Andrew Milne. (#830)","code":""},{"path":"/news/index.html","id":"brms-2110","dir":"Changelog","previous_headings":"","what":"brms 2.11.0","title":"brms 2.11.0","text":"CRAN release: 2020-01-12","code":""},{"path":"/news/index.html","id":"new-features-2-11-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.11.0","text":"Support grouped ordinal threshold vectors via addition argument resp_thres. (#675) Support method loo_subsample performing approximate leave-one-cross-validation large data. Allow storing model fit criteria via add_criterion. (#793)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-11-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.11.0","text":"Fix prediction uncertainties new group levels sample_new_levels = \"uncertainty\" thanks Dominic Magirr. (#779) Fix problems using pp_check censored models thanks Andrew Milne. (#744) Fix error generated Stan code multivariate zero_inflated_binomial models thanks Raoul Wolf. (#756) Fix predictions spline models using addition argument subset thanks Ruben Arslan. Fix --sample predictions AR models predicting one step ahead. Fix problems using reloo kfold CAR models. Fix problems using fitted(..., scale = \"linear\") multinomial models thanks Santiago Olivella. (#770) Fix problems .mcmc method thinned models thanks @hoxo-m. (#811) Fix problems parsing covariates special effects terms thanks Riccardo Fusaroli (#813)","code":""},{"path":"/news/index.html","id":"other-changes-2-11-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.11.0","text":"Rename marginal_effects conditional_effects marginal_smooths conditional_smooths. (#735) Rename stanplot mcmc_plot. Add method pp_expect alias fitted. (#644) Model fit criteria computed via add_criterion now stored brmsfit$criteria slot. Deprecate resp_cat favor resp_thres. Deprecate specifying global priors regression coefficients categorical multivariate models. Improve names weighting methods model_weights. Deprecate reserved variable intercept favor Intercept. Deprecate argument exact_match favor fixed. Deprecate functions add_loo add_waic favor add_criterion.","code":""},{"path":"/news/index.html","id":"brms-2100","dir":"Changelog","previous_headings":"","what":"brms 2.10.0","title":"brms 2.10.0","text":"CRAN release: 2019-08-29","code":""},{"path":"/news/index.html","id":"new-features-2-10-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.10.0","text":"Improve convergence diagnostics summary output. (#712) Use primitive Stan GLM functions whenever possible. (#703) Pass real integer data vectors custom families via addition arguments vreal vint. (#707) Model compound symmetry correlations via cor_cosy. (#403) Predict sigma combination several autocorrelation structures. (#403) Use addition term rate conveniently handle denominators rate responses log-linear models. Fit BYM2 CAR models via cor_car thanks case study help Mitzi Morris.","code":""},{"path":"/news/index.html","id":"other-changes-2-10-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.10.0","text":"Substantially improve sampling efficiency SAR models thanks GitHub user aslez. (#680) longer allow changing boundaries autocorrelation parameters. Set number trials 1 default marginal_effects specified otherwise. (#718) Use non-standard evaluation addition terms. Name temporary intercept parameters consistently Stan code.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-10-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.10.0","text":"Fix problems post-processing terms grouping factors thanks GitHub user tatters. (#706) Allow grouping variables start dot thanks Bruno Nicenboim. (#679) Allow horseshoe prior categorical related models thanks Github user tatters. (#678) Fix extraction prior samples overall intercepts prior_samples thanks Jonas Kristoffer Lindelov. (#696) Allow underscores used category names categorical responses thanks Emmanuel Charpentier. (#672) Fix Stan code multivariate models multi-membership terms thanks Stan discourse user Pia. Improve checks non-standard variable names thanks Ryan Holbrook. (#721) Fix problems plotting facetted spaghetti plots via marginal_smooths thanks Gavin Simpson. (#740)","code":""},{"path":"/news/index.html","id":"brms-290","dir":"Changelog","previous_headings":"","what":"brms 2.9.0","title":"brms 2.9.0","text":"CRAN release: 2019-05-23","code":""},{"path":"/news/index.html","id":"new-features-2-9-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.9.0","text":"Specify non-linear ordinal models. (#623) Allow fix thresholds ordinal mixture models (#626) Use softplus link function various families. (#622) Use QR decomposition design matrices via argument decomp brmsformula thanks help Ben Goodrich. (#640) Define argument sparse separately model formula. Allow using bayes_R2 loo_R2 ordinal models. (#639) Support cor_arma non-normal models. (#648)","code":""},{"path":"/news/index.html","id":"other-changes-2-9-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"brms 2.9.0","text":"Change parameterization monotonic effects improve interpretability. (#578) longer support cor_arr cor_bsts correlation structures year deprecation. Refactor internal evaluation special predictor terms. Improve penalty splines thanks Ben Goodrich Ruben Arslan.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-9-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"brms 2.9.0","text":"Fix problem applying marginal_effects measurement error models thanks Jonathan . Nations. (#636) Fix computation log-likelihood values weighted mixture models. Fix computation fitted values truncated lognormal weibull models. Fix checking response boundaries models missing values thanks Lucas Deschamps. Fix Stan code multivariate models residual correlations missing value terms thanks Solomon Kurz. Fix problems interactions special terms extracting variable names marginal_effects. Allow compiling model brm_multiple without sampling thanks Petry. (#671)","code":""},{"path":"/news/index.html","id":"brms-280","dir":"Changelog","previous_headings":"","what":"brms 2.8.0","title":"brms 2.8.0","text":"CRAN release: 2019-03-15","code":""},{"path":"/news/index.html","id":"new-features-2-8-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"brms 2.8.0","text":"Fit multinomial models via family multinomial. (#463) Fit Dirichlet models via family dirichlet. (#463) Fit conditional logistic models using categorical multinomial families together non-linear formula syntax. (#560) Choose reference category categorical related families via argument refcat corresponding family functions. Use different subsets data different univariate parts multivariate model via addition argument subset. (#360) Control centering population-level design matrices via argument center brmsformula related functions. Add update method brmsfit_multiple objects. (#615) Split folds group kfold method. (#619)","code":""},{"path":"/news/index.html","id":"other-changes-2-8-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.8.0","text":"Deprecate compare_ic instead recommend loo_compare comparison loo objects ensure consistency packages. (#414) Use glue package Stan code generation. (#549) Introduce mvbind eventually replace cbind formula syntax multivariate models. Validate several sampling-related arguments brm compiling Stan model. (#576) Show evaluated vignettes CRAN . (#591) Export function get_y used extract response values brmsfit objects.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.8.0","text":"Fix error trying change argument re_formula bayes_R2 thanks GitHub user emieldl. (#592) Fix occasional problems running chains parallel via future package thanks Jared Knowles. (#579) Ensure correct ordering response categories ordinal models thanks Jonas Kristoffer Lindelov. (#580) Ignore argument resp marginal_effects univariate models thanks Vassilis Kehayas. (#589) Correctly disable cell-mean coding varying effects. Allow fix parameter ndt drift diffusion models. Fix Stan code t-distributed varying effects thanks Ozgur Asar. Fix error post-processing monotonic effects occurring multivariate models thanks James Rae. (#598) Fix lower bounds truncated discrete models. Fix checks original data kfold thanks GitHub user gcolitti. (#602) Fix error applying VarCorr method meta-analytic models thanks Michael Scharkow. (#616)","code":""},{"path":"/news/index.html","id":"brms-270","dir":"Changelog","previous_headings":"","what":"brms 2.7.0","title":"brms 2.7.0","text":"CRAN release: 2018-12-17","code":""},{"path":"/news/index.html","id":"new-features-2-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"brms 2.7.0","text":"Fit approximate non-isotropic Gaussian processes via gp. (#540) Enable parallelization model fitting brm_multiple via future package. (#364) Perform posterior predictions based k-fold cross-validation via kfold_predict. (#468) Indicate observations --sample predictions ARMA models via argument oos extract_draws. (#539)","code":""},{"path":"/news/index.html","id":"other-changes-2-7-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.7.0","text":"Allow factor-like variables smooth terms. (#562) Make plotting marginal_effects robust usage non-standard variable names. Deactivate certain data validity checks using custom families. Improve efficiency adjacent category models. longer print informational messages Stan parser.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.7.0","text":"Fix issue result substantial efficiency drop various post-processing methods larger models. Fix issue resulted error using fitted(..., scale = \"linear\") ordinal models thanks Andrew Milne. (#557) Allow setting priors overall intercept sparse models. Allow sampling models single observation also contain offset thanks Antonio Vargas. (#545) Fix error sampling priors mixture models thanks Jacki Buros Novik. (#542) Fix problem trying sample priors parameter transformations. Allow using marginal_smooths ordinal models thanks Andrew Milne. (#570) Fix error post-processing terms thanks GitHub user hlluik. (#571) Correctly update warmup samples using update.brmsfit.","code":""},{"path":"/news/index.html","id":"brms-260","dir":"Changelog","previous_headings":"","what":"brms 2.6.0","title":"brms 2.6.0","text":"CRAN release: 2018-10-23","code":""},{"path":"/news/index.html","id":"new-features-2-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"brms 2.6.0","text":"Fit factor smooth interactions thanks Simon Wood. Specify separate priors thresholds ordinal models. (#524) Pass additional arguments rstan::stan_model via argument stan_model_args brm. (#525) Save model objects via argument file add_ic adding model fit criteria. (#478) Compute density ratios based MCMC samples via density_ratio. Ignore offsets various post-processing methods via argument offset. Update addition terms formulas via update_adterms.","code":""},{"path":"/news/index.html","id":"other-changes-2-6-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.6.0","text":"Improve internal modularization smooth terms. Reduce size internal example models.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.6.0","text":"Correctly plot splines factorial covariates via marginal_smooths. Allow sampling priors intercept models thanks Emmanuel Charpentier. (#529) Allow logical operators non-linear formulas.","code":""},{"path":"/news/index.html","id":"brms-250","dir":"Changelog","previous_headings":"","what":"brms 2.5.0","title":"brms 2.5.0","text":"CRAN release: 2018-09-16","code":""},{"path":"/news/index.html","id":"new-features-2-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"brms 2.5.0","text":"Improve marginal_effects better display ordinal categorical models via argument categorical. (#491, #497) Improve method kfold offer options specifying omitted subsets. (#510) Compute estimated values non-linear parameters via argument nlpar method fitted. Disable automatic cell-mean coding model formulas without intercept via argument cmc brmsformula related functions thanks Marie Beisemann. Allow using bridge_sampler method even prior samples drawn within model. (#485) Specify post-processing functions custom families directly custom_family. Select subset coefficients fixef, ranef, coef via argument pars. (#520) Allow overwrite already stored fit indices using add_ic.","code":""},{"path":"/news/index.html","id":"other-changes-2-5-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.5.0","text":"Ignore argument resp post-processing univariate models thanks Ruben Arslan. (#488) Deprecate argument ordinal marginal_effects. (#491) Deprecate argument exact_loo kfold. (#510) Deprecate usage binomial families without specifying trials. longer sample priors population-level intercepts using default intercept parameterization.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.5.0","text":"Correctly sample LKJ correlation priors thanks Donald Williams. Remove stored fit indices calling update brmsfit objects thanks Emmanuel Charpentier. (#490) Fix problems predicting single data point using spline models thanks Emmanuel Charpentier. (#494) Set Post.Prob = 1 Evid.Ratio = Inf method hypothesis thanks Andrew Milne. (#509) Ensure correct handling argument file brm_multiple.","code":""},{"path":"/news/index.html","id":"brms-240","dir":"Changelog","previous_headings":"","what":"brms 2.4.0","title":"brms 2.4.0","text":"CRAN release: 2018-07-20","code":""},{"path":"/news/index.html","id":"new-features-2-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"brms 2.4.0","text":"Define custom variables Stan’s program blocks via function stanvar. (#459) Change scope non-linear parameters global within univariate models. (#390) Allow automatically group predictor values Gaussian processes specified via gp. may lead considerable increase sampling efficiency. (#300) Compute LOO-adjusted R-squared using method loo_R2. Compute non-linear predictors outside loop observations means argument loop brmsformula. Fit non-linear mixture models. (#456) Fit censored truncated mixture models. (#469) Allow horseshoe lasso priors set special population-level effects. Allow vectors length greater one passed set_prior. Conveniently save load fitted model objects brm via argument file. (#472) Display posterior probabilities output hypothesis.","code":""},{"path":"/news/index.html","id":"other-changes-2-4-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.4.0","text":"Deprecate argument stan_funs brm favor using stanvars argument specification custom Stan functions. Deprecate arguments flist ... nlf. Deprecate argument dpar lf nlf.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.4.0","text":"Allow custom families mixture models thanks Noam Ross. (#453) Ensure compatibility mice version 3.0. (#455) Fix naming correlation parameters group-level terms multiple subgroups thanks Kristoffer Magnusson. (#457) Improve scaling default priors lognormal models (#460). Fix multiple problems post-processing categorical models. Fix validation nested grouping factors post-processing methods passing new data thanks Liam Kendall.","code":""},{"path":"/news/index.html","id":"brms-231","dir":"Changelog","previous_headings":"","what":"brms 2.3.1","title":"brms 2.3.1","text":"CRAN release: 2018-06-05","code":""},{"path":"/news/index.html","id":"new-features-2-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"brms 2.3.1","text":"Allow censoring truncation zero-inflated hurdle models. (#430) Export zero-inflated hurdle distribution functions.","code":""},{"path":"/news/index.html","id":"other-changes-2-3-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.3.1","text":"Improve sampling efficiency ordinal families cumulative, sratio, cratio. (#433) Allow specify single k-fold subset method kfold. (#441)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.3.1","text":"Fix problem launch_shinystan due maximum treedepth correctly displayed thanks Paul Galpern. (#431)","code":""},{"path":"/news/index.html","id":"brms-230","dir":"Changelog","previous_headings":"","what":"brms 2.3.0","title":"brms 2.3.0","text":"CRAN release: 2018-05-14","code":""},{"path":"/news/index.html","id":"features-2-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 2.3.0","text":"Extend cor_car support intrinsic CAR models pairwise difference formulation thanks case study Mitzi Morris. Compute loo related methods non-factorizable normal models.","code":""},{"path":"/news/index.html","id":"other-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.3.0","text":"Rename quantile columns posterior_summary. affects output predict related methods summary = TRUE. (#425) Use hashes check models response values performing model comparisons. (#414) longer set pointwise dynamically loo related methods. (#416) longer show information criteria summary output. Simplify internal workflow implement native response distributions. (#421)","code":""},{"path":"/news/index.html","id":"bug-fixes-2-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.3.0","text":"Allow cor_car multivariate models residual correlations thanks Quentin Read. (#427) Fix problem Stan code generation distributional beta models thanks Hans van Calster. (#404) Fix launch_shinystan.brmsfit parameters now shown correctly diagnose tab. (#340)","code":""},{"path":"/news/index.html","id":"brms-220","dir":"Changelog","previous_headings":"","what":"brms 2.2.0","title":"brms 2.2.0","text":"CRAN release: 2018-04-13","code":""},{"path":"/news/index.html","id":"features-2-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 2.2.0","text":"Specify custom response distributions function custom_family. (#381) Model missing values measurement error responses using mi addition term. (#27, #343) Allow missing values predictors using mi terms right-hand side model formulas. (#27) Model interactions special predictor terms mo, , mi. (#313) Introduce methods model_weights loo_model_weights providing several options compute model weights. (#268) Introduce method posterior_average extract posterior samples averaged across models. (#386) Allow hyperparameters group-level effects vary levels categorical covariate using argument function gr. (#365) Allow predictions measurement-error models new data. (#335) Pass user-defined variables Stan via stanvar. (#219, #357) Allow ordinal families mixture models. (#389) Model covariates multi-membership structures vary levels grouping factor via mmc terms. (#353) Fit shifted log-normal models via family shifted_lognormal. (#218) Specify nested non-linear formulas. Introduce function make_conditions ease preparation conditions marginal_effects.","code":""},{"path":"/news/index.html","id":"other-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.2.0","text":"Change parameterization weibull exgaussian models consistent model classes. Post-processing related models fitted earlier version brms longer possible. Treat integer responses ordinal models directly indicating categories even lowest integer one. Improve output hypothesis method thanks ideas Matti Vuorre. (#362) Always plot variables facets marginal_smooths. Deprecate cor_bsts correlation structure.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.2.0","text":"Allow : operator combine groups multi-membership terms thanks Gang Chen. Avoid unexpected error calling LOO argument reloo = TRUE thanks Peter Konings. (#348) Fix problems predict applied categorical models thanks Lydia Andreyevna Krasilnikova Thomas Vladeck. (#336, #345) Allow truncation multivariate models missing values thanks Malte Lau Petersen. (#380) Force time points unique within groups autocorrelation structures thanks Ruben Arslan. (#363) Fix problems post-processing multiple uncorrelated group-level terms grouping factor thanks Ivy Jansen. (#374) Fix problem Stan code multivariate weibull frechet models thanks GitHub user philj1s. (#375) Fix rare error post-processing binomial models thanks GitHub user SeanH94. (#382) Keep attributes variables preparing model.frame thanks Daniel Luedecke. (#393)","code":""},{"path":"/news/index.html","id":"brms-210","dir":"Changelog","previous_headings":"","what":"brms 2.1.0","title":"brms 2.1.0","text":"CRAN release: 2018-01-23","code":""},{"path":"/news/index.html","id":"features-2-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 2.1.0","text":"Fit models multiple imputed datasets via brm_multiple thanks Ruben Arslan. (#27) Combine multiple brmsfit objects via function combine_models. Compute model averaged posterior predictions method pp_average. (#319) Add new argument ordinal marginal_effects generate special plots ordinal models thanks idea GitHub user silberzwiebel. (#190) Use informative inverse-gamma priors length-scale parameters Gaussian processes. (#275) Compute hypotheses levels grouping factor using argument scope method hypothesis. (#327) Vectorize user-defined Stan functions exported via export_functions using argument vectorize. Allow predicting new data models ARMA autocorrelation structures.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.1.0","text":"Correctly recover noise-free coefficients terms thanks Ruben Arslan. side effect, longer possible define priors noise-free Xme variables directly, hyper-parameters meanme sdme. Fix problems renaming parameters cor_bsts structure thanks Joshua Edward Morten. (#312) Fix unexpected errors predicting ordinal models thanks David Hervas Florian Bader. (#306, #307, #331) Fix problems estimating predicting multivariate ordinal models thanks David West. (#314) Fix various minor problems autocorrelation structures thanks David West. (#320)","code":""},{"path":"/news/index.html","id":"brms-201","dir":"Changelog","previous_headings":"","what":"brms 2.0.1","title":"brms 2.0.1","text":"CRAN release: 2017-12-21","code":""},{"path":"/news/index.html","id":"features-2-0-1","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 2.0.1","text":"Export helper functions posterior_summary posterior_table used summarize posterior samples predictions.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.0.1","text":"Fix incorrect computation intercepts acat cratio models thanks Peter Phalen. (#302) Fix pointwise computation LOO WAIC multivariate models estimated residual correlation structure. Fix problems various S3 methods sometimes requiring unused variables specified newdata. Fix naming Stan models thanks Hao Ran Lai.","code":""},{"path":"/news/index.html","id":"brms-200","dir":"Changelog","previous_headings":"","what":"brms 2.0.0","title":"brms 2.0.0","text":"CRAN release: 2017-12-15 second major release brms. main new feature generalized multivariate models, now support everything already possible univariate models, multiple response variables. , internal structure package improved considerably easier maintain extend future. addition, deprecated functionality arguments removed provide clean new start package. Models fitted brms 1.0 higher remain fully compatible brms 2.0.","code":""},{"path":"/news/index.html","id":"features-2-0-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 2.0.0","text":"Add support generalized multivariate models, univariate models may different family autocorrelation structure. Residual correlations can estimated multivariate gaussian student models. features supported univariate models now also available multivariate models. (#3) Specify different formulas different categories categorical models. Add weakly informative default priors parameter class Intercept improve convergence complex distributional models. Optionally display MC standard error summary output. (#280) Add argument re.form alias re_formula methods posterior_predict, posterior_linpred, predictive_error consistency packages making use methods. (#283)","code":""},{"path":"/news/index.html","id":"other-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 2.0.0","text":"Refactor many parts package make consistent easier extend. Show link functions distributional parameters summary output. (#277) Reduce working memory requirements extracting posterior samples use predict related methods thanks Fanyi Zhang. (#224) Remove deprecated aliases functions arguments package. (#278) longer support certain prior specifications, previously labeled deprecated. Remove deprecated addition term disp package. Remove old versions methods fixef, ranef, coef, VarCorr. longer support models fitted brms < 1.0, used multivariate 'trait' syntax originally deprecated brms 1.0. Make posterior sample extraction summary method cleaner less error prone. longer fix seed random number generation brm avoid unexpected behavior simulation studies.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 2.0.0","text":"Store stan_funs brmsfit objects allow using update models user-defined Stan functions thanks Tom Wallis. (#288) Fix problems various post-processing methods applied models reserved variable intercept group-level terms thanks GitHub user ASKurz. (#279) Fix unexpected error predict related methods setting sample_new_levels = \"gaussian\" models one group-level effect. Thanks Timothy Mastny. (#286)","code":""},{"path":"/news/index.html","id":"brms-1102","dir":"Changelog","previous_headings":"","what":"brms 1.10.2","title":"brms 1.10.2","text":"CRAN release: 2017-10-20","code":""},{"path":"/news/index.html","id":"features-1-10-2","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.10.2","text":"Allow setting priors noise-free variables specified via function . Add arguments Ksub, exact_loo group method kfold defining omitted subsets according grouping variable factor. Allow addition argument se skew_normal models.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-10-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.10.2","text":"Ensure correct behavior horseshoe lasso priors multivariate models thanks Donald Williams. Allow using identity links parameters wiener family thanks Henrik Singmann. (#276) Use reasonable dimnames output fitted returning linear predictors ordinal models thanks GitHub user atrolle. (#274) Fix problems marginal_smooths occurring multi-membership models thanks Hans Tierens.","code":""},{"path":"/news/index.html","id":"brms-1100","dir":"Changelog","previous_headings":"","what":"brms 1.10.0","title":"brms 1.10.0","text":"CRAN release: 2017-09-09","code":""},{"path":"/news/index.html","id":"features-1-10-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.10.0","text":"Rebuild monotonic effects scratch allow specifying interactions variables. (#239) Introduce methods posterior_linpred posterior_interval consistency model fitting packages based Stan. Introduce function theme_black providing black ggplot2 theme. Specify special group-level effects within terms ordinary group-level effects. Add argument prob summary, allows control width computed uncertainty intervals. (#259) Add argument newdata kfold method. Add several arguments plot method marginal_effects improve control appearences plots.","code":""},{"path":"/news/index.html","id":"other-changes-1-10-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.10.0","text":"Use noise-free variables model parts measurement error models. (#257) Make names local-level terms used cor_bsts structure informative. Store autocor argument within brmsformula objects. Store posterior prior samples separate slots output method hypothesis. longer change default theme ggplot2 attaching brms. (#256) Make sure signs estimates dropped rounding zero summary.brmsfit. (#263) Refactor parts extract_draws linear_predictor consistent rest package.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.10.0","text":"silence Stan parser calling brm get informative error messages invalid priors. Fix problems spaces priors passed set_prior. Handle non data.frame objects correctly hypothesis.default. Fix problem relating colour points displayed marginal_effects.","code":""},{"path":"/news/index.html","id":"brms-190","dir":"Changelog","previous_headings":"","what":"brms 1.9.0","title":"brms 1.9.0","text":"CRAN release: 2017-08-15","code":""},{"path":"/news/index.html","id":"features-1-9-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.9.0","text":"Perform model comparisons based marginal likelihoods using methods bridge_sampler, bayes_factor, post_prob powered bridgesampling package. Compute Bayesian version R-squared bayes_R2 method. Specify non-linear models distributional parameters. Combine multiple model formulas using + operator helper functions lf, nlf, set_nl. Combine multiple priors using + operator. Split nlpar argument set_prior three arguments resp, dpar, nlpar allow flexible prior specifications.","code":""},{"path":"/news/index.html","id":"other-changes-1-9-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.9.0","text":"Refactor parts package prepare implementation flexible multivariate models future updates. Keep constants log-posterior order bridge_sampler working correctly. Reduce amount renaming done within stanfit object. Rename argument auxpar fitted.brmsfit dpar. Use launch_shinystan generic provided shinystan package. Set bayesplot::theme_default() default ggplot2 theme attaching brms. Include citations brms overview paper published Journal Statistical Software.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.9.0","text":"Fix problems calling fitted hurdle_lognormal models thanks Meghna Krishnadas. Fix problems predicting sigma asym_laplace models thanks Anna Josefine Sorensen.","code":""},{"path":"/news/index.html","id":"brms-180","dir":"Changelog","previous_headings":"","what":"brms 1.8.0","title":"brms 1.8.0","text":"CRAN release: 2017-07-20","code":""},{"path":"/news/index.html","id":"features-1-8-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.8.0","text":"Fit conditional autoregressive (CAR) models via function cor_car thanks case study Max Joseph. Fit spatial autoregressive (SAR) models via function cor_sar. Currently works families gaussian student. Implement skew normal models via family skew_normal. Thanks Stephen Martin suggestions parameterization. Add method reloo perform exact cross-validation problematic observations kfold perform k-fold cross-validation thanks Stan Team. Regularize non-zero coefficients horseshoe prior thanks Juho Piironen Aki Vehtari. Add argument new_objects various post-processing methods allow passing data objects, passed via newdata. Improve parallel execution flexibility via future package.","code":""},{"path":"/news/index.html","id":"other-changes-1-8-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.8.0","text":"Improve efficiency stability ARMA models. Throw error intercept removed ordinal model instead silently adding back . Deprecate argument threshold brm instead recommend passing threshold directly ordinal family functions. Throw error instead message invalid priors passed. Change default value autocor slot brmsfit objects empty cor_brms object. Shorten Stan code combining declarations definitions possible.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.8.0","text":"Fix problems pp_check variable specified argument x attributes thanks Paul Galpern. Fix problems computing fitted values truncated discrete models based new data thanks Nathan Doogan. Fix unexpected errors passing models, properly initialize, various post-processing methods. accidently drop second dimension matrices summary.brmsfit models single observation.","code":""},{"path":"/news/index.html","id":"brms-170","dir":"Changelog","previous_headings":"","what":"brms 1.7.0","title":"brms 1.7.0","text":"CRAN release: 2017-05-23","code":""},{"path":"/news/index.html","id":"features-1-7-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.7.0","text":"Fit latent Gaussian processes one covariates via function gp specified model formula (#221). Rework methods fixef, ranef, coef, VarCorr flexible consistent post-processing methods (#200). Generalize method hypothesis applicable objects coercible data.frame (#198). Visualize predictions via spaghetti plots using argument spaghetti marginal_effects marginal_smooths. Introduce method add_ic store reuse information criteria fitted model objects (#220). Allow negative weights multi-membership grouping structures. Introduce .array method brmsfit objects.","code":""},{"path":"/news/index.html","id":"other-changes-1-7-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.7.0","text":"Show output code HTML vignettes thanks Ben Goodrich (#158). Resolve citations PDF vignettes thanks Thomas Kluth (#223). Improve sampling efficiency exgaussian models thanks Alex Forrence (#222). Also transform data points using argument transform marginal_effects thanks Markus Gesmann.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.7.0","text":"Fix unexpected error marginal_effects occurring models autocorrelation terms thanks Markus Gesmann. Fix multiple problems occurring models cor_bsts structure thanks Andrew Ellis.","code":""},{"path":"/news/index.html","id":"brms-161","dir":"Changelog","previous_headings":"","what":"brms 1.6.1","title":"brms 1.6.1","text":"CRAN release: 2017-04-17","code":""},{"path":"/news/index.html","id":"features-1-6-1","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.6.1","text":"Implement zero-one-inflated beta models via family zero_one_inflated_beta. Allow link functions zero-inflated hurdle models.","code":""},{"path":"/news/index.html","id":"other-changes-1-6-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.6.1","text":"Ensure full compatibility bayesplot version 1.2.0. Deprecate addition argument disp.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-6-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.6.1","text":"Fix problems setting priors coefficients auxiliary parameters also setting priors corresponding coefficients mean parameter. Thanks Matti Vuorre reporting bug. Allow ordered factors used grouping variables thanks GitHub user itissid.","code":""},{"path":"/news/index.html","id":"brms-160","dir":"Changelog","previous_headings":"","what":"brms 1.6.0","title":"brms 1.6.0","text":"CRAN release: 2017-04-06","code":""},{"path":"/news/index.html","id":"features-1-6-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.6.0","text":"Fit finite mixture models using family function mixture. Introduce method pp_mixture compute posterior probabilities mixture component memberships thanks discussion Stephen Martin. Implement different ways sample new levels grouping factors predict related methods argument sample_new_levels. Thanks Tom Wallis Jonah Gabry detailed discussion feature. Add methods loo_predict, loo_linpred, loo_predictive_interval computing LOO predictions thanks Aki Vehtari Jonah Gabry. Allow using offset formulas non-linear auxiliary parameters. Allow sparse matrix multiplication non-linear distributional models. Allow using identity link auxiliary parameters. Introduce argument negative_rt predict posterior_predict distinguish responses upper lower boundary wiener diffusion models thanks Guido Biele. Introduce method control_params conveniently extract control parameters NUTS sampler. Introduce argument int_conditions marginal_effects enhanced plotting two-way interactions thanks discussion Thomas Kluth. Improve flexibility conditions argument marginal_effects. Extend method stanplot correctly handle new mcmc_ plots bayesplot package.","code":""},{"path":"/news/index.html","id":"other-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.6.0","text":"Improve update method recompile models Stan code changes. Warn divergent transitions calling summary print brmsfit objects. Warn unused variables argument conditions calling marginal_effects. Export document several distribution functions previously kept internal.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.6.0","text":"Fix problems inclusion offsets occurring complicated formulas thanks Christian Stock. Fix bug led invalid Stan code sampling priors intercept models thanks Tom Wallis. Correctly check category specific group-level effects non-ordinal models thanks Wayne Folta. Fix problems pp_check specifying argument newdata together arguments x group. Rename last column output hypothesis \"star\" order avoid problems zero length column names thanks GitHub user puterleat. Add missing new line statement end summary output thanks Thomas Kluth.","code":""},{"path":"/news/index.html","id":"brms-151","dir":"Changelog","previous_headings":"","what":"brms 1.5.1","title":"brms 1.5.1","text":"CRAN release: 2017-02-26","code":""},{"path":"/news/index.html","id":"features-1-5-1","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.5.1","text":"Allow horseshoe lasso priors applied population-level effects non-linear auxiliary parameters. Force recompiling Stan models update.brmsfit via argument recompile.","code":""},{"path":"/news/index.html","id":"other-changes-1-5-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.5.1","text":"Avoid indexing matrices non-linear models slightly improve sampling speed.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.5.1","text":"Fix severe problem (introduced version 1.5.0), predicting Beta models thanks Vivian Lam. Fix problems summarizing models fitted older version brms thanks Vivian Lam. Fix checks argument group method pp_check thanks Thomas K. Get arguments subset nsamples working correctly marginal_smooths.","code":""},{"path":"/news/index.html","id":"brms-150","dir":"Changelog","previous_headings":"","what":"brms 1.5.0","title":"brms 1.5.0","text":"CRAN release: 2017-02-17","code":""},{"path":"/news/index.html","id":"features-1-5-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.5.0","text":"Implement generalized extreme value distribution via family gen_extreme_value. Improve flexibility horseshoe prior thanks Juho Piironen. Introduce auxiliary parameter mu alternative specifying effects within formula argument function brmsformula. Return fitted values auxiliary parameters via argument auxpar method fitted. Add vignette \"brms_multilevel\", advanced formula syntax brms explained detail using several examples.","code":""},{"path":"/news/index.html","id":"other-changes-1-5-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.5.0","text":"Refactor various parts package ease implementation mixture multivariate models future updates. user visible effects. Save version number rstan element version brmsfit objects.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.5.0","text":"Fix rare error predicting von_mises models thanks John Kirwan.","code":""},{"path":"/news/index.html","id":"brms-140","dir":"Changelog","previous_headings":"","what":"brms 1.4.0","title":"brms 1.4.0","text":"CRAN release: 2017-01-27","code":""},{"path":"/news/index.html","id":"features-1-4-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.4.0","text":"Fit quantile regression models via family asym_laplace (asymmetric Laplace distribution). Specify non-linear models (hopefully) intuitive way using brmsformula. Fix auxiliary parameters certain values brmsformula. Allow family specified brmsformula. Introduce family frechet modelling strictly positive responses. Allow truncation censoring time. Introduce function prior_ allowing specify priors using one-sided formulas quote. Pass priors Stan directly without performing checks setting check = FALSE set_prior. Introduce method nsamples extract number posterior samples. Export main formula parsing function parse_bf. Add options customize two-dimensional surface plots created marginal_effects marginal_smooths.","code":""},{"path":"/news/index.html","id":"other-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.4.0","text":"Change structure brmsformula objects reliable easier extend. Make sure parameter nu never falls 1 reduce convergence problems using family student. Deprecate argument nonlinear. Deprecate family geometric. Rename cov_fixed cor_fixed. Make handling addition terms transparent exporting documenting related functions. Refactor helper functions fitted method easier extend future. Remove many units tests internal functions add tests user-facing functions instead. Import generics nlme instead lme4 remove dependency latter one. apply structure NULL anymore get rid warnings R-devel.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.4.0","text":"Fix problems fitting smoothing terms factors variables thanks Milani Chaloupka. Fix bug cause monotonic effects ignored Stan code thanks GitHub user bschneider. Make sure data models single observation compatible generated Stan code. Handle argument algorithm correctly update.brmsfit. Fix bug sometimes causing error marginal_effects using family wiener thanks Andrew Ellis. Fix problems fitted applied zero_inflated_beta models thanks Milani Chaloupka. Fix minor problems related prediction autocorrelated models. Fix minor bugs related backwards compatibility multivariate related models fitted brms < 1.0.0.","code":""},{"path":"/news/index.html","id":"brms-131","dir":"Changelog","previous_headings":"","what":"brms 1.3.1","title":"brms 1.3.1","text":"CRAN release: 2016-12-21","code":""},{"path":"/news/index.html","id":"features-1-3-1","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.3.1","text":"Introduce auxiliary parameter disc (‘discrimination’) used ordinal models. default estimated fixed one. Create marginal_effects plots two-way interactions variables explicitely modeled interacting.","code":""},{"path":"/news/index.html","id":"other-changes-1-3-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.3.1","text":"Move rstan ‘Imports’ Rcpp ‘Depends’ order avoid loading rstan global environment automatically.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.3.1","text":"Fix bug leading unexpected errors S3 methods applied ordinal models.","code":""},{"path":"/news/index.html","id":"brms-130","dir":"Changelog","previous_headings":"","what":"brms 1.3.0","title":"brms 1.3.0","text":"CRAN release: 2016-12-19","code":""},{"path":"/news/index.html","id":"features-1-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.3.0","text":"Fit error--variables models using function model formulae. Fit multi-membership models using function mm grouping terms. Add families exgaussian (exponentially modified Gaussian distribution) wiener (Wiener diffusion model distribution) specifically suited handle response times. Add lasso prior alternative horseshoe prior sparse models. Add methods log_posterior, nuts_params, rhat, neff_ratio brmsfit objects conveniently access quantities used diagnose sampling behavior. Combine chains method .mcmc using argument combine_chains. Estimate auxiliary parameter sigma models known standard errors response setting argument sigma TRUE addition function se. Allow visualizing two-dimensional smooths marginal_smooths method.","code":""},{"path":"/news/index.html","id":"other-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.3.0","text":"Require argument data explicitely specified user facing functions. Refactor stanplot method use bayesplot backend. Use bayesplot theme default plotting functions. Add abbreviations mo cs specify monotonic category specific effects respectively. Rename generated variables data.frames returned marginal_effects avoid potential naming conflicts. Deprecate argument cluster use native cores argument rstan instead. Remove argument cluster_type longer required apply forking. Remove deprecated partial argument.","code":""},{"path":"/news/index.html","id":"brms-120","dir":"Changelog","previous_headings":"","what":"brms 1.2.0","title":"brms 1.2.0","text":"CRAN release: 2016-11-22","code":""},{"path":"/news/index.html","id":"features-1-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.2.0","text":"Add new family hurdle_lognormal specifically suited zero-inflated continuous responses. Introduce pp_check method perform various posterior predictive checks using bayesplot package. Introduce marginal_smooths method better visualize smooth terms. Allow varying scale global shrinkage parameter horseshoe prior. Add functions prior prior_string aliases set_prior, former allowing pass arguments without quotes \"\" using non-standard evaluation. Introduce four new vignettes explaining fit non-linear models, distributional models, phylogenetic models, monotonic effects respectively. Extend coef method better handle category specific group-level effects. Introduce prior_summary method brmsfit objects obtain summary prior distributions applied. Sample prior original population-level intercept sample_prior = TRUE even models internal temporary intercept used improve sampling efficiency. Introduce methods posterior_predict, predictive_error log_lik (partial) aliases predict, residuals, logLik respectively.","code":""},{"path":"/news/index.html","id":"other-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.2.0","text":"Improve computation Bayes factors hypothesis method less influenced MCMC error. Improve documentation default priors. Refactor internal structure formula prior evaluating functions. user visible effects. Use bayesplot package new backend plot.brmsfit.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.2.0","text":"Better mimic mgcv parsing smooth terms make sure arguments correctly handled. Avoid error occurring prediction new data grouping factors single factor level supplied thanks Tom Wallis. Fix marginal_effects consistently produce plots covariates non-linear models thanks David Auty. Improve update method better recognize situations recompliation Stan code necessary thanks Raphael P.H. Allow correctly update sample_prior argument value \"\". Fix unexpected error occurring many S3 methods thinning rate divisor total number posterior samples thanks Paul Zerr.","code":""},{"path":"/news/index.html","id":"brms-110","dir":"Changelog","previous_headings":"","what":"brms 1.1.0","title":"brms 1.1.0","text":"CRAN release: 2016-10-11","code":""},{"path":"/news/index.html","id":"features-1-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.1.0","text":"Estimate monotonic group-level effects. Estimate category specific group-level effects. Allow t2 smooth terms based multiple covariates. Estimate interval censored data via addition argument cens model formula. Allow compute residuals also based predicted values instead fitted values.","code":""},{"path":"/news/index.html","id":"other-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.1.0","text":"Use prefix bcs parameter names category specific effects prefix bm parameter names monotonic effects (instead prefix b) simplify identification. Ensure full compatibility ggplot2 version 2.2.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.1.0","text":"Fix bug result incorrect threshold estimates cumulative sratio models thanks Peter Congdon. Fix bug sometimes kept distributional gamma models compiled thanks Tim Beechey. Fix bug causing error predict related methods two-level factors logical variables used covariates non-linear models thanks Martin Schmettow. Fix bug causing error passing lists additional arguments smoothing functions thanks Wayne Folta. Fix bug causing error prior_samples method models multiple group-level terms refer grouping factor thanks Marco Tullio Liuzza. Fix bug sometimes causing error calling marginal_effects weighted models.","code":""},{"path":"/news/index.html","id":"brms-101","dir":"Changelog","previous_headings":"","what":"brms 1.0.1","title":"brms 1.0.1","text":"CRAN release: 2016-09-16 \\subsection{MINOR CHANGES Center design matrices inside Stan code instead inside make_standata. Get rid several warning messages occurring CRAN.","code":""},{"path":"/news/index.html","id":"brms-100","dir":"Changelog","previous_headings":"","what":"brms 1.0.0","title":"brms 1.0.0","text":"CRAN release: 2016-09-15 one largest updates brms since initial release. addition many new features, multivariate 'trait' syntax removed package confusing users, required much special case coding, hard maintain. See help(brmsformula) details formula syntax applied brms.","code":""},{"path":"/news/index.html","id":"features-1-0-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 1.0.0","text":"Allow estimating correlations group-level effects defined across multiple formulae (e.g., non-linear models) specifying IDs grouping term via extended lme4 syntax. Implement distributional regression models allowing fully predict auxiliary parameters response distribution. Among many possibilities, can used model heterogeneity variances. Zero-inflated hurdle models use multivariate syntax anymore instead special auxiliary parameters named zi hu defining zero-inflation / hurdle probabilities. Implement von_mises family model circular responses. Introduce brmsfamily function convenient specification family objects. Allow predictions t2 smoothing terms new data. Feature vectors arguments addition argument trunc order model varying truncation points.","code":""},{"path":"/news/index.html","id":"other-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 1.0.0","text":"Remove cauchy family several months deprecation. Make sure group-level parameter names unambiguous adding double underscores thanks idea GitHub user schmettow. predict method now returns predicted probabilities instead absolute frequencies samples ordinal categorical models. Compute linear predictor model block Stan program instead transformed parameters block. avoids saving samples unnecessary parameters disk. Thanks goes Rick Arrano pointing issue. Colour points marginal_effects plots sensible. Set default robust argument TRUE marginal_effects.brmsfit.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 1.0.0","text":"Fix bug occur predicting factorial response variables new data. affects categorical ordinal models. Fix bug lead duplicated variable names Stan code sampling priors non-linear models thanks Tom Wallis. Fix problems trying pointwise evaluate non-linear formulae logLik.brmsfit thanks Tom Wallis. Ensure full compatibility ranef coef methods non-linear models. Fix problems occasionally occurred handling dplyr datasets thanks GitHub user Atan1988.","code":""},{"path":"/news/index.html","id":"brms-0100","dir":"Changelog","previous_headings":"","what":"brms 0.10.0","title":"brms 0.10.0","text":"CRAN release: 2016-06-29","code":""},{"path":"/news/index.html","id":"features-0-10-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.10.0","text":"Add support generalized additive mixed models (GAMMs). Smoothing terms can specified using s t2 functions model formula. Introduce .data.frame .matrix methods brmsfit objects.","code":""},{"path":"/news/index.html","id":"other-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.10.0","text":"gaussian(\"log\") family longer implies log-normal distribution, normal distribution log-link match behavior glm. log-normal distribution can now specified via family lognormal. Update syntax Stan models match recommended syntax Stan 2.10.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.10.0","text":"ngrps method now always return correct result non-linear models. Fix problems marginal_effects models using reserved variable intercept thanks Frederik Aust. Fix bug print method brmshypothesis objects lead duplicated thus invalid row names. Residual standard deviation parameters multivariate models correctly displayed output summary method. Fix problems using variational Bayes algorithms brms rstan >= 2.10.0 installed thanks GitHub user cwerner87.","code":""},{"path":"/news/index.html","id":"brms-091","dir":"Changelog","previous_headings":"","what":"brms 0.9.1","title":"brms 0.9.1","text":"CRAN release: 2016-05-17","code":""},{"path":"/news/index.html","id":"features-0-9-1","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.9.1","text":"Allow ‘/’ symbol group-level terms formula argument indicate nested grouping structures. Allow compute WAIC LOO based pointwise log-likelihood using argument pointwise substantially reduce memory requirements.","code":""},{"path":"/news/index.html","id":"other-changes-0-9-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.9.1","text":"Add horizontal lines errorbars marginal_effects plots factors.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-9-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.9.1","text":"Fix bug lead cryptic error message changing parts model formula using update method. Fix bug lead error calling marginal_effects predictors generated base::scale function thanks Tom Wallis. Allow interactions numeric categorical predictors marginal_effects passed effects argument order. Fix bug lead incorrect results predict related methods called newdata models using poly function thanks Brock Ferguson. Make sure user-specified factor contrasts always applied multivariate models.","code":""},{"path":"/news/index.html","id":"brms-090","dir":"Changelog","previous_headings":"","what":"brms 0.9.0","title":"brms 0.9.0","text":"CRAN release: 2016-04-19","code":""},{"path":"/news/index.html","id":"features-0-9-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.9.0","text":"Add support monotonic effects allowing use ordinal predictors without assuming categories equidistant. Apply multivariate formula syntax categorical models considerably increase modeling flexibility. Add addition argument disp define multiplicative factors dispersion parameters. linear models, disp applies residual standard deviation sigma can used weight observations. Treat fixed effects design matrix sparse using sparse argument brm. can considerably reduce working memory requirements predictors contain many zeros. Add cor_fixed correlation structure allow fixed user-defined covariance matrices response variable. Allow pass self-defined Stan functions via argument stan_funs brm. Add expose_functions method allowing expose self-defined Stan functions R. Extend functionality update method allow model parts updated. Center fixed effects design matrix also multivariate models. may lead increased sampling speed models many predictors.","code":""},{"path":"/news/index.html","id":"other-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.9.0","text":"Refactor Stan code data generating functions consistent easier extent. Improve checks user-define prior specifications. Warn models converged. Make sure regression curves computed marginal_effects method always smooth. Allow define category specific effects ordinal models directly within formula argument.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.9.0","text":"Fix problems generated Stan code using long non-linear model formulas thanks Emmanuel Charpentier. Fix bug prohibited change priors single standard deviation parameters non-linear models thanks Emmanuel Charpentier. Fix bug prohibited use nested grouping factors non-linear models thanks Tom Wallis. Fix bug linear predictor computation within R, occurring ordinal models multiple category specific effects. lead incorrect outputs predict, fitted, logLik models. Make sure global \"contrasts\" option used post-processing model.","code":""},{"path":"/news/index.html","id":"brms-080","dir":"Changelog","previous_headings":"","what":"brms 0.8.0","title":"brms 0.8.0","text":"CRAN release: 2016-02-15","code":""},{"path":"/news/index.html","id":"features-0-8-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.8.0","text":"Implement generalized non-linear models, can specified help nonlinear argument brm. Compute plot marginal effects using marginal_effects method thanks help Ruben Arslan. Implement zero-inflated beta models family zero_inflated_beta thanks idea Ali Roshan Ghias. Allow restrict domain fixed effects autocorrelation parameters using new arguments lb ub function set_prior thanks idea Joel Gombin. Add .mcmc method compatibility coda package. Allow call WAIC, LOO, logLik methods new data.","code":""},{"path":"/news/index.html","id":"other-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.8.0","text":"Make sure brms fully compatible loo version 0.1.5. Optionally define intercept ordinary fixed effect avoid reparametrization via centering fixed effects design matrix. compute WAIC summary default anymore reduce computation time method larger models. cauchy family now deprecated removed soon often convergence issues much practical application anyway. Change default settings number chains warmup samples defaults rstan (.e., chains = 4 warmup = iter / 2). remove bad behaving chains anymore may point general convergence problems dangerous ignore. Improve flexibility theme argument plotting functions. show legend per page, computing trace density plots plot method. Move code self-defined Stan functions inst/chunks incorporate models using rstan::stanc_builder. Also, add unit tests functions.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.8.0","text":"Fix problems predicting newdata zero-inflated hurdle models thanks Ruben Arslan. Fix problems predicting newdata subset data stored brmsfit object thanks Ruben Arslan. Fix data preparation multivariate models responses NA thanks Raphael Royaute. Fix bug predict method occurring multivariate models now always returns predictions response variables, just first one. Fix bug log-likelihood computation hurdle_poisson hurdle_negbinomial models. may lead minor changes values obtained WAIC LOO models. Fix backwards compatibility issues models fitted version <= 0.5.0 thanks Ulf Koether.","code":""},{"path":"/news/index.html","id":"brms-070","dir":"Changelog","previous_headings":"","what":"brms 0.7.0","title":"brms 0.7.0","text":"CRAN release: 2016-01-18","code":""},{"path":"/news/index.html","id":"features-0-7-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.7.0","text":"Use variational inference algorithms alternative NUTS sampler specifying argument algorithm brm function. Implement beta regression models family Beta. Implement zero-inflated binomial models family zero_inflated_binomial. Implement multiplicative effects family bernoulli fit (among others) 2PL IRT models. Generalize formula argument zero-inflated hurdle models predictors can included one two model parts thanks idea Wade Blanchard. Combine fixed random effects estimates using new coef method. Call residuals method newdata thanks idea Friederike Holz-Ebeling. Allow new levels random effects grouping factors predict, fitted, residuals methods using argument allow_new_levels. Selectively exclude random effects predict, fitted, residuals methods using argument re_formula. Add plot method objects returned method hypothesis visualize prior posterior distributions hypotheses tested.","code":""},{"path":"/news/index.html","id":"other-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.7.0","text":"Improve evaluation response part formula argument reliably allow terms one variable (e.g., y/x ~ 1). Improve sampling efficiency models containing many fixed effects centering fixed effects design matrix thanks Wayne Folta. Improve sampling efficiency models containing uncorrelated random effects specified means (random || group) terms formula thanks Ali Roshan Ghias. Utilize user-defined functions Stan code ordinal models improve readability well sampling efficiency. Make sure model comparisons using LOO WAIC performed models based responses. Use generic functions lme4 package avoid unnecessary function masking. leads change argument order method VarCorr. Change ggplot theme plot method argument theme. Remove n. prefix arguments n.iter, n.warmup, n.thin, n.chains, n.cluster brm function. old argument names remain usable deprecated aliases. Amend names random effects parameters simplify matching respective grouping factor levels.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.7.0","text":"Fix bug hypothesis method cause valid model parameters falsely reported invalid. Fix bug prior_samples method cause prior samples parameters class artificially correlated. Fix Stan code linear models moving-average effects non-identity link functions longer contain code related solely autoregressive effects. Fix bug evaluation formula cause complicated random effects terms falsely treated fixed effects. Fix several bugs calling fitted predict methods newdata thanks Ali Roshan Ghias.","code":""},{"path":"/news/index.html","id":"brms-060","dir":"Changelog","previous_headings":"","what":"brms 0.6.0","title":"brms 0.6.0","text":"CRAN release: 2015-11-14","code":""},{"path":"/news/index.html","id":"features-0-6-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.6.0","text":"Add support zero-inflated hurdle models thanks idea Scott Baldwin. Implement inverse gaussian models family inverse.gaussian. Allow specify truncation boundaries response variable thanks idea Maciej Beresewicz. Add support autoregressive (AR) effects residuals, can modeled using cor_ar cor_arma functions. Stationary autoregressive-moving-average (ARMA) effects order one can now also fitted using special covariance matrices. Implement multivariate student-t models. Binomial ordinal families now support cauchit link function. Allow family functions used family argument. Easy access various rstan plotting functions using stanplot method. Implement horseshoe priors model sparsity fixed effects coefficients thanks idea Josh Chang. Automatically scale default standard deviation priors remain weakly informative independent response scale. Report model weights computed loo package comparing multiple fitted models.","code":""},{"path":"/news/index.html","id":"other-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.6.0","text":"Separate fixed effects Intercept fixed effects Stan code slightly improve sampling efficiency. Move autoregressive (AR) effects response cor_ar cor_arr function result implementing AR effects residuals. Improve checks argument newdata used fitted predict method. Method standata now way extract data passed Stan brmsfit object. Slightly improve Stan code models containing random effects. Change default prior degrees freedom student family gamma(2,0.1). Improve readability output method VarCorr. Export make_stancode function give users direct access Stan code generated brms. Rename brmdata function make_standata. former remains usable deprecated alias. Improve documentation better explain differences autoregressive effects across R packages.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.6.0","text":"Fix bug cause unexpected error predict method called newdata. Avoid side effects rstan compilation routines occasionally cause R crash. Make brms work correctly loo version 0.1.3 thanks Mauricio Garnier Villarreal Jonah Gabry. Fix bug cause WAIC LOO estimates slightly incorrect gaussian models log link.","code":""},{"path":"/news/index.html","id":"brms-050","dir":"Changelog","previous_headings":"","what":"brms 0.5.0","title":"brms 0.5.0","text":"CRAN release: 2015-09-13","code":""},{"path":"/news/index.html","id":"features-0-5-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.5.0","text":"Compute Watanabe-Akaike information criterion (WAIC) leave-one-cross-validation (LOO) using loo package. Provide interface shinystan S3 method launch_shiny. New functions get_prior set_prior make prior specifications easier. Log-likelihood values posterior predictive samples can now calculated within R model fitted. Make predictions based new data using S3 method predict. Allow customized covariance structures grouping factors multiple random effects. New S3 methods fitted residuals compute fitted values residuals, respectively.","code":""},{"path":"/news/index.html","id":"other-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.5.0","text":"Arguments WAIC predict removed brm function, longer necessary. New argument cluster_type function brm allowing choose cluster type created parallel package. Remove chains fail initialize sampling parallel leaving chains untouched. Redesign trace density plots faster stable. S3 method VarCorr now always returns covariance matrices regardless whether correlations estimated.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.5.0","text":"Fix bug S3 method hypothesis related calculation Bayes-factors point hypotheses. User-defined covariance matrices strictly positive definite numerical reasons now handled correctly. Fix problems factor used fixed effect random effects grouping variable time thanks Ulf Koether. Fix minor issues internal parameter naming. Perform additional checking user defined priors.","code":""},{"path":"/news/index.html","id":"brms-041","dir":"Changelog","previous_headings":"","what":"brms 0.4.1","title":"brms 0.4.1","text":"CRAN release: 2015-08-03","code":""},{"path":"/news/index.html","id":"features-0-4-1","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.4.1","text":"Allow sampling specified proper priors model. Compute Bayes-factors point hypotheses S3 method hypothesis.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.4.1","text":"Fix bug cause error models multiple grouping factors thanks Jonathan Williams. Fix bug cause error weighted poisson exponential models.","code":""},{"path":"/news/index.html","id":"brms-040","dir":"Changelog","previous_headings":"","what":"brms 0.4.0","title":"brms 0.4.0","text":"CRAN release: 2015-07-23","code":""},{"path":"/news/index.html","id":"features-0-4-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.4.0","text":"Implement Watanabe-Akaike Information Criterion (WAIC). Implement ||-syntax random effects allowing estimation random effects standard deviations without estimation correlations. Allow combine multiple grouping factors within one random effects argument using interaction symbol :. Generalize S3 method hypothesis used parameter classes just fixed effects. addition, one-sided hypothesis testing now possible. Introduce new family multigaussian allowing multivariate normal regression. Introduce new family bernoulli dichotomous response variables efficient alternative families binomial categorical special case.","code":""},{"path":"/news/index.html","id":"other-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.4.0","text":"Slightly change internal structure brms reflect rstan finally CRAN. Thoroughly check validity response variable data passed Stan. Prohibit variable names containing double underscores __ avoid naming conflicts. Allow function calls several arguments (e.g. poly(x,3)) formula argument function brm. Always center random effects estimates returned S3 method ranef around zero. Prevent use customized covariance matrices grouping factors multiple random effects now. Remove experimental JAGS code package.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.4.0","text":"Fix bug S3 method hypothesis leading error numbers decimal places used formulation hypotheses. Fix bug S3 method ranef caused error grouping factors one random effect. Fix bug cause fixed intercept wrongly estimated presence multiple random intercepts thanks Jarrod Hadfield.","code":""},{"path":"/news/index.html","id":"brms-030","dir":"Changelog","previous_headings":"","what":"brms 0.3.0","title":"brms 0.3.0","text":"CRAN release: 2015-06-29","code":""},{"path":"/news/index.html","id":"features-0-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.3.0","text":"Introduce new methods parnames posterior_samples class ‘brmsfit’ extract parameter names posterior samples given parameters, respectively. Introduce new method hypothesis class brmsfit allowing test non-linear hypotheses concerning fixed effects. Introduce new argument addition function brm get flexible approach specifying additional information response variable (e.g., standard errors meta-analysis). Alternatively, information can also passed formula argument directly. Introduce weighted censored regressions argument addition function brm. Introduce new argument cov.ranef brm function allowing customized covariance structures random effects thanks idea Boby Mathew. Introduce new argument autocor function brm allowing autocorrelation response variable. Introduce new functions cor.ar, cor.ma, cor.arma, used argument autocor modeling autoregressive, moving-average, autoregressive-moving-average models.","code":""},{"path":"/news/index.html","id":"other-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.3.0","text":"Amend parametrization random effects increase efficiency sampling algorithms. Improve vectorization sampling statements.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.3.0","text":"Fix bug cause error fitting poisson models predict = TRUE. Fix bug caused error sampling one chain silent = TRUE.","code":""},{"path":"/news/index.html","id":"brms-020","dir":"Changelog","previous_headings":"","what":"brms 0.2.0","title":"brms 0.2.0","text":"CRAN release: 2015-05-27","code":""},{"path":"/news/index.html","id":"features-0-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"brms 0.2.0","text":"New S3 class brmsfit returned brm function. New methods class brmsfit: summary, print, plot, predict, fixef, ranef, VarCorr, nobs, ngrps, formula. Introduce new argument silent brm function, allowing suppress Stan’s intermediate output. Introduce new families negbinomial (negative binomial) geometric allow flexibility modeling count data.","code":""},{"path":"/news/index.html","id":"other-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"brms 0.2.0","text":"Amend warning error messages make informative. Correct examples documentation. Extend README file.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"brms 0.2.0","text":"Fix bug caused problems formulas contained complicated function calls. Fix bug caused error posterior predictives sampled family cumulative. Fix bug prohibited use improper flat priors parameters proper priors default.","code":""},{"path":"/news/index.html","id":"brms-010","dir":"Changelog","previous_headings":"","what":"brms 0.1.0","title":"brms 0.1.0","text":"CRAN release: 2015-05-08 Initial release version","code":""}]
